openapi: 3.0.1
info:
  title: Opdex Platform API
  version: 1.0.0
  contact:
    name: Opdex Contributors
    url: https://github.com/Opdex/opdex-v1-api
  description: The Opdex Platform Web API is an interface for querying information from the Opdex contract indexer and quoting Opdex smart contract transactions. The Opdex contract indexer is a job that continually runs and stores relevant broadcast transaction data, in a way that represents the current known state of the Opdex protocol at the present time.
  license:
    name: MIT
    url: https://github.com/Opdex/opdex-v1-api/blob/main/LICENSE
servers:
  - url: https://test-api.opdex.com
tags:
  - name: Authentication
    description: Authenticate with the API
  - name: Indexer
    description: Interact with the indexer
  - name: Liquidity Pools
    description: Interact with standard and staking liquidity pools
  - name: Markets
    description: Manage and query standard and staking markets
  - name: Market Tokens
    description: Quote swaps and query token data within markets
  - name: Mining Governances
    description: Quote mining governance distribution
  - name: Mining Pools
    description: Quote and query liquidity mining pools
  - name: Status
    description: View health and API status
  - name: Tokens
    description: Manage and query tracked tokens
  - name: Transactions
    description: View and build transactions
  - name: Vaults
    description: Interact with the Opdex vault DAO
  - name: Wallets
    description: Track and query token balances
components:
  securitySchemes:
    opdexAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Authorize with a bearer token obtained from SignalR
  responses:
    TokenNotFound:
      description: Token not found
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/problemDetails"
          example:
            type: https://httpstatuses.com/404
            title: Not Found
            status: 404
            extensions:
              traceId: 00-00000000000000000000000000000000-0000000000000000-00
    MarketNotFound:
      description: Market not found
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/problemDetails"
          example:
            type: https://httpstatuses.com/404
            title: Not Found
            status: 404
            extensions:
              traceId: 00-00000000000000000000000000000000-0000000000000000-00
    MarketOrTokenNotFound:
      description: Market or token not found
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/problemDetails"
          example:
            type: https://httpstatuses.com/404
            title: Not Found
            detail: Token not found.
            status: 404
            extensions:
              traceId: 00-00000000000000000000000000000000-0000000000000000-00
    VaultNotFound:
      description: Vault not found
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/problemDetails"
          example:
            type: https://httpstatuses.com/404
            title: Not Found
            status: 404
            extensions:
              traceId: 00-00000000000000000000000000000000-0000000000000000-00
    VaultOrProposalNotFound:
      description: Vault or proposal not found
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/problemDetails"
          example:
            type: https://httpstatuses.com/404
            title: Not Found
            status: 404
            extensions:
              traceId: 00-00000000000000000000000000000000-0000000000000000-00
    Unauthorized:
      description: Unauthorized
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/problemDetails"
          example:
            type: https://httpstatuses.com/401
            title: Unauthorized
            status: 401
            extensions:
              traceId: 00-00000000000000000000000000000000-0000000000000000-00
    TooManyRequests:
      description: Too many requests
      headers:
        Retry-After:
          schema:
            type: integer
            minimum: 0
            example: 30
          description: Indicates how many seconds to wait before making a follow-up request
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/problemDetails"
          example:
            type: https://httpstatuses.com/429
            title: Too Many Requests
            detail: "Quota exceeded. Maximum allowed: 500 per 60s. Please try again in 30 second(s)."
            status: 429
            extensions:
              traceId: 00-00000000000000000000000000000000-0000000000000000-00
    InternalServerError:
      description: Unexpected error occurred
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/problemDetails"
          example:
            type: https://httpstatuses.com/500
            title: Internal Server Error
            status: 500
            extensions:
              traceId: 00-00000000000000000000000000000000-0000000000000000-00
  schemas:
    problemDetails:
      type: object
      properties:
        type:
          type: string
          description: A URI reference that identifies the problem type
        title:
          type: string
          description: A short, human-readable summary of the problem type
        status:
          type: integer
          description: The HTTP status code generated by the origin server for this occurrence of the problem
        detail:
          type: string
          description: A human-readable explanation specific to this occurrence of the problem
        instance:
          type: string
          description: A URI reference that identifies the specific occurrence of the problem
        extensions:
          type: object
          additionalProperties:
            nullable: true
          description: Non-standard problem details extensions that may be ignored
      description: Carries machine-readable details of errors in a HTTP response
    validationProblemDetails:
      allOf:
        - $ref: "#/components/schemas/problemDetails"
        - type: object
          properties:
            errors:
              type: object
              additionalProperties:
                type: array
                items:
                  type: string
                  description: Validation error message
                minItems: 1
              description: Contains invalid properties and associated error messages
    address:
      type: string
      description: An address on the Cirrus network
      minLength: 30
      maxLength: 42
      pattern: ^[a-km-zA-HJ-NP-Z1-9]$
    crs:
      type: string
      pattern: CRS
      title: CRS
    tokenAddress:
      description: Either CRS or an SRC token
      oneOf:
        - $ref: "#/components/schemas/address"
        - $ref: "#/components/schemas/crs"
    fixedDecimal:
      type: string
      description: Decimal value with uncapped precision and size
      pattern: ^\d*\.\d{1,18}$
    sha256:
      type: string
      description: SHA256 hash value
      pattern: ^[A-Fa-f0-9]{64}$
      minLength: 64
      maxLength: 64
    tokenOrderByType:
      type: string
      description: Property to sort tokens by
      enum:
        - Name
        - Symbol
        - DailyPriceChangePercent
        - PriceUsd
    tokenType:
      type: string
      description: Token type filter
      enum:
        - Provisional
        - NonProvisional
    marketOrderByType:
      type: string
      description: Property to sort markets by
      enum:
        - LiquidityUsd
        - StakingUsd
        - StakingWeight
        - VolumeUsd
        - MarketRewardsDailyUsd
        - ProviderRewardsDailyUsd
        - DailyLiquidityUsdChangePercent
        - DailyStakingUsdChangePercent
        - DailyStakingWeightChangePercent
    marketType:
      type: string
      description: Market type filter
      enum:
        - Staking
        - Standard
    interval:
      type: string
      description: Snapshot step interval
      enum:
        - 1H
        - 1D
    sortDirection:
      type: string
      description: Sort order
      enum:
        - ASC
        - DESC
    marketPermission:
      type: string
      description: Market permission type
      enum:
        - CreatePool
        - Trade
        - Provide
        - SetPermissions
    proposalType:
      type: string
      description: Type of vault proposal
      enum:
        - Create
        - Revoke
        - TotalPledgeMinimum
        - TotalVoteMinimum
    proposalStatus:
      type: string
      description: Status of vault proposal
      enum:
        - Pledge
        - Vote
        - Complete
    certificateStatus:
      type: string
      description: Status of vault certificate
      enum:
        - Vesting
        - Redeemed
        - Revoked
    transactionEventType:
      type: string
      description: Opdex event type identifier
      enum:
        - CreateMarketEvent
        - SetPendingDeployerOwnershipEvent
        - ClaimPendingDeployerOwnershipEvent
        - CreateLiquidityPoolEvent
        - SetPendingMarketOwnershipEvent
        - ClaimPendingMarketOwnershipEvent
        - ChangeMarketPermissionEvent
        - AddLiquidityEvent
        - RemoveLiquidityEvent
        - SwapEvent
        - StartStakingEvent
        - StopStakingEvent
        - CollectStakingRewardsEvent
        - StartMiningEvent
        - StopMiningEvent
        - CollectMiningRewardsEvent
        - EnableMiningEvent
        - ApprovalEvent
        - TransferEvent
        - DistributionEvent
        - RewardMiningPoolEvent
        - NominationEvent
        - CreateVaultCertificateEvent
        - RevokeVaultCertificateEvent
        - RedeemVaultCertificateEvent
        - SetPendingVaultOwnershipEvent
        - ClaimPendingVaultOwnershipEvent
        - CreateVaultProposalEvent
        - CompleteVaultProposalEvent
        - VaultProposalPledgeEvent
        - VaultProposalWithdrawPledgeEvent
        - VaultProposalVoteEvent
        - VaultProposalWithdrawVoteEvent
    transactionEvent:
      description: An Opdex transaction event produced by contract execution
      oneOf:
        - $ref: "#/components/schemas/createMarketEvent"
        - $ref: "#/components/schemas/setPendingDeployerOwnershipEvent"
        - $ref: "#/components/schemas/claimPendingDeployerOwnershipEvent"
        - $ref: "#/components/schemas/createLiquidityPoolEvent"
        - $ref: "#/components/schemas/setPendingMarketOwnershipEvent"
        - $ref: "#/components/schemas/claimPendingMarketOwnershipEvent"
        - $ref: "#/components/schemas/changeMarketPermissionEvent"
        - $ref: "#/components/schemas/addLiquidityEvent"
        - $ref: "#/components/schemas/removeLiquidityEvent"
        - $ref: "#/components/schemas/swapEvent"
        - $ref: "#/components/schemas/startStakingEvent"
        - $ref: "#/components/schemas/stopStakingEvent"
        - $ref: "#/components/schemas/collectStakingRewardsEvent"
        - $ref: "#/components/schemas/startMiningEvent"
        - $ref: "#/components/schemas/stopMiningEvent"
        - $ref: "#/components/schemas/collectMiningRewardsEvent"
        - $ref: "#/components/schemas/enableMiningEvent"
        - $ref: "#/components/schemas/approvalEvent"
        - $ref: "#/components/schemas/transferEvent"
        - $ref: "#/components/schemas/distributionEvent"
        - $ref: "#/components/schemas/rewardMiningPoolEvent"
        - $ref: "#/components/schemas/nominationEvent"
        - $ref: "#/components/schemas/createVaultCertificateEvent"
        - $ref: "#/components/schemas/revokeVaultCertificateEvent"
        - $ref: "#/components/schemas/createVaultProposalEvent"
        - $ref: "#/components/schemas/completeVaultProposalEvent"
        - $ref: "#/components/schemas/vaultProposalPledgeEvent"
        - $ref: "#/components/schemas/vaultProposalWithdrawPledgeEvent"
        - $ref: "#/components/schemas/vaultProposalVoteEvent"
        - $ref: "#/components/schemas/vaultProposalWithdrawVoteEvent"
      discriminator:
        propertyName: eventType
        mapping:
          createMarketEvent: "#/components/schemas/createMarketEvent"
          setPendingDeployerOwnershipEvent: "#/components/schemas/setPendingDeployerOwnershipEvent"
          claimPendingDeployerOwnershipEvent: "#/components/schemas/claimPendingDeployerOwnershipEvent"
          createLiquidityPoolEvent: "#/components/schemas/createLiquidityPoolEvent"
          setPendingMarketOwnershipEvent: "#/components/schemas/setPendingMarketOwnershipEvent"
          claimPendingMarketOwnershipEvent: "#/components/schemas/claimPendingMarketOwnershipEvent"
          changeMarketPermissionEvent: "#/components/schemas/changeMarketPermissionEvent"
          addLiquidityEvent: "#/components/schemas/addLiquidityEvent"
          removeLiquidityEvent: "#/components/schemas/removeLiquidityEvent"
          swapEvent: "#/components/schemas/swapEvent"
          startStakingEvent: "#/components/schemas/startStakingEvent"
          stopStakingEvent: "#/components/schemas/stopStakingEvent"
          collectStakingRewardsEvent: "#/components/schemas/collectStakingRewardsEvent"
          startMiningEvent: "#/components/schemas/startMiningEvent"
          stopMiningEvent: "#/components/schemas/stopMiningEvent"
          collectMiningRewardsEvent: "#/components/schemas/collectMiningRewardsEvent"
          enableMiningEvent: "#/components/schemas/enableMiningEvent"
          approvalEvent: "#/components/schemas/approvalEvent"
          transferEvent: "#/components/schemas/transferEvent"
          distributionEvent: "#/components/schemas/distributionEvent"
          rewardMiningPoolEvent: "#/components/schemas/rewardMiningPoolEvent"
          nominationEvent: "#/components/schemas/nominationEvent"
          createVaultCertificateEvent: "#/components/schemas/createVaultCertificateEvent"
          revokeVaultCertificateEvent: "#/components/schemas/revokeVaultCertificateEvent"
          createVaultProposalEvent: "#/components/schemas/createVaultProposalEvent"
          completeVaultProposalEvent: "#/components/schemas/completeVaultProposalEvent"
          vaultProposalPledgeEvent: "#/components/schemas/vaultProposalPledgeEvent"
          vaultProposalWithdrawPledgeEvent: "#/components/schemas/vaultProposalWithdrawPledgeEvent"
          vaultProposalVoteEvent: "#/components/schemas/vaultProposalVoteEvent"
          vaultProposalWithdrawVoteEvent: "#/components/schemas/vaultProposalWithdrawVoteEvent"
    createMarketEvent:
      type: object
      description: Indicates a market was created
      properties:
        market:
          $ref: "#/components/schemas/address"
          description: Address of the new market
        owner:
          $ref: "#/components/schemas/address"
          description: Address of the market owner
        router:
          $ref: "#/components/schemas/address"
          description: Address of the market router
        authPoolCreators:
          type: boolean
          description: Whether the market requires authorization to create a pool
        authProviders:
          type: boolean
          description: Whether the market requires authorization to provide liquidity
        authTraders:
          type: boolean
          description: Whether the market requires authorization to swap
        transactionFee:
          type: integer
          format: int32
          minimum: 0
          maximum: 10
          description: Swap fee amount equivalent to the percentage fee multiplied by 10
        stakingToken:
          $ref: "#/components/schemas/address"
          description: Address of the staking token
        enableMarketFee:
          type: boolean
          description: Whether the market fee is enabled
        eventType:
          $ref: "#/components/schemas/transactionEventType"
          description: Event discriminator
        contract:
          $ref: "#/components/schemas/address"
          description: Address of the market deployer
        sortOrder:
          type: integer
          minimum: 0
          description: Index to sort event order
    setPendingDeployerOwnershipEvent:
      type: object
      description: Indicates a change in pending owner for a market deployer
      properties:
        from:
          $ref: "#/components/schemas/address"
          description: Address of previous pending owner
        to:
          $ref: "#/components/schemas/address"
          description: Address of the new pending owner
        eventType:
          $ref: "#/components/schemas/transactionEventType"
          description: Event discriminator
        contract:
          $ref: "#/components/schemas/address"
          description: Address of the market deployer
        sortOrder:
          type: integer
          minimum: 0
          description: Index to sort event order
    claimPendingDeployerOwnershipEvent:
      type: object
      description: Indicates a change in owner for a market deployer
      properties:
        from:
          $ref: "#/components/schemas/address"
          description: Address of previous owner
        to:
          $ref: "#/components/schemas/address"
          description: Address of the new owner
        eventType:
          $ref: "#/components/schemas/transactionEventType"
          description: Event discriminator
        contract:
          $ref: "#/components/schemas/address"
          description: Address of the market deployer
        sortOrder:
          type: integer
          minimum: 0
          description: Index to sort event order
    createLiquidityPoolEvent:
      type: object
      description: Indicates a new liquidity pool was created
      properties:
        token:
          $ref: "#/components/schemas/address"
          description: Address of the SRC token in the pool
        liquidityPool:
          $ref: "#/components/schemas/address"
          description: Address of the newly created liquidity pool
        eventType:
          $ref: "#/components/schemas/transactionEventType"
          description: Event discriminator
        contract:
          $ref: "#/components/schemas/address"
          description: Address of the market
        sortOrder:
          type: integer
          minimum: 0
          description: Index to sort event order
    setPendingMarketOwnershipEvent:
      type: object
      description: Indicates a change in pending owner for a market
      properties:
        from:
          $ref: "#/components/schemas/address"
          description: Address of previous pending owner
        to:
          $ref: "#/components/schemas/address"
          description: Address of the new pending owner
        eventType:
          $ref: "#/components/schemas/transactionEventType"
          description: Event discriminator
        contract:
          $ref: "#/components/schemas/address"
          description: Address of the market
        sortOrder:
          type: integer
          minimum: 0
          description: Index to sort event order
    claimPendingMarketOwnershipEvent:
      type: object
      description: Indicates a change in owner for a market
      properties:
        from:
          $ref: "#/components/schemas/address"
          description: Address of previous owner
        to:
          $ref: "#/components/schemas/address"
          description: Address of the new owner
        eventType:
          $ref: "#/components/schemas/transactionEventType"
          description: Event discriminator
        contract:
          $ref: "#/components/schemas/address"
          description: Address of the market
        sortOrder:
          type: integer
          minimum: 0
          description: Index to sort event order
    changeMarketPermissionEvent:
      type: object
      description: Indicates a change in permissions for a user address
      properties:
        address:
          $ref: "#/components/schemas/address"
          description: Address for which permissions were updated
        permission:
          $ref: "#/components/schemas/marketPermission"
          description: Permission type
        isAuthorized:
          type: boolean
          description: If the address is granted the permission
        eventType:
          $ref: "#/components/schemas/transactionEventType"
          description: Event discriminator
        contract:
          $ref: "#/components/schemas/address"
          description: Address of the market
        sortOrder:
          type: integer
          minimum: 0
          description: Index to sort event order
    addLiquidityEvent:
      type: object
      description: Indicates liquidity was provided to a pool
      properties:
        amountCrs:
          $ref: "#/components/schemas/fixedDecimal"
          description: Amount of CRS tokens provided
        amountSrc:
          $ref: "#/components/schemas/fixedDecimal"
          description: Amount of SRC tokens provided
        amountLpt:
          $ref: "#/components/schemas/fixedDecimal"
          description: Amount of OLPT tokens received
        tokenSrc:
          $ref: "#/components/schemas/address"
          description: Address of the SRC token
        tokenLp:
          $ref: "#/components/schemas/address"
          description: Address of the OLPT token
        tokenLpTotalSupply:
          $ref: "#/components/schemas/fixedDecimal"
          description: Total supply of the OLPT token
        eventType:
          $ref: "#/components/schemas/transactionEventType"
          description: Event discriminator
        contract:
          $ref: "#/components/schemas/address"
          description: Address of the liquidity pool
        sortOrder:
          type: integer
          minimum: 0
          description: Index to sort event order
    removeLiquidityEvent:
      type: object
      description: Indicates liquidity was removed from a pool
      properties:
        amountCrs:
          $ref: "#/components/schemas/fixedDecimal"
          description: Amount of CRS tokens removed
        amountSrc:
          $ref: "#/components/schemas/fixedDecimal"
          description: Amount of SRC tokens removed
        amountLpt:
          $ref: "#/components/schemas/fixedDecimal"
          description: Amount of OLPT tokens burned
        tokenSrc:
          $ref: "#/components/schemas/address"
          description: Address of the SRC token
        tokenLp:
          $ref: "#/components/schemas/address"
          description: Address of the OLPT token
        tokenLpTotalSupply:
          $ref: "#/components/schemas/fixedDecimal"
          description: Total supply of the OLPT token
        eventType:
          $ref: "#/components/schemas/transactionEventType"
          description: Event discriminator
        contract:
          $ref: "#/components/schemas/address"
          description: Address of the liquidity pool
        sortOrder:
          type: integer
          minimum: 0
          description: Index to sort event order
    approvalEvent:
      type: object
      description: Indicates a token spending approval happened
      properties:
        owner:
          $ref: "#/components/schemas/address"
          description: Address of the token holder
        spender:
          $ref: "#/components/schemas/address"
          description: Address approved to spend the tokens
        amount:
          $ref: "#/components/schemas/fixedDecimal"
          description: Amount of tokens approved to spend
        eventType:
          $ref: "#/components/schemas/transactionEventType"
          description: Event discriminator
        contract:
          $ref: "#/components/schemas/address"
          description: Address of the SRC token
        sortOrder:
          type: integer
          minimum: 0
          description: Index to sort event order
    distributionEvent:
      type: object
      description: Indicates governance token distribution took place
      properties:
        vaultAmount:
          $ref: "#/components/schemas/fixedDecimal"
          description: Address approved to spend the tokens
        miningGovernanceAmount:
          $ref: "#/components/schemas/fixedDecimal"
          description: Address of the token holder
        periodIndex:
          type: integer
          minimum: 0
          description: Distribution number
        totalSupply:
          $ref: "#/components/schemas/fixedDecimal"
          description: Total amount of governance tokens distributed
        nextDistributionBlock:
          type: integer
          minimum: 1
          description: Block number of the next distribution
        eventType:
          $ref: "#/components/schemas/transactionEventType"
          description: Event discriminator
        contract:
          $ref: "#/components/schemas/address"
          description: Address of the SRC token
        sortOrder:
          type: integer
          minimum: 0
          description: Index to sort event order
    transferEvent:
      type: object
      description: Indicates a transfer happened
      properties:
        from:
          $ref: "#/components/schemas/address"
          description: Address tokens were transferred from
        to:
          $ref: "#/components/schemas/address"
          description: Address tokens were transferred to
        amount:
          $ref: "#/components/schemas/fixedDecimal"
          description: Token amount transferred
        eventType:
          $ref: "#/components/schemas/transactionEventType"
          description: Event discriminator
        contract:
          $ref: "#/components/schemas/address"
          description: Address of the contract performing the transfer
        sortOrder:
          type: integer
          minimum: 0
          description: Index to sort event order
    swapEvent:
      type: object
      description: Indicates a token swap happened
      properties:
        sender:
          $ref: "#/components/schemas/address"
          description: Address of the market router
        to:
          $ref: "#/components/schemas/address"
          description: Address tokens were transferred to
        amountCrsIn:
          $ref: "#/components/schemas/fixedDecimal"
          description: Amount of CRS tokens input
        amountSrcIn:
          $ref: "#/components/schemas/fixedDecimal"
          description: Amount of SRC tokens input
        amountCrsOut:
          $ref: "#/components/schemas/fixedDecimal"
          description: Amount of CRS tokens output
        amountSrcOut:
          $ref: "#/components/schemas/fixedDecimal"
          description: Amount of SRC tokens output
        srcToken:
          $ref: "#/components/schemas/address"
          description: Address of the token swapped
        eventType:
          $ref: "#/components/schemas/transactionEventType"
          description: Event discriminator
        contract:
          $ref: "#/components/schemas/address"
          description: Address of the liquidity pool
        sortOrder:
          type: integer
          minimum: 0
          description: Index to sort event order
    startStakingEvent:
      type: object
      description: Indicates an address began staking in a liquidity pool
      properties:
        staker:
          $ref: "#/components/schemas/address"
          description: Address of the staker
        amount:
          $ref: "#/components/schemas/fixedDecimal"
          description: Amount of staking tokens added
        stakerBalance:
          $ref: "#/components/schemas/fixedDecimal"
          description: Total staking balance in the pool for the staker
        totalStaked:
          $ref: "#/components/schemas/fixedDecimal"
          description: Total amount of tokens staking in the pool
        eventType:
          $ref: "#/components/schemas/transactionEventType"
          description: Event discriminator
        contract:
          $ref: "#/components/schemas/address"
          description: Address of the liquidity pool
        sortOrder:
          type: integer
          minimum: 0
          description: Index to sort event order
    stopStakingEvent:
      type: object
      description: Indicates an address stopped staking in a liquidity pool
      properties:
        staker:
          $ref: "#/components/schemas/address"
          description: Address of the staker
        amount:
          $ref: "#/components/schemas/fixedDecimal"
          description: Amount of staking tokens removed
        stakerBalance:
          $ref: "#/components/schemas/fixedDecimal"
          description: Total staking balance in the pool for the staker
        totalStaked:
          $ref: "#/components/schemas/fixedDecimal"
          description: Total amount of tokens staking in the pool
        eventType:
          $ref: "#/components/schemas/transactionEventType"
          description: Event discriminator
        contract:
          $ref: "#/components/schemas/address"
          description: Address of the liquidity pool
        sortOrder:
          type: integer
          minimum: 0
          description: Index to sort event order
    collectStakingRewardsEvent:
      type: object
      description: Indicates a staker collected rewards from a liquidity pool
      properties:
        staker:
          $ref: "#/components/schemas/address"
          description: Address of the staker
        amount:
          $ref: "#/components/schemas/fixedDecimal"
          description: Staking reward
        eventType:
          $ref: "#/components/schemas/transactionEventType"
          description: Event discriminator
        contract:
          $ref: "#/components/schemas/address"
          description: Address of the liquidity pool
        sortOrder:
          type: integer
          minimum: 0
          description: Index to sort event order
    startMiningEvent:
      type: object
      description: Indicates an address started mining in a mining pool
      properties:
        staker:
          $ref: "#/components/schemas/address"
          description: Address of the miner
        amount:
          $ref: "#/components/schemas/fixedDecimal"
          description: Amount of mining tokens added
        minerBalance:
          $ref: "#/components/schemas/fixedDecimal"
          description: Total mining balance in the pool for the miner
        totalSupply:
          $ref: "#/components/schemas/fixedDecimal"
          description: Total amount of tokens mining in the pool
        eventType:
          $ref: "#/components/schemas/transactionEventType"
          description: Event discriminator
        contract:
          $ref: "#/components/schemas/address"
          description: Address of the mining pool
        sortOrder:
          type: integer
          minimum: 0
          description: Index to sort event order
    stopMiningEvent:
      type: object
      description: Indicates an address stopped mining in a mining pool
      properties:
        staker:
          $ref: "#/components/schemas/address"
          description: Address of the miner
        amount:
          $ref: "#/components/schemas/fixedDecimal"
          description: Amount of mining tokens removed
        minerBalance:
          $ref: "#/components/schemas/fixedDecimal"
          description: Total mining balance in the pool for the miner
        totalSupply:
          $ref: "#/components/schemas/fixedDecimal"
          description: Total amount of tokens mining in the pool
        eventType:
          $ref: "#/components/schemas/transactionEventType"
          description: Event discriminator
        contract:
          $ref: "#/components/schemas/address"
          description: Address of the mining pool
        sortOrder:
          type: integer
          minimum: 0
          description: Index to sort event order
    collectMiningRewardsEvent:
      type: object
      description: Indicates a miner collected rewards from a mining pool
      properties:
        staker:
          $ref: "#/components/schemas/address"
          description: Address of the miner
        amount:
          $ref: "#/components/schemas/fixedDecimal"
          description: Mining reward
        eventType:
          $ref: "#/components/schemas/transactionEventType"
          description: Event discriminator
        contract:
          $ref: "#/components/schemas/address"
          description: Address of the mining pool
        sortOrder:
          type: integer
          minimum: 0
          description: Index to sort event order
    enableMiningEvent:
      type: object
      description: Indicates a liquidity mining was enabled for a liquidity pool
      properties:
        amount:
          $ref: "#/components/schemas/fixedDecimal"
          description: Amount of tokens rewarded to the pool to be mined
        rewardRate:
          $ref: "#/components/schemas/fixedDecimal"
          description: Amount of tokens mined per block
        miningPeriodEndBlock:
          type: integer
          minimum: 1
          description: Block number that the mining period ends
        eventType:
          $ref: "#/components/schemas/transactionEventType"
          description: Event discriminator
        contract:
          $ref: "#/components/schemas/address"
          description: Address of the mining pool
        sortOrder:
          type: integer
          minimum: 0
          description: Index to sort event order
    rewardMiningPoolEvent:
      type: object
      description: Indicates a mining pool was rewarded with tokens
      properties:
        stakingPool:
          $ref: "#/components/schemas/address"
          description: Address of the staking pool
        miningPool:
          $ref: "#/components/schemas/address"
          description: Address of the mining pool
        amount:
          $ref: "#/components/schemas/fixedDecimal"
          description: Amount of tokens rewarded
        eventType:
          $ref: "#/components/schemas/transactionEventType"
          description: Event discriminator
        contract:
          $ref: "#/components/schemas/address"
          description: Address of the mining governance
        sortOrder:
          type: integer
          minimum: 0
          description: Index to sort event order
    nominationEvent:
      type: object
      description: Indicates a liquidity pool was nominated for mining
      properties:
        stakingPool:
          $ref: "#/components/schemas/address"
          description: Address of the staking pool
        miningPool:
          $ref: "#/components/schemas/address"
          description: Address of the mining pool
        weight:
          $ref: "#/components/schemas/fixedDecimal"
          description: Nomination staking weight
        eventType:
          $ref: "#/components/schemas/transactionEventType"
          description: Event discriminator
        contract:
          $ref: "#/components/schemas/address"
          description: Address of the mining governance
        sortOrder:
          type: integer
          minimum: 0
          description: Index to sort event order
    createVaultCertificateEvent:
      type: object
      description: Indicates a vault certificate was created
      properties:
        owner:
          $ref: "#/components/schemas/address"
          description: Address of the certificate owner
        amount:
          $ref: "#/components/schemas/fixedDecimal"
          description: Governance token certificate value
        vestedBlock:
          type: integer
          minimum: 1
          description: Block number that the certificate is vested until
        eventType:
          $ref: "#/components/schemas/transactionEventType"
          description: Event discriminator
        contract:
          $ref: "#/components/schemas/address"
          description: Address of the vault
        sortOrder:
          type: integer
          minimum: 0
          description: Index to sort event order
    revokeVaultCertificateEvent:
      type: object
      description: Indicates a vault certificate was revoked
      properties:
        owner:
          $ref: "#/components/schemas/address"
          description: Address of the certificate owner
        oldAmount:
          $ref: "#/components/schemas/fixedDecimal"
          description: Previous governance token certificate value
        newAmount:
          $ref: "#/components/schemas/fixedDecimal"
          description: Remaining governance token certificate value
        vestedBlock:
          type: integer
          minimum: 1
          description: Block number that the certificate is vested until
        eventType:
          $ref: "#/components/schemas/transactionEventType"
          description: Event discriminator
        contract:
          $ref: "#/components/schemas/address"
          description: Address of the vault
        sortOrder:
          type: integer
          minimum: 0
          description: Index to sort event order
    createVaultProposalEvent:
      type: object
      description: Indicates a vault proposal was created
      properties:
        proposalId:
          type: integer
          minimum: 1
          description: Identifier for the proposal
        wallet:
          $ref: "#/components/schemas/address"
          description: Address of the proposal target
        amount:
          $ref: "#/components/schemas/fixedDecimal"
          description: Proposed governance token amount
        description:
          type: string
          maxLength: 200
          description: Description of the proposal
        type:
          $ref: "#/components/schemas/proposalType"
          description: Type of proposal
        status:
          $ref: "#/components/schemas/proposalStatus"
          description: Status of the proposal
        expiration:
          type: integer
          minimum: 1
          description: Block number that the proposal expires
        eventType:
          $ref: "#/components/schemas/transactionEventType"
          description: Event discriminator
        contract:
          $ref: "#/components/schemas/address"
          description: Address of the vault
        sortOrder:
          type: integer
          minimum: 0
          description: Index to sort event order
    completeVaultProposalEvent:
      type: object
      description: Indicates a vault proposal was completed
      properties:
        proposalId:
          type: integer
          minimum: 1
          description: Identifier for the proposal
        approved:
          type: boolean
          description: Whether the proposal was approved
        eventType:
          $ref: "#/components/schemas/transactionEventType"
          description: Event discriminator
        contract:
          $ref: "#/components/schemas/address"
          description: Address of the vault
        sortOrder:
          type: integer
          minimum: 0
          description: Index to sort event order
    vaultProposalPledgeEvent:
      type: object
      description: Indicates a pledge was made to a vault proposal
      properties:
        proposalId:
          type: integer
          minimum: 1
          description: Identifier for the proposal
        pledger:
          $ref: "#/components/schemas/address"
          description: Address of the pledger
        pledgeAmount:
          $ref: "#/components/schemas/fixedDecimal"
          description: Amount of CRS pledged in this transaction
        pledgerAmount:
          $ref: "#/components/schemas/fixedDecimal"
          description: Total amount of CRS pledged by the pledger
        proposalPledgeAmount:
          $ref: "#/components/schemas/fixedDecimal"
          description: Total amount of CRS pledged to the proposal
        totalPledgeMinimumMet:
          type: boolean
          description: Whether the proposal has met the minimum pledge requirement
        eventType:
          $ref: "#/components/schemas/transactionEventType"
          description: Event discriminator
        contract:
          $ref: "#/components/schemas/address"
          description: Address of the vault
        sortOrder:
          type: integer
          minimum: 0
          description: Index to sort event order
    vaultProposalWithdrawPledgeEvent:
      type: object
      description: Indicates a pledge was withdrawn from a vault proposal
      properties:
        proposalId:
          type: integer
          minimum: 1
          description: Identifier for the proposal
        pledger:
          $ref: "#/components/schemas/address"
          description: Address of the pledger
        withdrawAmount:
          $ref: "#/components/schemas/fixedDecimal"
          description: Amount of CRS withdrawn in this transaction
        pledgerAmount:
          $ref: "#/components/schemas/fixedDecimal"
          description: Total amount of CRS pledged by the pledger
        proposalPledgeAmount:
          $ref: "#/components/schemas/fixedDecimal"
          description: Total amount of CRS pledged to the proposal
        pledgeWithdrawn:
          type: boolean
          description: Whether the proposal is active and status is pledge
        eventType:
          $ref: "#/components/schemas/transactionEventType"
          description: Event discriminator
        contract:
          $ref: "#/components/schemas/address"
          description: Address of the vault
        sortOrder:
          type: integer
          minimum: 0
          description: Index to sort event order
    vaultProposalVoteEvent:
      type: object
      description: Indicates a vote was made on a vault proposal
      properties:
        proposalId:
          type: integer
          minimum: 1
          description: Identifier for the proposal
        voter:
          $ref: "#/components/schemas/address"
          description: Address of the voter
        inFavor:
          type: boolean
          description: Whether the vote is in favor or against the proposal
        voteAmount:
          $ref: "#/components/schemas/fixedDecimal"
          description: Amount of CRS voted with in this transaction
        voterAmount:
          $ref: "#/components/schemas/fixedDecimal"
          description: Total amount of CRS voted with on the proposal by the voter
        proposalYesAmount:
          $ref: "#/components/schemas/fixedDecimal"
          description: Total amount of CRS voted with in favor of the proposal
        proposalNoAmount:
          $ref: "#/components/schemas/fixedDecimal"
          description: Total amount of CRS voted with against the proposal
        eventType:
          $ref: "#/components/schemas/transactionEventType"
          description: Event discriminator
        contract:
          $ref: "#/components/schemas/address"
          description: Address of the vault
        sortOrder:
          type: integer
          minimum: 0
          description: Index to sort event order
    vaultProposalWithdrawVoteEvent:
      type: object
      description: Indicates a vote was withdrawn from a vault proposal
      properties:
        proposalId:
          type: integer
          minimum: 1
          description: Identifier for the proposal
        voter:
          $ref: "#/components/schemas/address"
          description: Address of the voter
        withdrawAmount:
          $ref: "#/components/schemas/fixedDecimal"
          description: Amount of CRS withdrawn in this transaction
        voterAmount:
          $ref: "#/components/schemas/fixedDecimal"
          description: Total amount of CRS voted with on the proposal by the voter
        proposalYesAmount:
          $ref: "#/components/schemas/fixedDecimal"
          description: Total amount of CRS voted with in favor of the proposal
        proposalNoAmount:
          $ref: "#/components/schemas/fixedDecimal"
          description: Total amount of CRS voted with against the proposal
        voteWithdrawn:
          type: boolean
          description: Whether the proposal is active and not completed
        eventType:
          $ref: "#/components/schemas/transactionEventType"
          description: Event discriminator
        contract:
          $ref: "#/components/schemas/address"
          description: Address of the vault
        sortOrder:
          type: integer
          minimum: 0
          description: Index to sort event order
    stratisSignatureAuthRequest:
      type: object
      required:
        - signature
        - publicKey
      properties:
        signature:
          type: string
          format: byte
          description: Signed Stratis ID
        publicKey:
          $ref: "#/components/schemas/address"
          description: Address of the message signer
    quoteSwapTransactionRequest:
      type: object
      description: Request to retrieve a token swap call quote
      required:
        - tokenOut
        - tokenInAmount
        - tokenOutAmount
        - tokenInExactAmount
        - tokenInMaximumAmount
        - tokenOutMinimumAmount
        - recipient
      properties:
        tokenOut:
          $ref: "#/components/schemas/tokenAddress"
          description: Address of the output token
        tokenInAmount:
          $ref: "#/components/schemas/fixedDecimal"
          description: Amount of tokens to input
        tokenOutAmount:
          $ref: "#/components/schemas/fixedDecimal"
          description: Amount of tokens expected to receive
        tokenInExactAmount:
          type: boolean
          description: Token in amount is exact when true, otherwise token out amount is exact
        tokenInMaximumAmount:
          $ref: "#/components/schemas/fixedDecimal"
          description: Maximum amount of tokens willing to input
        tokenOutMinimumAmount:
          $ref: "#/components/schemas/fixedDecimal"
          description: Minimum amount of tokens acceptable to receive
        recipient:
          $ref: "#/components/schemas/address"
          description: Receipient of the swapped tokens
        deadline:
          type: integer
          description: Block height the transaction should be mined at, which if not met causes the transaction to fail
          minimum: 0
    swapAmountInQuoteRequest:
      type: object
      description: Request to quote the expected amount of input tokens, to receive a desired output
      required:
        - tokenOut
        - tokenOutAmount
      properties:
        tokenOut:
          $ref: "#/components/schemas/tokenAddress"
          description: Address of the output token
        tokenOutAmount:
          $ref: "#/components/schemas/fixedDecimal"
          description: Amount of tokens desired to receive
    swapAmountOutQuoteRequest:
      type: object
      description: Request to quote the expected amount of output tokens, given a specific input
      required:
        - tokenIn
        - tokenInAmount
      properties:
        tokenIn:
          $ref: "#/components/schemas/tokenAddress"
          description: Address of the input token
        tokenInAmount:
          $ref: "#/components/schemas/fixedDecimal"
          description: Amount of tokens to input
    addTokenRequest:
      type: object
      description: Request to add a token to the Opdex indexer so that it can be tracked
      required:
        - tokenAddress
      properties:
        tokenAddress:
          $ref: "#/components/schemas/address"
          description: Address of the token to add
    notifyBroadcastRequest:
      type: object
      description: Request to notify that a transaction has been broadcast
      required:
        - transactionHash
      properties:
        transactionHash:
          $ref: "#/components/schemas/sha256"
          description: SHA-256 hash of the transaction
    replayQuoteRequest:
      type: object
      description: Request to replay a previous quote at the current point in time
      required:
        - quote
      properties:
        quote:
          type: string
          description: Previously received encoded transaction quote
    marketsResponse:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/marketResponse"
        paging:
          $ref: "#/components/schemas/pagingResponse"
    marketResponse:
      type: object
      properties:
        address:
          $ref: "#/components/schemas/address"
          description: Address of the market
        pendingOwner:
          $ref: "#/components/schemas/address"
          description: Address of the pending market owner
        owner:
          $ref: "#/components/schemas/address"
          description: Address of the market owner
        crsToken:
          $ref: "#/components/schemas/tokenResponse"
          description: Details of the CRS token
        stakingToken:
          $ref: "#/components/schemas/tokenResponse"
          description: Details of the staking token
        authPoolCreators:
          type: boolean
          description: Whether the market owner authorizes liquidity pool creators
        authTraders:
          type: boolean
          description: Whether the market owner authorizes traders
        authProviders:
          type: boolean
          description: Whether the market owner authorizes liquidity providers
        marketFeeEnabled:
          type: boolean
          description: Whether the market fee is enabled
        transactionFee:
          type: number
          minimum: 0.0
          maximum: 1.0
          description: Percentage fee for a trade
        summary:
          $ref: "#/components/schemas/marketSummary"
          description: Financial summary for the market
    marketSummary:
      type: object
      properties:
        liquidityUsd:
          type: number
          minimum: 0.00000000
          description: Total liquidity USD amount
        dailyLiquidityUsdChangePercent:
          type: number
          minimum: -100.00000000
          description: Percentage change of the liquidity USD amount from the previous day
        volumeUsd:
          type: number
          minimum: 0.00000000
          description: Total volume USD amount
        staking:
          $ref: "#/components/schemas/stakingSummary"
          description: Staking summary
        rewards:
          $ref: "#/components/schemas/rewardSummary"
          description: Rewards summary
    stakingSummary:
      type: object
      properties:
        stakingWeight:
          $ref: "#/components/schemas/fixedDecimal"
          description: Total staking weight in all pools
        dailyStakingWeightChangePercent:
          type: number
          minimum: 0.00000000
          description: Percentage change of the staking weight amount from the previous day
        stakingUsd:
          type: number
          minimum: 0.00000000
          description: Total staking weight USD amount
        dailyStakingUsdChangePercent:
          type: number
          minimum: 0.00000000
          description: Percentage change of the staking USD amount from the previous day
    rewardSummary:
      type: object
      properties:
        providerDailyUsd:
          type: number
          minimum: 0.00000000
          description: USD value of rewards distributed to liquidity providers for the day
        marketDailyUsd:
          type: number
          minimum: 0.00000000
          description: USD value of rewards distributed to the market for the day
        totalDailyUsd:
          type: number
          minimum: 0.00000000
          description: Total USD value of rewards distributed for the day
    marketTokensResponse:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/marketTokenResponse"
        paging:
          $ref: "#/components/schemas/pagingResponse"
    marketTokenResponse:
      type: object
      description: Details of a token within a market
      properties:
        allOf:
          $ref: "#/components/schemas/tokenResponse"
          type: object
          properties:
            market:
              $ref: "#/components/schemas/address"
              description: Address of the market
            liquidityPool:
              $ref: "#/components/schemas/address"
              description: Address of the liquidity pool
    tokensResponse:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/tokenResponse"
        paging:
          $ref: "#/components/schemas/pagingResponse"
    tokenResponse:
      type: object
      description: Details of a token
      properties:
        address:
          $ref: "#/components/schemas/address"
          description: Address of the token
        name:
          type: string
          description: Name of the token
        symbol:
          type: string
          description: Token ticker symbol
        decimals:
          type: integer
          format: int32
          description: Number of decimals of precision for token values
          minimum: 0
        sats:
          type: integer
          description: Number of parts which make up one whole token
          minimum: 1
        totalSupply:
          $ref: "#/components/schemas/fixedDecimal"
          description: Total supply for the entire token
        summary:
          $ref: "#/components/schemas/tokenSummaryResponse"
    tokenSummaryResponse:
      type: object
      description: Point in time pricing summary for a token
      properties:
        priceUsd:
          type: number
          description: USD token price
          minimum: 0.00
        dailyPriceChangePercent:
          type: number
          minimum: -100.00000000
          description: Price change percentage for the current day, reset at 00:00 UTC
        modifiedBlock:
          type: integer
          description: Block number at which price was last updated
          minimum: 1
    tokenSnapshotsResponse:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/tokenSnapshotResponse"
        paging:
          $ref: "#/components/schemas/pagingResponse"
    tokenSnapshotResponse:
      type: object
      description: Interval pricing snapshot for a token
      properties:
        price:
          $ref: "#/components/schemas/ohlcDecimalResponse"
          description: Pricing details
        timestamp:
          type: string
          format: date-time
          description: Start time of the snapshot
    transactionsResponse:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/transactionResponse"
        paging:
          $ref: "#/components/schemas/pagingResponse"
    transactionResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Whether the transaction succeeded
        hash:
          $ref: "#/components/schemas/sha256"
          description: SHA-256 hash of the transaction
        newContractAddress:
          $ref: "#/components/schemas/address"
          description: Address of the newly created contract, if transaction is a Create transaction
        block:
          $ref: "#/components/schemas/blockResponse"
          description: Details of the block that the transaction was included in
        gasUsed:
          type: integer
          minimum: 10000
          maximum: 250000
          description: Quantity of gas consumed
        from:
          $ref: "#/components/schemas/address"
          description: Address of transaction sender
        to:
          $ref: "#/components/schemas/address"
          description: Address of smart contract
        events:
          type: array
          items:
            $ref: "#/components/schemas/transactionEvent"
    blockResponse:
      type: object
      description: Details about a block
      properties:
        hash:
          $ref: "#/components/schemas/sha256"
          description: SHA-256 hash of the block
        height:
          type: integer
          minimum: 1
          description: Block number
        time:
          type: string
          format: date-time
          description: Block timestamp as determined by the block producer
        medianTime:
          type: string
          format: date-time
          description: Network-adjusted timestamp
    ohlcDecimalResponse:
      type: object
      description: Open, high, low, close values within a time interval
      properties:
        open:
          type: number
          description: Value at the start of the time interval
          minimum: 0.00
        high:
          type: number
          description: Highest value during the time interval
          minimum: 0.00
        low:
          type: number
          description: Lowest value during the time interval
          minimum: 0.00
        close:
          type: number
          description: Value at the end of the time interval
          minimum: 0.00
    pagingResponse:
      type: object
      description: Paging cursors
      properties:
        next:
          type: string
          description: Cursor referencing the next page
        previous:
          type: string
          description: Cursor referencing the previous page
    transactionQuoteResponse:
      type: object
      description: Quote for submitting a smart contract transaction
      properties:
        result:
          description: Value which is returned by the quoted smart contract call
        error:
          type: string
          description: Smart contract call error details
        gasUsed:
          type: integer
          minimum: 0
          description: Total amount of gas consumed in the quoted smart contract call
        events:
          type: array
          items:
            $ref: "#/components/schemas/transactionEvent"
        request:
          type: string
          description: Encoded transaction request, which can be used to replay or broadcast the transaction
    swapAmountInQuoteResponse:
      type: object
      description: Details the estimated token input required for a given swap output
      properties:
        amountIn:
          $ref: "#/components/schemas/fixedDecimal"
          description: Estimated token input amount
    swapAmountOutQuoteResponse:
      type: object
      description: Details the estimated token output for a given swap input
      properties:
        amountIn:
          $ref: "#/components/schemas/fixedDecimal"
          description: Estimated token output amount
    statusResponse:
      type: object
      description: Status of the API instance
      properties:
        commit:
          type: string
          description: The commit hash for the version of the code that is running
        identifier:
          type: string
          description: Globally unique identifier of the current API instance
    vaultsResponse:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/vaultResponse"
        paging:
          $ref: "#/components/schemas/pagingResponse"
    vaultResponse:
      type: object
      properties:
        vault:
          $ref: "#/components/schemas/address"
          description: Address of the vault
        token:
          $ref: "#/components/schemas/address"
          description: Address of the governance token stored in the vault
        tokensUnassigned:
          $ref: "#/components/schemas/fixedDecimal"
          description: Amount of governance tokens that can be put toward new proposals
        tokensProposed:
          $ref: "#/components/schemas/fixedDecimal"
          description: Amount of governance tokens currently locked for active proposals
        tokensLocked:
          $ref: "#/components/schemas/fixedDecimal"
          description: Amount of governance tokens in the vault
        totalPledgeMinimum:
          $ref: "#/components/schemas/fixedDecimal"
          description: Minimum amount of CRS tokens required to be pledged, for a proposal to move to a vote
        totalVoteMinimum:
          $ref: "#/components/schemas/fixedDecimal"
          description: Minimum amount of CRS tokens required to be voted with, for a proposal to be considered
        vestingDuration:
          type: integer
          minimum: 0
          description: Number of blocks that a certificate is vested for, before it can be redeemed
    certificatesResponse:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/certificateResponse"
        paging:
          $ref: "#/components/schemas/pagingResponse"
    certificateResponse:
      type: object
      properties:
        owner:
          $ref: "#/components/schemas/address"
          description: Address of the certificate owner
        amount:
          $ref: "#/components/schemas/fixedDecimal"
          description: Total value of the certificate, over the duration of the vesting period
        vestingStartBlock:
          type: integer
          minimum: 1
          description: Block that the vesting period starts
        vestingEndBlock:
          type: integer
          minimum: 1
          description: Block that the vesting period ends
        redeemed:
          type: boolean
          description: Whether the certificate has been redeemed by the certificate owner
        revoked:
          type: boolean
          description: Whether the certificate was revoked by the vault owner
    pledgesResponse:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/pledgeResponse"
        paging:
          $ref: "#/components/schemas/pagingResponse"
    pledgeResponse:
      type: object
      properties:
        vault:
          $ref: "#/components/schemas/address"
          description: Address of the vault
        proposalId:
          type: integer
          minimum: 1
          description: Id of the proposal stored by the vault
        pledger:
          $ref: "#/components/schemas/address"
          description: Address of the pledger
        pledge:
          $ref: "#/components/schemas/fixedDecimal"
          description: Amount of CRS pledged to the proposal
        balance:
          $ref: "#/components/schemas/fixedDecimal"
          description: Currently pledged CRS balance
    proposalsResponse:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/proposalResponse"
        paging:
          $ref: "#/components/schemas/pagingResponse"
    proposalResponse:
      type: object
      properties:
        vault:
          $ref: "#/components/schemas/address"
          description: Address of the vault
        token:
          $ref: "#/components/schemas/address"
          description: Address of the governance token stored in the vault
        proposalId:
          type: integer
          minimum: 1
          description: Id of the proposal stored by the vault
        creator:
          $ref: "#/components/schemas/address"
          description: Address of the proposal creator
        wallet:
          $ref: "#/components/schemas/address"
          description: Address of the beneficiary if a certificate proposal, otherwise the proposal creator
        amount:
          $ref: "#/components/schemas/fixedDecimal"
          description: Proposal token amount
        description:
          type: string
          minLength: 200
          description: Description for the proposal
        type:
          $ref: "#/components/schemas/proposalType"
          description: Type of vault proposal
        status:
          $ref: "#/components/schemas/proposalStatus"
          description: Status of vault proposal
        expiration:
          type: integer
          minimum: 1
          description: Block number that the proposal status expires, for an active proposal
        yesAmount:
          $ref: "#/components/schemas/fixedDecimal"
          description: Yes vote CRS weight
        noAmount:
          $ref: "#/components/schemas/fixedDecimal"
          description: No vote CRS weight
        pledgeAmount:
          $ref: "#/components/schemas/fixedDecimal"
          description: Pledged CRS amount
        approved:
          type: boolean
          description: Whether the proposal has been approved
    votesResponse:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/voteResponse"
        paging:
          $ref: "#/components/schemas/pagingResponse"
    voteResponse:
      type: object
      properties:
        vault:
          $ref: "#/components/schemas/address"
          description: Address of the vault
        proposalId:
          type: integer
          minimum: 1
          description: Id of the proposal stored by the vault
        voter:
          $ref: "#/components/schemas/address"
          description: Address of the voter
        vote:
          $ref: "#/components/schemas/fixedDecimal"
          description: Amount of CRS voted with on the proposal
        balance:
          $ref: "#/components/schemas/fixedDecimal"
          description: Currently voting CRS balance
        inFavor:
          type: boolean
          description: Whether the vote is in favor of the proposal
paths:
  /auth:
    post:
      tags:
        - Authentication
      summary: Stratis Signature Auth
      description: >
        Responds to a request from a Stratis Signature Auth Signer.
        See the [specification](https://github.com/Opdex/SSAS) for futher detail.
      operationId: authenticate
      parameters:
        - name: uid
          in: query
          description: Unique identifier for the Stratis ID
          required: true
          schema:
            type: string
          example: Lf5t5J-oAn3CZ9YY27JnK5XtpbjIOD3BxyvHhd80AQ4fsJ7o0J8i5uSjzHZ9jeS3
        - name: exp
          in: query
          description: Unix timestamp indicating when the signature expires
          schema:
            type: integer
            format: int64
            minimum: 0
            maximum: 273402300799
          example: 1641220000
      requestBody:
        description: The Stratis Signature Auth body
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/stratisSignatureAuthRequest"
              example:
                signature: H9xjfnvqucCmi3sfEKUes0qL4mD9PrZ/al78+Ka440t6WH5Qh0AIgl5YlxPa2cyuXdwwDa2OYUWR/0ocL6jRZLc=
                publicKey: tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
      responses:
        204:
          description: Signature was validated successfully
        400:
          description: The request is not valid
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/validationProblemDetails"
              example:
                type: https://httpstatuses.com/400
                title: One or more validation errors occurred.
                status: 400
                errors:
                  exp:
                    - Expiration date must be a unix timestamp.
                extensions:
                  traceId: 00-00000000000000000000000000000000-0000000000000000-00
        429:
          $ref: "#/components/responses/TooManyRequests"
        500:
          $ref: "#/components/responses/InternalServerError"
  /markets:
    get:
      tags:
        - Markets
      summary: Get Markets
      description: Retrieves details for the tracked markets. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
      operationId: getMarkets
      parameters:
        - name: marketType
          in: query
          description: Market type filter
          schema:
            $ref: "#/components/schemas/marketType"
          example: Staking
        - name: orderBy
          in: query
          description: Property by which to sort results
          schema:
            $ref: "#/components/schemas/marketOrderByType"
          example: DailyLiquidityUsdChangePercent
        - name: direction
          in: query
          description: Order direction of the results
          schema:
            $ref: "#/components/schemas/sortDirection"
          example: DESC
        - name: limit
          in: query
          description: Number of results per page
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 50
          example: 10
        - name: cursor
          in: query
          description: Reference of the requested page, returned by a previous call
          schema:
            type: string
      responses:
        200:
          description: Market results found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/marketsResponse"
              example:
                results:
                  - address: t8kAxvbaFzpPTWDE8f2bdgV7V1276xu2VH
                    owner: tHYHem7cLKgoLkeb792yn4WayqKzLrjJak
                    authPoolCreators: false
                    authTraders: false
                    authProviders: false
                    marketFeeEnabled: true
                    transactionFee: 0.3
                    crsToken:
                      address: CRS
                      name: Cirrus
                      symbol: TCRS
                      decimals: 8
                      sats: 100000000
                      totalSupply: "130000000.00000000"
                    stakingToken:
                      address: tBeY2UAVsbHoS9jwEnT2kMmRsJwUHK1j1L
                      name: Testnet Opdex Token
                      symbol: TODX
                      decimals: 8
                      sats: 100000000
                      totalSupply: "40000000000000000.00000000"
                    summary:
                      liquidityUsd: 2490080.59003948
                      dailyLiquidityUsdChangePercent: 4.32891108
                      volumeUsd: 482002.55832901
                      staking:
                        stakingWeight: "54883992.33820003"
                        dailyStakingWeightChangePercent: 7.33825455
                        stakingUsd: 8713399.088810338
                        dailyStakingUsdChangePercent: 9.58339281
                      rewards:
                        providerDailyUsd: 1205.00639582
                        marketDailyUsd: 241.00127916
                        totalDailyUsd: 1446.00767498
                paging: {}
        400:
          description: The request is not valid
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/validationProblemDetails"
              example:
                type: https://httpstatuses.com/400
                title: One or more validation errors occurred.
                status: 400
                errors:
                  marketType:
                    - The value 'New' is not valid for MarketType.
                    - Filters cannot be provided alongside cursor.
                extensions:
                  traceId: 00-00000000000000000000000000000000-0000000000000000-00
        429:
          $ref: "#/components/responses/TooManyRequests"
        500:
          $ref: "#/components/responses/InternalServerError"
  /markets/{market}/tokens:
    get:
      tags:
        - Market Tokens
      summary: Get Market Tokens
      description: Retrieves details of tokens tracked within a specified market. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
      operationId: getMarketTokens
      parameters:
        - name: market
          in: path
          description: Address of the market
          required: true
          schema:
            $ref: "#/components/schemas/address"
          example: t8kAxvbaFzpPTWDE8f2bdgV7V1276xu2VH
        - name: tokenType
          in: query
          description: Token type filter
          schema:
            $ref: "#/components/schemas/tokenType"
          example: Provisional
        - name: tokens
          in: query
          description: Specific tokens to include
          schema:
            type: array
            items:
              $ref: "#/components/schemas/address"
              description: Address of a token
        - name: keyword
          in: query
          description: Keyword search against token address, name and ticker symbol
          schema:
            type: string
        - name: orderBy
          in: query
          description: Property by which to sort results
          schema:
            $ref: "#/components/schemas/tokenOrderByType"
          example: PriceUsd
        - name: direction
          in: query
          description: Order direction of the results
          schema:
            $ref: "#/components/schemas/sortDirection"
          example: DESC
        - name: limit
          in: query
          description: Number of results per page
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 50
          example: 10
        - name: cursor
          in: query
          description: Reference of the requested page, returned by a previous call
          schema:
            type: string
      responses:
        200:
          description: Market token results found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/marketTokensResponse"
              example:
                results:
                  - market: t8kAxvbaFzpPTWDE8f2bdgV7V1276xu2VH
                    liqudityPool: tMdZ2UfwJorAyErDvqNdVU8kmiLaykuE5L
                    address: tGSk2dVENuqAQ2rNXbui37XHuurFCTqadD
                    name: Bitcoin (Wrapped)
                    symbol: TBTC
                    decimals: 8
                    sats: 100000000
                    totalSupply: "21000000.00000000"
                    summary:
                      priceUsd: 54827.48328399
                      dailyPriceChangePercent: 2.42090338
                      modifiedBlock: 2963822
                  - market: t8kAxvbaFzpPTWDE8f2bdgV7V1276xu2VH
                    liqudityPool: tLrMcU1csbN7RxGjBMEnJeLoae3PxmQ9cr
                    address: tF83sdXXt2nTkL7UyEYDVFMK4jTuYMbmR3
                    name: ETH (Wrapped)
                    symbol: TETH
                    decimals: 18
                    sats: 1000000000000000000
                    totalSupply: "100000000.000000000000000000"
                    summary:
                      priceUsd: 3822.23819994
                      dailyPriceChangePercent: 1.98192833
                      modifiedBlock: 2963691
                paging:
                  next: ZGlyZWN0aW9uOkRFU0M7bGltaXQ6MTA7cGFnaW5nOkZvcndhcmQ7cHJvdmlzaW9uYWw6QWxsO2tleXdvcmQ6O29yZGVyQnk6UHJpY2VVc2Q7cG9pbnRlcjpLREF1TkRBMk1ETXpPREFzSURRcDs=
        400:
          description: The request is not valid
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/validationProblemDetails"
              example:
                type: https://httpstatuses.com/400
                title: One or more validation errors occurred.
                status: 400
                errors:
                  tokenType:
                    - The value 'New' is not valid for TokenType.
                    - Filters cannot be provided alongside cursor.
                extensions:
                  traceId: 00-00000000000000000000000000000000-0000000000000000-00
        404:
          $ref: "#/components/responses/MarketNotFound"
        429:
          $ref: "#/components/responses/TooManyRequests"
        500:
          $ref: "#/components/responses/InternalServerError"
  /markets/{market}/tokens/{token}:
    get:
      tags:
        - Market Tokens
      summary: Get Market Token
      description: Retrieves details of a token, that is tracked within a specified market.
      operationId: getMarketToken
      parameters:
        - name: market
          in: path
          description: Address of the market
          required: true
          schema:
            $ref: "#/components/schemas/address"
          example: t8kAxvbaFzpPTWDE8f2bdgV7V1276xu2VH
        - name: token
          in: path
          description: Address of the token
          required: true
          schema:
            $ref: "#/components/schemas/address"
          example: tGSk2dVENuqAQ2rNXbui37XHuurFCTqadD
      responses:
        200:
          description: Market token found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/marketTokenResponse"
              example:
                market: t8kAxvbaFzpPTWDE8f2bdgV7V1276xu2VH
                liqudityPool: tMdZ2UfwJorAyErDvqNdVU8kmiLaykuE5L
                address: tGSk2dVENuqAQ2rNXbui37XHuurFCTqadD
                name: Bitcoin (Wrapped)
                symbol: TBTC
                decimals: 8
                sats: 100000000
                totalSupply: "21000000.00000000"
                summary:
                  priceUsd: 54827.48328399
                  dailyPriceChangePercent: 2.42580923
                  modifiedBlock: 2963822
        400:
          description: The request is not valid
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/validationProblemDetails"
              example:
                type: https://httpstatuses.com/400
                title: One or more validation errors occurred.
                status: 400
                errors:
                  token:
                    - Invalid address.
                extensions:
                  traceId: 00-00000000000000000000000000000000-0000000000000000-00
        404:
          $ref: "#/components/responses/MarketOrTokenNotFound"
        429:
          $ref: "#/components/responses/TooManyRequests"
        500:
          $ref: "#/components/responses/InternalServerError"
  /markets/{market}/tokens/{token}/history:
    get:
      tags:
        - Market Tokens
      summary: Get Market Token History
      description: Retrieves historical pricing data for a token tracked within a specified market. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
      operationId: getMarketTokenHistory
      parameters:
        - name: market
          in: path
          description: Address of the market
          required: true
          schema:
            $ref: "#/components/schemas/address"
          example: t8kAxvbaFzpPTWDE8f2bdgV7V1276xu2VH
        - name: token
          in: path
          description: Address of the token
          required: true
          schema:
            $ref: "#/components/schemas/address"
          example: tGSk2dVENuqAQ2rNXbui37XHuurFCTqadD
        - name: interval
          in: query
          description: Time range between each snapshot
          schema:
            $ref: "#/components/schemas/interval"
          example: 1D
        - name: startDateTime
          in: query
          description: Start time for which to retrieve snapshots
          required: true
          schema:
            type: string
            format: date-time
          example: 2022-01-01T00:00:00Z
        - name: endDateTime
          in: query
          description: End time for which to retrieve snapshots
          required: true
          schema:
            type: string
            format: date-time
          example: 2022-12-31T23:59:59
        - name: direction
          in: query
          description: Order direction of the results
          schema:
            $ref: "#/components/schemas/sortDirection"
          example: DESC
        - name: limit
          in: query
          description: Number of results per page
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 750
          example: 100
        - name: cursor
          in: query
          description: Reference of the requested page, returned by a previous call
          schema:
            type: string
      responses:
        200:
          description: Market token results found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/tokenSnapshotsResponse"
              example:
                properties:
                  results:
                    - price:
                        open: 54274.35344481
                        high: 55172.00419378
                        low: 54239.99642473
                        close: 55000.14239378
                      timestamp: 2022-01-04T00:00:00Z
                    - price:
                        open: 52159.53226778
                        high: 54463.33523111
                        low: 52159.53226778
                        close: 54274.35344481
                      timestamp: 2022-01-03T00:00:00Z
                    - price:
                        open: 53163.84322264
                        high: 54339.99180028
                        low: 52101.00022178
                        close: 52159.53226778
                      timestamp: 2022-01-02T00:00:00Z
                    - price:
                        open: 54293.91289928
                        high: 54333.91319534
                        low: 52983.129000420
                        close: 53163.84322264
                      timestamp: 2022-01-01T00:00:00Z
                  paging: {}
        400:
          description: The request is not valid
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/validationProblemDetails"
              example:
                type: https://httpstatuses.com/400
                title: One or more validation errors occurred.
                status: 400
                errors:
                  interval:
                    - Filters cannot be provided alongside cursor.
                extensions:
                  traceId: 00-00000000000000000000000000000000-0000000000000000-00
        404:
          $ref: "#/components/responses/MarketOrTokenNotFound"
        429:
          $ref: "#/components/responses/TooManyRequests"
        500:
          $ref: "#/components/responses/InternalServerError"
  /markets/{market}/tokens/{token}/swap:
    post:
      tags:
        - Market Tokens
      summary: Build Swap Tokens Transaction Quote
      description: Builds a quote for a token swap transaction. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
      operationId: swap
      parameters:
        - name: market
          in: path
          description: Address of the market
          required: true
          schema:
            $ref: "#/components/schemas/address"
          example: t8kAxvbaFzpPTWDE8f2bdgV7V1276xu2VH
        - name: token
          in: path
          description: Address of the input token
          required: true
          schema:
            $ref: "#/components/schemas/address"
          example: tGSk2dVENuqAQ2rNXbui37XHuurFCTqadD
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/quoteSwapTransactionRequest"
            example:
              tokenOut: CRS
              tokenInAmount: "0.00250000"
              tokenOutAmount: "61.53143554"
              tokenInExactAmount: true
              tokenInMaximumAmount: "0.00250250"
              tokenOutMinimumAmount: "61.46990411"
              recipient: tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
              deadline: 100000000
      security:
        - opdexAuth: []
      responses:
        200:
          description: Built swap transaction quote
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/transactionQuoteResponse"
              example:
                result: 6153143554
                gasUsed: 60139
                events:
                  - from: tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
                    to: tMdZ2UfwJorAyErDvqNdVU8kmiLaykuE5L
                    amount: "0.00250000"
                    eventType: TransferEvent
                    contract: tGSk2dVENuqAQ2rNXbui37XHuurFCTqadD
                    sortOrder: 0
                  - sender: t8XpH1pNYDgCnqk91ZQKLgpUVeJ7XmomLT
                    to: tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
                    amountCrsIn: "0.00000000"
                    amountSrcIn: "0.00250000"
                    amountCrsOut: "61.53142554"
                    amountSrcOut: "0.00000000"
                    srcToken: tGSk2dVENuqAQ2rNXbui37XHuurFCTqadD
                    eventType: SwapEvent
                    contract: tMdZ2UfwJorAyErDvqNdVU8kmiLaykuE5L
                    sortOrder: 2
                request: eyJzZW5kZXIiOiJ0UTlSdWtac0I2YkJzZW5IbkdTbzFxNjlDSnpXR254b2htIiwidG8iOiJ0OFhwSDFwTllEZ0NucWs5MVpRS0xncFVWZUo3WG1vbUxUIiwiYW1vdW50IjoiMCIsIm1ldGhvZCI6IlN3YXBFeGFjdFNyY0ZvckNycyIsInBhcmFtZXRlcnMiOlt7ImxhYmVsIjoiQW1vdW50IEluIiwidmFsdWUiOiIxMiMyNTAwMDAifSx7ImxhYmVsIjoiTWluaW11bSBBbW91bnQgT3V0IiwidmFsdWUiOiI3IzYxNDY5OTA0MTEifSx7ImxhYmVsIjoiVG9rZW4gSW4iLCJ2YWx1ZSI6IjkjdEdTazJkVkVOdXFBUTJyTlhidWkzN1hIdXVyRkNUcWFkRCJ9LHsibGFiZWwiOiJSZWNpcGllbnQiLCJ2YWx1ZSI6IjkjdFE5UnVrWnNCNmJCc2VuSG5HU28xcTY5Q0p6V0dueG9obSJ9LHsibGFiZWwiOiJEZWFkbGluZSIsInZhbHVlIjoiNyMyOTYwNDY0In1dLCJjYWxsYmFjayI6Imh0dHBzOi8vdGVzdC1hcGkub3BkZXguY29tL3RyYW5zYWN0aW9ucyJ9
        400:
          description: The request is not valid
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/validationProblemDetails"
              example:
                type: https://httpstatuses.com/400
                title: One or more validation errors occurred.
                status: 400
                errors:
                  market:
                    - Invalid address.
                extensions:
                  traceId: 00-00000000000000000000000000000000-0000000000000000-00
        404:
          $ref: "#/components/responses/MarketOrTokenNotFound"
        429:
          $ref: "#/components/responses/TooManyRequests"
        500:
          $ref: "#/components/responses/InternalServerError"
  /markets/{market}/tokens/{token}/swap/amount-in:
    post:
      tags:
        - Market Tokens
      summary: Swap Amount In Quote
      description: Retrieves an estimate for the amount of tokens to be input, given a swap output.
      operationId: getSwapAmountInQuote
      parameters:
        - name: market
          in: path
          description: Address of the market
          required: true
          schema:
            $ref: "#/components/schemas/address"
          example: t8kAxvbaFzpPTWDE8f2bdgV7V1276xu2VH
        - name: token
          in: path
          description: Address of the input token
          required: true
          schema:
            $ref: "#/components/schemas/address"
          example: tGSk2dVENuqAQ2rNXbui37XHuurFCTqadD
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/swapAmountInQuoteRequest"
            example:
              tokenOut: CRS
              tokenOutAmount: "10.00000000"
      responses:
        200:
          description: Swap amount in quote retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/swapAmountInQuoteResponse"
              example:
                amountIn: "0.00038271"
        400:
          description: The request is not valid
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/validationProblemDetails"
              example:
                type: https://httpstatuses.com/400
                title: One or more validation errors occurred.
                status: 400
                errors:
                  market:
                    - Invalid address.
                extensions:
                  traceId: 00-00000000000000000000000000000000-0000000000000000-00
        404:
          $ref: "#/components/responses/MarketOrTokenNotFound"
        429:
          $ref: "#/components/responses/TooManyRequests"
        500:
          $ref: "#/components/responses/InternalServerError"
  /markets/{market}/tokens/{token}/swap/amount-out:
    post:
      tags:
        - Market Tokens
      summary: Swap Amount Out Quote
      description: Retrieves an estimate for the amount of tokens output, given a swap input.
      operationId: getSwapAmountOutQuote
      parameters:
        - name: market
          in: path
          description: Address of the market
          required: true
          schema:
            $ref: "#/components/schemas/address"
          example: t8kAxvbaFzpPTWDE8f2bdgV7V1276xu2VH
        - name: token
          in: path
          description: Address of the input token
          required: true
          schema:
            $ref: "#/components/schemas/address"
          example: tGSk2dVENuqAQ2rNXbui37XHuurFCTqadD
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/swapAmountOutQuoteRequest"
            example:
              tokenIn: CRS
              tokenInAmount: "1000.00000000"
      responses:
        200:
          description: Swap amount out quote retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/swapAmountOutQuoteResponse"
              example:
                amountOut: "0.15319188"
        400:
          description: The request is not valid
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/validationProblemDetails"
              example:
                type: https://httpstatuses.com/400
                title: One or more validation errors occurred.
                status: 400
                errors:
                  market:
                    - Invalid address.
                extensions:
                  traceId: 00-00000000000000000000000000000000-0000000000000000-00
        404:
          $ref: "#/components/responses/MarketOrTokenNotFound"
        429:
          $ref: "#/components/responses/TooManyRequests"
        500:
          $ref: "#/components/responses/InternalServerError"
  /status:
    get:
      tags:
        - Status
      summary: Get Status
      description: Retrieves status details for the running instance of the API.
      operationId: getStatus
      responses:
        200:
          description: Status details found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/statusResponse"
              example:
                commit: 92ec53dc8388bc835eae5a892b29cb9519de7d97
                identifier: ae89af2a-9774-4956-aa40-507edd38d200
        429:
          $ref: "#/components/responses/TooManyRequests"
        500:
          $ref: "#/components/responses/InternalServerError"
  /tokens:
    get:
      tags:
        - Tokens
      summary: Get Tokens
      description: Retrieves details of all tracked tokens across markets. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
      operationId: getTokens
      parameters:
        - name: tokenType
          in: query
          description: Token type filter
          schema:
            $ref: "#/components/schemas/tokenType"
          example: Provisional
        - name: tokens
          in: query
          description: Specific tokens to include
          schema:
            type: array
            items:
              $ref: "#/components/schemas/address"
              description: Address of a token
        - name: keyword
          in: query
          description: Keyword search against token address, name and ticker symbol
          schema:
            type: string
        - name: orderBy
          in: query
          description: Property by which to sort results
          schema:
            $ref: "#/components/schemas/tokenOrderByType"
        - name: direction
          in: query
          description: Order direction of the results
          schema:
            $ref: "#/components/schemas/sortDirection"
          example: DESC
        - name: limit
          in: query
          description: Number of results per page
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 50
          example: 10
        - name: cursor
          in: query
          description: Reference of the requested page, returned by a previous call
          schema:
            type: string
      responses:
        200:
          description: Token results found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/tokensResponse"
              example:
                results:
                  - address: tGSk2dVENuqAQ2rNXbui37XHuurFCTqadD
                    name: Bitcoin (Wrapped)
                    symbol: TBTC
                    decimals: 8
                    sats: 100000000
                    totalSupply: "21000000.00000000"
                    summary:
                      priceUsd: 54911.53361129
                      dailyPriceChangePercent: 2.37290288
                      modifiedBlock: 2963825
                  - address: tF83sdXXt2nTkL7UyEYDVFMK4jTuYMbmR3
                    name: ETH (Wrapped)
                    symbol: TETH
                    decimals: 18
                    sats: 1000000000000000000
                    totalSupply: "100000000.000000000000000000"
                    summary:
                      priceUsd: 3827.34621953
                      dailyPriceChangePercent: 2.01006408
                      modifiedBlock: 2963712
                paging:
                  next: ZGlyZWN0aW9uOkRFU0M7bGltaXQ6MTA7cGFnaW5nOkZvcndhcmQ7cHJvdmlzaW9uYWw6QWxsO2tleXdvcmQ6O29yZGVyQnk6UHJpY2VVc2Q7cG9pbnRlcjpLREF1TkRBMk1ETXpPREFzSURRcDs=
        400:
          description: The request is not valid
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/validationProblemDetails"
              example:
                type: https://httpstatuses.com/400
                title: One or more validation errors occurred.
                status: 400
                errors:
                  tokenType:
                    - The value 'New' is not valid for TokenType.
                    - Filters cannot be provided alongside cursor.
                extensions:
                  traceId: 00-00000000000000000000000000000000-0000000000000000-00
        429:
          $ref: "#/components/responses/TooManyRequests"
        500:
          $ref: "#/components/responses/InternalServerError"
    post:
      tags:
        - Tokens
      summary: Add Token
      description: Adds an SRC token to the Opdex indexer, so that it can be tracked and used within markets.
      operationId: addToken
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/addTokenRequest"
            example:
              tokenAddress: tF83sdXXt2nTkL7UyEYDVFMK4jTuYMbmR3
      security:
        - opdexAuth: []
      responses:
        201:
          description: Token was added to the indexer
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/tokenResponse"
              example:
                address: tGSk2dVENuqAQ2rNXbui37XHuurFCTqadD
                name: Bitcoin (Wrapped)
                symbol: TBTC
                decimals: 8
                sats: 100000000
                totalSupply: "21000000.00000000"
          headers:
            Location:
              schema:
                type: string
                example: /tokens/tF83sdXXt2nTkL7UyEYDVFMK4jTuYMbmR3
              description: Request location to retrieve details of the added token
        303:
          description: Token is already indexed
          headers:
            Location:
              schema:
                type: string
                example: /tokens/tF83sdXXt2nTkL7UyEYDVFMK4jTuYMbmR3
              description: Request location to retrieve details of the added token
        400:
          description: The request is not valid
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/validationProblemDetails"
              example:
                type: https://httpstatuses.com/400
                title: One or more validation errors occurred.
                status: 400
                errors:
                  tokenAddress:
                    - Invalid address.
                extensions:
                  traceId: 00-00000000000000000000000000000000-0000000000000000-00
        401:
          $ref: "#/components/responses/Unauthorized"
        429:
          $ref: "#/components/responses/TooManyRequests"
        500:
          $ref: "#/components/responses/InternalServerError"
  /tokens/{token}:
    get:
      tags:
        - Tokens
      summary: Get Token
      description: Retrieves details of a token tracked by the Opdex indexer.
      operationId: getToken
      parameters:
        - name: token
          in: path
          description: Address of the token
          required: true
          schema:
            $ref: "#/components/schemas/address"
          example: tGSk2dVENuqAQ2rNXbui37XHuurFCTqadD
      responses:
        200:
          description: Token details found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/tokenResponse"
              example:
                address: tGSk2dVENuqAQ2rNXbui37XHuurFCTqadD
                name: Bitcoin (Wrapped)
                symbol: TBTC
                decimals: 8
                sats: 100000000
                totalSupply: "21000000.00000000"
                summary:
                  priceUsd: 54911.53361129
                  dailyPriceChangePercent: 2.37290288
                  modifiedBlock: 2963825
        400:
          description: The request is not valid
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/validationProblemDetails"
              example:
                type: https://httpstatuses.com/400
                title: One or more validation errors occurred.
                status: 400
                errors:
                  token:
                    - Invalid address.
                extensions:
                  traceId: 00-00000000000000000000000000000000-0000000000000000-00
        404:
          $ref: "#/components/responses/TokenNotFound"
        429:
          $ref: "#/components/responses/TooManyRequests"
        500:
          $ref: "#/components/responses/InternalServerError"
  /tokens/{token}/history:
    get:
      tags:
        - Tokens
      summary: Get Token History
      description: Retrieves historical pricing data for a token tracked by the Opdex indexer. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
      operationId: getTokenHistory
      parameters:
        - name: token
          in: path
          description: Address of the token
          required: true
          schema:
            $ref: "#/components/schemas/address"
          example: tGSk2dVENuqAQ2rNXbui37XHuurFCTqadD
        - name: interval
          in: query
          description: Time range between each snapshot
          schema:
            $ref: "#/components/schemas/interval"
          example: 1D
        - name: startDateTime
          in: query
          description: Start time for which to retrieve snapshots
          required: true
          schema:
            type: string
            format: date-time
          example: 2022-01-01T00:00:00Z
        - name: endDateTime
          in: query
          description: End time for which to retrieve snapshots
          required: true
          schema:
            type: string
            format: date-time
          example: 2022-12-31T23:59:59
        - name: direction
          in: query
          description: Order direction of the results
          schema:
            $ref: "#/components/schemas/sortDirection"
          example: DESC
        - name: limit
          in: query
          description: Number of results per page
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 750
          example: 100
        - name: cursor
          in: query
          description: Reference of the requested page, returned by a previous call
          schema:
            type: string
      responses:
        200:
          description: Token results found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/tokenSnapshotsResponse"
              example:
                properties:
                  results:
                    - price:
                        open: 54193.34115385
                        high: 55199.32820982
                        low: 54187.23589023
                        close: 55063.99234829
                      timestamp: 2022-01-04T00:00:00Z
                    - price:
                        open: 52402.45948025
                        high: 54362.13294822
                        low: 52351.34292224
                        close: 54193.34115385
                      timestamp: 2022-01-03T00:00:00Z
                    - price:
                        open: 53135.84898883
                        high: 54339.34298819
                        low: 52217.00424382
                        close: 52402.45948025
                      timestamp: 2022-01-02T00:00:00Z
                    - price:
                        open: 54284.23999384
                        high: 54300.22222003
                        low: 53025.42828821
                        close: 53135.84898883
                      timestamp: 2022-01-01T00:00:00Z
                  paging: {}
        400:
          description: The request is not valid
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/validationProblemDetails"
              example:
                type: https://httpstatuses.com/400
                title: One or more validation errors occurred.
                status: 400
                errors:
                  token:
                    - Invalid address.
                extensions:
                  traceId: 00-00000000000000000000000000000000-0000000000000000-00
        404:
          $ref: "#/components/responses/TokenNotFound"
        429:
          $ref: "#/components/responses/TooManyRequests"
        500:
          $ref: "#/components/responses/InternalServerError"
  /tokens/{token}/approve:
    post:
      tags:
        - Tokens
      summary: Build Approve Allowance Transaction Quote
      description: Builds a quote for an allowance approval transaction. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
      operationId: buildApproveAllowanceQuote
      parameters:
        - name: token
          in: path
          description: Address of the token
          required: true
          schema:
            $ref: "#/components/schemas/address"
          example: tGSk2dVENuqAQ2rNXbui37XHuurFCTqadD
      security:
        - opdexAuth: []
      responses:
        200:
          description: Built approve allowance transaction quote
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/transactionQuoteResponse"
              example:
                result: true
                gasUsed: 12923
                events:
                  - owner: tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
                    spender: t8XpH1pNYDgCnqk91ZQKLgpUVeJ7XmomLT
                    amount: "0.020000000000000000"
                    eventType: ApprovalEvent
                    contract: tF83sdXXt2nTkL7UyEYDVFMK4jTuYMbmR3
                    sortOrder: 0
                request: eyJzZW5kZXIiOiJ0UTlSdWtac0I2YkJzZW5IbkdTbzFxNjlDSnpXR254b2htIiwidG8iOiJ0Rjgzc2RYWHQyblRrTDdVeUVZRFZGTUs0alR1WU1ibVIzIiwiYW1vdW50IjoiMCIsIm1ldGhvZCI6IkFwcHJvdmUiLCJwYXJhbWV0ZXJzIjpbeyJsYWJlbCI6IlNwZW5kZXIiLCJ2YWx1ZSI6IjkjdDhYcEgxcE5ZRGdDbnFrOTFaUUtMZ3BVVmVKN1htb21MVCJ9LHsibGFiZWwiOiJDdXJyZW50IEFsbG93YW5jZSIsInZhbHVlIjoiMTIjMjAwMDAwMDAwMDAwMDAwMCJ9LHsibGFiZWwiOiJOZXcgQWxsb3dhbmNlIiwidmFsdWUiOiIxMiMyMDAwMDAwMDAwMDAwMDAwMCJ9XSwiY2FsbGJhY2siOiJodHRwczovL3Rlc3QtYXBpLm9wZGV4LmNvbS90cmFuc2FjdGlvbnMifQ==
        400:
          description: The request is not valid
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/validationProblemDetails"
              example:
                type: https://httpstatuses.com/400
                title: One or more validation errors occurred.
                status: 400
                errors:
                  token:
                    - Invalid address.
                extensions:
                  traceId: 00-00000000000000000000000000000000-0000000000000000-00
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/TokenNotFound"
        429:
          $ref: "#/components/responses/TooManyRequests"
        500:
          $ref: "#/components/responses/InternalServerError"
  /tokens/{token}/distribute:
    post:
      tags:
        - Tokens
      summary: Build Distribute Tokens Transaction Quote
      description: Builds a quote for a transaction to distribute governance tokens, to the mining governance and vault. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
      operationId: buildDistributeTokensQuote
      parameters:
        - name: token
          in: path
          description: Address of the governance token
          required: true
          schema:
            $ref: "#/components/schemas/address"
          example: tBeY2UAVsbHoS9jwEnT2kMmRsJwUHK1j1L
      security:
        - opdexAuth: []
      responses:
        200:
          description: Built distribute tokens transaction quote
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/transactionQuoteResponse"
              example:
                gasUsed: 99064
                events:
                  - vaultAmount: "100000000.00000000"
                    miningGovernanceAmount: "300000000.00000000"
                    periodIndex: 0
                    totalSupply: "400000000.00000000"
                    nextDistributionBlock: 4629775
                    eventType: DistributionEvent
                    contract: "tBeY2UAVsbHoS9jwEnT2kMmRsJwUHK1j1L"
                    sortOrder: 0
                request: eyJzZW5kZXIiOiJ0SFlIZW03Y0xLZ29Ma2ViNzkyeW40V2F5cUt6THJqSmFrIiwidG8iOiJ0QmVZMlVBVnNiSG9TOWp3RW5UMmtNbVJzSndVSEsxajFMIiwiYW1vdW50IjoiMCIsIm1ldGhvZCI6IkRpc3RyaWJ1dGUiLCJjYWxsYmFjayI6Imh0dHBzOi8vdGVzdC1hcGkub3BkZXguY29tL3RyYW5zYWN0aW9ucyJ9
        400:
          description: The request is not valid
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/validationProblemDetails"
              example:
                type: https://httpstatuses.com/400
                title: One or more validation errors occurred.
                status: 400
                errors:
                  token:
                    - Invalid address.
                extensions:
                  traceId: 00-00000000000000000000000000000000-0000000000000000-00
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/TokenNotFound"
        429:
          $ref: "#/components/responses/TooManyRequests"
        500:
          $ref: "#/components/responses/InternalServerError"
  /transactions:
    get:
      tags:
        - Transactions
      summary: Get Transactions
      description: Retrieves details for tracked Opdex transactions. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
      operationId: getTransactions
      parameters:
        - name: wallet
          in: query
          description: Filter transactions by wallet address
          schema:
            $ref: "#/components/schemas/address"
          example: tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
        - name: contracts
          in: query
          description: Smart contract addresses to include
          schema:
            type: array
            items:
              $ref: "#/components/schemas/address"
        - name: eventTypes
          in: query
          description: Filter to include transactions with event types
          schema:
            type: array
            items:
              $ref: "#/components/schemas/transactionEventType"
          example:
            - AddLiquidityEvent
            - RemoveLiquidityEvent
            - SwapEvent
            - StartStakingEcvent
            - StopStakingEvent
            - StartMiningEvent
            - StopMiningEvent
        - name: direction
          in: query
          description: Order direction of the results
          schema:
            $ref: "#/components/schemas/sortDirection"
          example: DESC
        - name: limit
          in: query
          description: Number of results per page
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 50
          example: 10
        - name: cursor
          in: query
          description: Reference of the requested page, returned by a previous call
          schema:
            type: string
      responses:
        200:
          description: Transaction results found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/transactionsResponse"
              example:
                results:
                  - success: true
                    hash: f5f3dda5a419a699018800fae7938216a6d9f6df6767bc2fb7e847e7c01a0cd5
                    block:
                      hash: 71473cf8bc8553676565f878e965a8e3c5070a7f3ef77c32be2460d1ff1e62d8
                      height: 2962935
                      time: 2022-01-05T11:32:48Z
                      medianTime: 2022-01-05T11:30:24Z
                    gasUsed: 64275
                    from: tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
                    to: t8WntmWKiLs1BdzoqPGXmPAYzUTpPb3DBw
                    events:
                      - from: tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
                        to: t8WntmWKiLs1BdzoqPGXmPAYzUTpPb3DBw
                        amount: "3500000.00000000"
                        eventType: TransferEvent
                        contract: tBeY2UAVsbHoS9jwEnT2kMmRsJwUHK1j1L
                        sortOrder: 0
                      - staker: tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
                        amount: "3500000.00000000"
                        stakerBalance: "5000000.00000000"
                        totalStaked: "5010000.00000000"
                        eventType: StartStakingEvent
                        contract: t8WntmWKiLs1BdzoqPGXmPAYzUTpPb3DBw
                        sortOrder: 1
                      - stakingPool: t8WntmWKiLs1BdzoqPGXmPAYzUTpPb3DBw
                        miningPool: tT9qtdXVvaf9fti7eUttnvaE7aSTrBgWPz
                        weight: "5010000.00000000"
                        eventType: NominationEvent
                        contract: tVfGTqrToiTU9bfnvD5UDC5ZQVY4oj4jrc
                        sortOrder: 2
                  - success: true
                    hash: eb71dc3c295d66b9cf0c2459f0dc1e68a333b4c6637165c288fd364416ec9182
                    block:
                      hash: 61b94e910186b3738ceef13835a7d6ee2bce020fb67573120a27041491460999
                      height: 2962932
                      time: 2022-01-05T11:31:28Z
                      medianTime: 2022-01-05T11:29:04Z
                    gasUsed: 61380
                    from: tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
                    to: t8XpH1pNYDgCnqk91ZQKLgpUVeJ7XmomLT
                    events:
                      - from: tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
                        to: tLfFeV1C4NLcH6sYGrSgi9ZuHtfvSkn3Xp
                        amount: "27088.68664829"
                        eventType: TransferEvent
                        contract: tBeY2UAVsbHoS9jwEnT2kMmRsJwUHK1j1L
                        sortOrder: 0
                      - from: t6vc3nrbAurGs3i17HJUavZuw4ioKTiFCE
                        to: tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
                        amount: "3669.87304155"
                        eventType: TransferEvent
                        contract: tLfFeV1C4NLcH6sYGrSgi9ZuHtfvSkn3Xp
                        sortOrder: 1
                      - amountCrs: "500.00000000"
                        amountSrc: "27088.68664829"
                        amountLpt: "3669.87304155"
                        tokenSrc: tBeY2UAVsbHoS9jwEnT2kMmRsJwUHK1j1L
                        tokenLp: tLfFeV1C4NLcH6sYGrSgi9ZuHtfvSkn3Xp
                        tokenLpTotalSupply: "39459.73310927"
                        eventType: AddLiquidityEvent
                        contract: tLfFeV1C4NLcH6sYGrSgi9ZuHtfvSkn3Xp
                        sortOrder: 2
                paging:
                  next: ZGlyZWN0aW9uOkRFU0M7bGltaXQ6NTtwYWdpbmc6Rm9yd2FyZDt3YWxsZXQ6dFE5UnVrWnNCNmJCc2VuSG5HU28xcTY5Q0p6V0dueG9obTtldmVudFR5cGVzOkFkZExpcXVpZGl0eUV2ZW50O2V2ZW50VHlwZXM6UmVtb3ZlTGlxdWlkaXR5RXZlbnQ7ZXZlbnRUeXBlczpTd2FwRXZlbnQ7ZXZlbnRUeXBlczpTdGFydFN0YWtpbmdFdmVudDtldmVudFR5cGVzOlN0b3BTdGFraW5nRXZlbnQ7ZXZlbnRUeXBlczpTdGFydE1pbmluZ0V2ZW50O2V2ZW50VHlwZXM6U3RvcE1pbmluZ0V2ZW50O3BvaW50ZXI6TmpjNTs=
        400:
          description: The request is not valid
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/validationProblemDetails"
              example:
                type: https://httpstatuses.com/400
                title: One or more validation errors occurred.
                status: 400
                errors:
                  wallet:
                    - Invalid address.
                    - Filters cannot be provided alongside cursor.
                  eventTypes:
                    - Filters cannot be provided alongside cursor.
                extensions:
                  traceId: 00-00000000000000000000000000000000-0000000000000000-00
        429:
          $ref: "#/components/responses/TooManyRequests"
        500:
          $ref: "#/components/responses/InternalServerError"
    post:
      tags:
        - Transactions
      summary: Notify Broadcast
      description: Sends notifications to a user about broadcast transactions. This endpoint is intended to be called by a Stratis Transaction Handoff Broadcastor, as a way to notify a user that their transaction has been broadcast. See the [specification](https://github.com/Opdex/STHS) for further details.
      operationId: notifyTransactionBroadcast
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/notifyBroadcastRequest"
            example:
              transactionHash: 402aa2241adb7b04d07d4dbc89f8aae72fa1c11f9bd2bd9013222cd774ed39fe
      responses:
        204:
          description: The broadcast notification was sent
        400:
          description: The request is not valid
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/validationProblemDetails"
              example:
                type: https://httpstatuses.com/400
                title: One or more validation errors occurred.
                status: 400
                errors:
                  transactionHash:
                    - Transaction already mined.
                extensions:
                  traceId: 00-00000000000000000000000000000000-0000000000000000-00
        429:
          $ref: "#/components/responses/TooManyRequests"
        500:
          $ref: "#/components/responses/InternalServerError"
  /transaction/{hash}:
    get:
      tags:
        - Transactions
      summary: Get Transaction
      description: Retrieves details for a tracked Opdex transaction with the supplied hash.
      operationId: getTransaction
      parameters:
        - name: hash
          in: path
          description: The SHA256 hash of the transaction to look up
          required: true
          schema:
            $ref: "#/components/schemas/sha256"
          example: 0132da001ca719cc8d98610fbd8493e92c7943c6e0c0844a819f4c90531fd3a6
      responses:
        200:
          description: Transaction found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/transactionResponse"
              example:
                - success: true
                  hash: 0132da001ca719cc8d98610fbd8493e92c7943c6e0c0844a819f4c90531fd3a6
                  block:
                    hash: dd0eab2a346652a396a601d4b9ff17831ca30d9bfb186b586d10be51290868ce
                    height: 2658775
                    time: 2021-10-11T17:50:40Z
                    medianTime: 2021-10-11T17:49:04Z
                  gasUsed: 99064
                  from: tHYHem7cLKgoLkeb792yn4WayqKzLrjJak
                  to: tBeY2UAVsbHoS9jwEnT2kMmRsJwUHK1j1L
                  events:
                    - vaultAmount: "100000000.00000000"
                      miningGovernanceAmount: "300000000.00000000"
                      periodIndex: 0
                      totalSupply: "400000000.00000000"
                      nextDistributionBlock: 4629775
                      eventType: "DistributionEvent"
                      contract: "tBeY2UAVsbHoS9jwEnT2kMmRsJwUHK1j1L"
                      sortOrder: 0
        400:
          description: The request is not valid
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/validationProblemDetails"
              example:
                type: https://httpstatuses.com/400
                title: One or more validation errors occurred.
                status: 400
                errors:
                  hash:
                    - Invalid hash.
                extensions:
                  traceId: 00-00000000000000000000000000000000-0000000000000000-00
        404:
          description: Transaction not found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/validationProblemDetails"
              example:
                type: https://httpstatuses.com/404
                title: Not Found
                status: 404
                extensions:
                  traceId: 00-00000000000000000000000000000000-0000000000000000-00
        429:
          $ref: "#/components/responses/TooManyRequests"
        500:
          $ref: "#/components/responses/InternalServerError"
  /transaction/replay-quote:
    post:
      tags:
        - Transactions
      summary: Replay Transaction Quote
      description: Replays a previous transaction quote at the current point in time. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
      operationId: replayQuote
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/replayQuoteRequest"
            example:
              quote: eyJzZW5kZXIiOiJ0SFlIZW03Y0xLZ29Ma2ViNzkyeW40V2F5cUt6THJqSmFrIiwidG8iOiJ0QmVZMlVBVnNiSG9TOWp3RW5UMmtNbVJzSndVSEsxajFMIiwiYW1vdW50IjoiMCIsIm1ldGhvZCI6IkRpc3RyaWJ1dGUiLCJjYWxsYmFjayI6Imh0dHBzOi8vdGVzdC1hcGkub3BkZXguY29tL3RyYW5zYWN0aW9ucyJ9
      security:
        - opdexAuth: []
      responses:
        200:
          description: Transaction quote replayed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/transactionQuoteResponse"
              example:
                error: Unable to distribute, not yet ready.
                gasUsed: 10118
                events: []
                request: eyJzZW5kZXIiOiJ0SFlIZW03Y0xLZ29Ma2ViNzkyeW40V2F5cUt6THJqSmFrIiwidG8iOiJ0QmVZMlVBVnNiSG9TOWp3RW5UMmtNbVJzSndVSEsxajFMIiwiYW1vdW50IjoiMCIsIm1ldGhvZCI6IkRpc3RyaWJ1dGUiLCJwYXJhbWV0ZXJzIjpbXSwiY2FsbGJhY2siOiJodHRwczovL3Rlc3QtYXBpLm9wZGV4LmNvbS90cmFuc2FjdGlvbnMifQ==
        400:
          description: The request is not valid
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/validationProblemDetails"
              example:
                type: https://httpstatuses.com/400
                title: One or more validation errors occurred.
                status: 400
                errors:
                  quote:
                    - Quote must be base-64 encoded string.
                extensions:
                  traceId: 00-00000000000000000000000000000000-0000000000000000-00
        401:
          $ref: "#/components/responses/Unauthorized"
        429:
          $ref: "#/components/responses/TooManyRequests"
        500:
          $ref: "#/components/responses/InternalServerError"
  /vault-governances:
    get:
      tags:
        - Vaults
      summary: Get Vaults
      description: Retrieves details for tracked Opdex vaults. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
      operationId: getVaults
      parameters:
        - name: lockedToken
          in: query
          description: Address of the token locked in the vault
          schema:
            $ref: "#/components/schemas/address"
          example: tBeY2UAVsbHoS9jwEnT2kMmRsJwUHK1j1L
        - name: direction
          in: query
          description: Order direction of the results
          schema:
            $ref: "#/components/schemas/sortDirection"
          example: DESC
        - name: limit
          in: query
          description: Number of results per page
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 50
          example: 10
        - name: cursor
          in: query
          description: Reference of the requested page, returned by a previous call
          schema:
            type: string
      responses:
        200:
          description: Vault results found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/vaultsResponse"
              example:
                results:
                  - vault: tS1PEGC4VsovkDgib1MD3eYNv5BL2FAC3i
                    token: tBeY2UAVsbHoS9jwEnT2kMmRsJwUHK1j1L
                    tokensUnassigned: "99984399.37597504"
                    tokensProposed: "0.00000000"
                    tokensLocked: "100000000.00000000"
                    totalPledgeMinimum: "1000.00000000"
                    totalVoteMinimum: "2000.00000000"
                    vestingDuration: 1080000
                paging: {}
        400:
          description: The request is not valid
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/validationProblemDetails"
              example:
                type: https://httpstatuses.com/400
                title: One or more validation errors occurred.
                status: 400
                errors:
                  lockedToken:
                    - Filters cannot be provided alongside cursor.
                extensions:
                  traceId: 00-00000000000000000000000000000000-0000000000000000-00
        429:
          $ref: "#/components/responses/TooManyRequests"
        500:
          $ref: "#/components/responses/InternalServerError"
  /vault-governances/{vault}:
    get:
      tags:
        - Vaults
      summary: Get Vault
      description: Retrieves details of a vault tracked by the Opdex indexer.
      operationId: getVault
      parameters:
        - name: vault
          in: path
          description: Address of the vault
          required: true
          schema:
            $ref: "#/components/schemas/address"
          example: tS1PEGC4VsovkDgib1MD3eYNv5BL2FAC3i
      responses:
        200:
          description: Vault found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/vaultResponse"
              example:
                vault: tS1PEGC4VsovkDgib1MD3eYNv5BL2FAC3i
                token: tBeY2UAVsbHoS9jwEnT2kMmRsJwUHK1j1L
                tokensUnassigned: "99984399.37597504"
                tokensProposed: "0.00000000"
                tokensLocked: "100000000.00000000"
                totalPledgeMinimum: "1000.00000000"
                totalVoteMinimum: "2000.00000000"
                vestingDuration: 1080000
        400:
          description: The request is not valid
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/validationProblemDetails"
              example:
                type: https://httpstatuses.com/400
                title: One or more validation errors occurred.
                status: 400
                errors:
                  vault:
                    - Invalid address.
                extensions:
                  traceId: 00-00000000000000000000000000000000-0000000000000000-00
        404:
          $ref: "#/components/responses/VaultNotFound"
        429:
          $ref: "#/components/responses/TooManyRequests"
        500:
          $ref: "#/components/responses/InternalServerError"
  /vault-governances/{vault}/certificates:
    get:
      tags:
        - Vaults
      summary: Get Vault Certificates
      description: Retrieves details for certificates existing within tracked Opdex vaults. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
      operationId: getCertificates
      parameters:
        - name: vault
          in: path
          description: Address of the vault
          required: true
          schema:
            $ref: "#/components/schemas/address"
          example: tS1PEGC4VsovkDgib1MD3eYNv5BL2FAC3i
        - name: holder
          in: query
          description: Address of the certificate holder
          schema:
            $ref: "#/components/schemas/address"
          example: tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
        - name: status
          in: query
          description: Status of the certificates
          schema:
            $ref: "#/components/schemas/certificateStatus"
          example: Vesting
        - name: direction
          in: query
          description: Order direction of the results
          schema:
            $ref: "#/components/schemas/sortDirection"
          example: DESC
        - name: limit
          in: query
          description: Number of results per page
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 50
          example: 10
        - name: cursor
          in: query
          description: Reference of the requested page, returned by a previous call
          schema:
            type: string
      responses:
        200:
          description: Certificate results found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/certificatesResponse"
              example:
                results:
                  - owner: tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
                    amount: "5000000.00000000"
                    vestingStartBlock: 825020
                    vestingEndBlock: 1905020
                    redeemed: false
                    revoked: false
                paging: {}
        400:
          description: The request is not valid
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/validationProblemDetails"
              example:
                type: https://httpstatuses.com/400
                title: One or more validation errors occurred.
                status: 400
                errors:
                  vault:
                    - Invalid address.
                extensions:
                  traceId: 00-00000000000000000000000000000000-0000000000000000-00
        404:
          $ref: "#/components/responses/VaultNotFound"
        429:
          $ref: "#/components/responses/TooManyRequests"
        500:
          $ref: "#/components/responses/InternalServerError"
  /vault-governances/{vault}/certificates/redeem:
    post:
      tags:
        - Vaults
      summary: Build Redeem Vault Certificate Transaction Quote
      description: Builds a quote for a transaction to redeem a vault certificate. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
      operationId: buildRedeemCertificateQuote
      parameters:
        - name: vault
          in: path
          description: Address of the vault
          required: true
          schema:
            $ref: "#/components/schemas/address"
          example: tS1PEGC4VsovkDgib1MD3eYNv5BL2FAC3i
      security:
        - opdexAuth: []
      responses:
        200:
          description: Built redeem certificate transaction quote
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/transactionQuoteResponse"
              example:
                error: Unable to redeem certificate, not found.
                gasUsed: 10218
                events: []
                request: eyJzZW5kZXIiOiJQVnd5cWJ3dTVDYXplQUNvQU1Sb25hUVN5UnZUSFp2QVVoIiwidG8iOiJQVkM2RDZkZTZHNEVNdzdjaWJReXR6YjFEWWNZRjRNTEx1IiwiYW1vdW50IjoiMCIsIm1ldGhvZCI6IlJlZGVlbUNlcnRpZmljYXRlIiwicGFyYW1ldGVycyI6W10sImNhbGxiYWNrIjoiaHR0cHM6Ly9kZXYtYXBpLm9wZGV4LmNvbS90cmFuc2FjdGlvbnMifQ==
        400:
          description: The request is not valid
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/validationProblemDetails"
              example:
                type: https://httpstatuses.com/400
                title: One or more validation errors occurred.
                status: 400
                errors:
                  vault:
                    - Invalid address.
                extensions:
                  traceId: 00-00000000000000000000000000000000-0000000000000000-00
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/VaultNotFound"
        429:
          $ref: "#/components/responses/TooManyRequests"
        500:
          $ref: "#/components/responses/InternalServerError"
  /vault-governances/{vault}/pledges:
    get:
      tags:
        - Vaults
      summary: Get Vault Proposal Pledges
      description: Retrieves details for pledges that have been made to proposals within tracked Opdex vaults. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
      operationId: getPledges
      parameters:
        - name: vault
          in: path
          description: Address of the vault
          required: true
          schema:
            $ref: "#/components/schemas/address"
          example: tS1PEGC4VsovkDgib1MD3eYNv5BL2FAC3i
        - name: proposalId
          in: query
          description: Id of the proposal in the vault
          schema:
            type: integer
            minimum: 1
          example: 1
        - name: pledger
          in: query
          description: Address of the pledger
          schema:
            $ref: "#/components/schemas/address"
          example: tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
        - name: includeZeroBalances
          in: query
          description: Includes zero balances if true, otherwise filters out zero balances if false
          schema:
            type: boolean
          example: true
        - name: direction
          in: query
          description: Order direction of the results
          schema:
            $ref: "#/components/schemas/sortDirection"
          example: DESC
        - name: limit
          in: query
          description: Number of results per page
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 50
          example: 10
        - name: cursor
          in: query
          description: Reference of the requested page, returned by a previous call
          schema:
            type: string
      responses:
        200:
          description: Pledge results found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/pledgesResponse"
              example:
                results:
                  - vault: tS1PEGC4VsovkDgib1MD3eYNv5BL2FAC3i
                    proposalId: 2
                    pledger: tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
                    pledge: "2000.00000000"
                    balance: "2000.00000000"
                  - vault: tS1PEGC4VsovkDgib1MD3eYNv5BL2FAC3i
                    proposalId: 1
                    pledger: tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
                    pledge: "10000.00000000"
                    balance: "10000.00000000"
                paging: {}
        400:
          description: The request is not valid
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/validationProblemDetails"
              example:
                type: https://httpstatuses.com/400
                title: One or more validation errors occurred.
                status: 400
                errors:
                  vault:
                    - Invalid address.
                extensions:
                  traceId: 00-00000000000000000000000000000000-0000000000000000-00
        404:
          $ref: "#/components/responses/VaultNotFound"
        429:
          $ref: "#/components/responses/TooManyRequests"
        500:
          $ref: "#/components/responses/InternalServerError"
  /vault-governances/{vault}/proposals:
    get:
      tags:
        - Vaults
      summary: Get Vault Proposals
      description: Retrieves details for proposals existing within tracked Opdex vaults. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
      operationId: getProposals
      parameters:
        - name: vault
          in: path
          description: Address of the vault
          required: true
          schema:
            $ref: "#/components/schemas/address"
          example: tS1PEGC4VsovkDgib1MD3eYNv5BL2FAC3i
        - name: status
          in: query
          description: Status of the proposal
          schema:
            $ref: "#/components/schemas/proposalStatus"
          example: Complete
        - name: type
          in: query
          description: Type of proposal
          schema:
            $ref: "#/components/schemas/proposalType"
          example: Create
        - name: direction
          in: query
          description: Order direction of the results
          schema:
            $ref: "#/components/schemas/sortDirection"
          example: DESC
        - name: limit
          in: query
          description: Number of results per page
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 50
          example: 10
        - name: cursor
          in: query
          description: Reference of the requested page, returned by a previous call
          schema:
            type: string
      responses:
        200:
          description: Proposal results found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/proposalsResponse"
              example:
                results:
                  - vault: tS1PEGC4VsovkDgib1MD3eYNv5BL2FAC3i
                    token: tBeY2UAVsbHoS9jwEnT2kMmRsJwUHK1j1L
                    proposalId: 2
                    creator: tTJuvSKZ7bMJwKNmC6vGYyVQUPUpiPTW5p
                    wallet: tEtBQhXDFo5yWR1WizqXSbrZzMq6sBmhSU
                    amount: "100000.00000000"
                    description: "OVP-2: This person should have their certificate revoked."
                    type: Revoke
                    status: Complete
                    expiration: 1025889
                    yesAmount: "15000.34338002"
                    noAmount: "37900.00009881"
                    pledgeAmount: "10200.00540309"
                    approved: false
                  - vault: tS1PEGC4VsovkDgib1MD3eYNv5BL2FAC3i
                    token: tBeY2UAVsbHoS9jwEnT2kMmRsJwUHK1j1L
                    proposalId: 1
                    creator: tJyppxPeKs9rbsidSi3pqCYitkdGYjo57r
                    wallet: tEtBQhXDFo5yWR1WizqXSbrZzMq6sBmhSU
                    amount: "5000000.00000000"
                    description: "OVP-1: Request for certificate. View details at: https://example.com."
                    type: Create
                    status: Complete
                    expiration: 945889
                    yesAmount: "200600.4932824"
                    noAmount: "17534.53831111"
                    pledgeAmount: "10000.00000000"
                    approved: true
                paging: {}
        400:
          description: The request is not valid
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/validationProblemDetails"
              example:
                type: https://httpstatuses.com/400
                title: One or more validation errors occurred.
                status: 400
                errors:
                  vault:
                    - Invalid address.
                extensions:
                  traceId: 00-00000000000000000000000000000000-0000000000000000-00
        404:
          $ref: "#/components/responses/VaultNotFound"
        429:
          $ref: "#/components/responses/TooManyRequests"
        500:
          $ref: "#/components/responses/InternalServerError"
  /vault-governances/{vault}/proposals/create-certificate:
    post:
      tags:
        - Vaults
      summary: Build Propose Create Certificate Transaction Quote
      description: Builds a quote for a transaction to create a proposal for creating a vault certificate. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
      operationId: buildProposeCreateCertificateQuote
      parameters:
        - name: vault
          in: path
          description: Address of the vault
          required: true
          schema:
            $ref: "#/components/schemas/address"
          example: tS1PEGC4VsovkDgib1MD3eYNv5BL2FAC3i
      security:
        - opdexAuth: []
      responses:
        200:
          description: Built propose create certificate transaction quote
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/transactionQuoteResponse"
              example:
                result: 7
                gasUsed: 14733
                events:
                  - proposalId: 7
                    wallet: tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
                    amount: "2500000.00000000"
                    type: Create
                    status: Pledge
                    expiration: 959117
                    description: "OVP-1: Request to create certificate. See https://www.example.com for details."
                    eventType: CreateVaultProposalEvent
                    contract: tS1PEGC4VsovkDgib1MD3eYNv5BL2FAC3i
                    sortOrder: 0
                request: eyJzZW5kZXIiOiJ0UTlSdWtac0I2YkJzZW5IbkdTbzFxNjlDSnpXR254b2htIiwidG8iOiJ0UzFQRUdDNFZzb3ZrRGdpYjFNRDNlWU52NUJMMkZBQzNpIiwiYW1vdW50IjoiMCIsIm1ldGhvZCI6IkNyZWF0ZU5ld0NlcnRpZmljYXRlUHJvcG9zYWwiLCJwYXJhbWV0ZXJzIjpbeyJsYWJlbCI6IkFtb3VudCIsInZhbHVlIjoiMTIjMjUwMDAwMDAwMDAwMDAwIn0seyJsYWJlbCI6IlJlY2lwaWVudCIsInZhbHVlIjoiOSN0UTlSdWtac0I2YkJzZW5IbkdTbzFxNjlDSnpXR254b2htIn0seyJsYWJlbCI6IkRlc2NyaXB0aW9uIiwidmFsdWUiOiI0I09WUC0xOiBSZXF1ZXN0IHRvIGNyZWF0ZSBjZXJ0aWZpY2F0ZS4gU2VlIGh0dHBzOi8vd3d3LmV4YW1wbGUuY29tIGZvciBkZXRhaWxzLiJ9XSwiY2FsbGJhY2siOiJodHRwczovL3Rlc3QtYXBpLm9wZGV4LmNvbS90cmFuc2FjdGlvbnMifQ==
        400:
          description: The request is not valid
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/validationProblemDetails"
              example:
                type: https://httpstatuses.com/400
                title: One or more validation errors occurred.
                status: 400
                errors:
                  vault:
                    - Invalid address.
                extensions:
                  traceId: 00-00000000000000000000000000000000-0000000000000000-00
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/VaultNotFound"
        429:
          $ref: "#/components/responses/TooManyRequests"
        500:
          $ref: "#/components/responses/InternalServerError"
  /vault-governances/{vault}/proposals/revoke-certificate:
    post:
      tags:
        - Vaults
      summary: Build Propose Revoke Certificate Transaction Quote
      description: Builds a quote for a transaction to create a proposal for revoking a vault certificate. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
      operationId: buildProposeRevokeCertificateQuote
      parameters:
        - name: vault
          in: path
          description: Address of the vault
          required: true
          schema:
            $ref: "#/components/schemas/address"
          example: tS1PEGC4VsovkDgib1MD3eYNv5BL2FAC3i
      security:
        - opdexAuth: []
      responses:
        200:
          description: Built propose revoke certificate transaction quote
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/transactionQuoteResponse"
              example:
                error: Unable to propose revoking certificate, invalid certificate.
                gasUsed: 10164
                events: []
                request: eyJzZW5kZXIiOiJQVnd5cWJ3dTVDYXplQUNvQU1Sb25hUVN5UnZUSFp2QVVoIiwidG8iOiJQVkM2RDZkZTZHNEVNdzdjaWJReXR6YjFEWWNZRjRNTEx1IiwiYW1vdW50IjoiMCIsIm1ldGhvZCI6IkNyZWF0ZVJldm9rZUNlcnRpZmljYXRlUHJvcG9zYWwiLCJwYXJhbWV0ZXJzIjpbeyJsYWJlbCI6IlJlY2lwaWVudCIsInZhbHVlIjoiOSNQQVZWMmM5TXVrOUV1NHdpOEZxZG1tNTVmZnpoQUZQZmZWIn0seyJsYWJlbCI6IkRlc2NyaXB0aW9uIiwidmFsdWUiOiI0I09WUC0xOiBSZXF1ZXN0IHRvIHJldm9rZSBjZXJ0aWZpY2F0ZS4gU2VlIGh0dHBzOi8vd3d3LmV4YW1wbGUuY29tIGZvciBkZXRhaWxzLiJ9XSwiY2FsbGJhY2siOiJodHRwczovL2Rldi1hcGkub3BkZXguY29tL3RyYW5zYWN0aW9ucyJ9
        400:
          description: The request is not valid
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/validationProblemDetails"
              example:
                type: https://httpstatuses.com/400
                title: One or more validation errors occurred.
                status: 400
                errors:
                  vault:
                    - Invalid address.
                extensions:
                  traceId: 00-00000000000000000000000000000000-0000000000000000-00
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/VaultNotFound"
        429:
          $ref: "#/components/responses/TooManyRequests"
        500:
          $ref: "#/components/responses/InternalServerError"
  /vault-governances/{vault}/proposals/minimum-pledge:
    post:
      tags:
        - Vaults
      summary: Build Propose Change Minimum Pledge Transaction Quote
      description: Builds a quote for a transaction to create a proposal for changing the minimum pledge amount. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
      operationId: buildProposeChangeMinimumPledgeQuote
      parameters:
        - name: vault
          in: path
          description: Address of the vault
          required: true
          schema:
            $ref: "#/components/schemas/address"
          example: tS1PEGC4VsovkDgib1MD3eYNv5BL2FAC3i
      security:
        - opdexAuth: []
      responses:
        200:
          description: Built propose change minimum pledge transaction quote
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/transactionQuoteResponse"
              example:
                result: 8
                gasUsed: 12728
                events:
                  - proposalId: 8
                    wallet: tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
                    amount: "50000.00000000"
                    type: TotalPledgeMinimum
                    status: Pledge
                    expiration: 959140
                    description: "OVP-1: Request to change minimum pledge amount. See https://www.example.com for details."
                    eventType: CreateVaultProposalEvent
                    contract: tS1PEGC4VsovkDgib1MD3eYNv5BL2FAC3i
                    sortOrder: 0
                request: eyJzZW5kZXIiOiJ0UTlSdWtac0I2YkJzZW5IbkdTbzFxNjlDSnpXR254b2htIiwidG8iOiJ0UzFQRUdDNFZzb3ZrRGdpYjFNRDNlWU52NUJMMkZBQzNpIiwiYW1vdW50IjoiMCIsIm1ldGhvZCI6IkNyZWF0ZVRvdGFsUGxlZGdlTWluaW11bVByb3Bvc2FsIiwicGFyYW1ldGVycyI6W3sibGFiZWwiOiJBbW91bnQiLCJ2YWx1ZSI6IjEyIzUwMDAwMDAwMDAwMDAifSx7ImxhYmVsIjoiRGVzY3JpcHRpb24iLCJ2YWx1ZSI6IjQjT1ZQLTE6IFJlcXVlc3QgdG8gY2hhbmdlIG1pbmltdW0gcGxlZGdlIGFtb3VudC4gU2VlIGh0dHBzOi8vd3d3LmV4YW1wbGUuY29tIGZvciBkZXRhaWxzLiJ9XSwiY2FsbGJhY2siOiJodHRwczovL3Rlc3QtYXBpLm9wZGV4LmNvbS90cmFuc2FjdGlvbnMifQ==
        400:
          description: The request is not valid
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/validationProblemDetails"
              example:
                type: https://httpstatuses.com/400
                title: One or more validation errors occurred.
                status: 400
                errors:
                  vault:
                    - Invalid address.
                extensions:
                  traceId: 00-00000000000000000000000000000000-0000000000000000-00
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/VaultNotFound"
        429:
          $ref: "#/components/responses/TooManyRequests"
        500:
          $ref: "#/components/responses/InternalServerError"
  /vault-governances/{vault}/proposals/minimum-vote:
    post:
      tags:
        - Vaults
      summary: Build Propose Change Minimum Vote Transaction Quote
      description: Builds a quote for a transaction to create a proposal for changing the minimum vote threshold. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
      operationId: buildProposeChangeMinimumVoteQuote
      parameters:
        - name: vault
          in: path
          description: Address of the vault
          required: true
          schema:
            $ref: "#/components/schemas/address"
          example: tS1PEGC4VsovkDgib1MD3eYNv5BL2FAC3i
      security:
        - opdexAuth: []
      responses:
        200:
          description: Built propose change minimum vote transaction quote
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/transactionQuoteResponse"
              example:
                result: 9
                gasUsed: 12726
                events:
                  - proposalId: 9
                    wallet: tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
                    amount: "50000.00000000"
                    type: TotalPledgeVote
                    status: Pledge
                    expiration: 959153
                    description: "OVP-1: Request to change minimum vote amount. See https://www.example.com for details."
                    eventType: CreateVaultProposalEvent
                    contract: tS1PEGC4VsovkDgib1MD3eYNv5BL2FAC3i
                    sortOrder: 0
                request: eyJzZW5kZXIiOiJ0UTlSdWtac0I2YkJzZW5IbkdTbzFxNjlDSnpXR254b2htIiwidG8iOiJ0UzFQRUdDNFZzb3ZrRGdpYjFNRDNlWU52NUJMMkZBQzNpIiwiYW1vdW50IjoiMCIsIm1ldGhvZCI6IkNyZWF0ZVRvdGFsVm90ZU1pbmltdW1Qcm9wb3NhbCIsInBhcmFtZXRlcnMiOlt7ImxhYmVsIjoiQW1vdW50IiwidmFsdWUiOiIxMiM1MDAwMDAwMDAwMDAifSx7ImxhYmVsIjoiRGVzY3JpcHRpb24iLCJ2YWx1ZSI6IjQjT1ZQLTE6IFJlcXVlc3QgdG8gY2hhbmdlIG1pbmltdW0gdm90ZSBhbW91bnQuIFNlZSBodHRwczovL3d3dy5leGFtcGxlLmNvbSBmb3IgZGV0YWlscy4ifV0sImNhbGxiYWNrIjoiaHR0cHM6Ly90ZXN0LWFwaS5vcGRleC5jb20vdHJhbnNhY3Rpb25zIn0=
        400:
          description: The request is not valid
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/validationProblemDetails"
              example:
                type: https://httpstatuses.com/400
                title: One or more validation errors occurred.
                status: 400
                errors:
                  vault:
                    - Invalid address.
                extensions:
                  traceId: 00-00000000000000000000000000000000-0000000000000000-00
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/VaultNotFound"
        429:
          $ref: "#/components/responses/TooManyRequests"
        500:
          $ref: "#/components/responses/InternalServerError"
  /vault-governances/{vault}/proposals/{proposalId}:
    get:
      tags:
        - Vaults
      summary: Get Vault Proposal
      description: Retrieves a proposal that exists in a tracked Opdex vault.
      operationId: getVaultProposal
      parameters:
        - name: vault
          in: path
          description: Address of the vault
          required: true
          schema:
            $ref: "#/components/schemas/address"
          example: tS1PEGC4VsovkDgib1MD3eYNv5BL2FAC3i
        - name: proposalId
          in: path
          description: Id of the proposal
          required: true
          schema:
            type: integer
            minimum: 1
          example: 1
      responses:
        200:
          description: Proposal found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/proposalResponse"
              example:
                vault: tS1PEGC4VsovkDgib1MD3eYNv5BL2FAC3i
                token: tBeY2UAVsbHoS9jwEnT2kMmRsJwUHK1j1L
                proposalId: 1
                creator: tJyppxPeKs9rbsidSi3pqCYitkdGYjo57r
                wallet: tEtBQhXDFo5yWR1WizqXSbrZzMq6sBmhSU
                amount: "5000000.00000000"
                description: "OVP-1: Request for certificate. View details at: https://example.com."
                type: Create
                status: Complete
                expiration: 945889
                yesAmount: "200600.4932824"
                noAmount: "17534.53831111"
                pledgeAmount: "10000.00000000"
                approved: true
        400:
          description: The request is not valid
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/validationProblemDetails"
              example:
                type: https://httpstatuses.com/400
                title: One or more validation errors occurred.
                status: 400
                errors:
                  vault:
                    - Invalid address.
                extensions:
                  traceId: 00-00000000000000000000000000000000-0000000000000000-00
        404:
          $ref: "#/components/responses/VaultOrProposalNotFound"
        429:
          $ref: "#/components/responses/TooManyRequests"
        500:
          $ref: "#/components/responses/InternalServerError"
  /vault-governances/{vault}/proposals/{proposalId}/complete:
    post:
      tags:
        - Vaults
      summary: Build Complete Proposal Transaction Quote
      description: Builds a quote for a transaction to complete a vault proposal. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
      operationId: buildCompleteProposalQuote
      parameters:
        - name: vault
          in: path
          description: Address of the vault
          required: true
          schema:
            $ref: "#/components/schemas/address"
          example: tS1PEGC4VsovkDgib1MD3eYNv5BL2FAC3i
        - name: proposalId
          in: path
          description: Id of the proposal
          required: true
          schema:
            type: integer
            minimum: 1
          example: 1
      security:
        - opdexAuth: []
      responses:
        200:
          description: Built complete proposal transaction quote
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/transactionQuoteResponse"
              example:
                error: Unable to complete proposal, not yet expired.
                gasUsed: 10213
                events: []
                request: eyJzZW5kZXIiOiJQVnd5cWJ3dTVDYXplQUNvQU1Sb25hUVN5UnZUSFp2QVVoIiwidG8iOiJQVkM2RDZkZTZHNEVNdzdjaWJReXR6YjFEWWNZRjRNTEx1IiwiYW1vdW50IjoiMCIsIm1ldGhvZCI6IkNvbXBsZXRlUHJvcG9zYWwiLCJwYXJhbWV0ZXJzIjpbeyJsYWJlbCI6IlByb3Bvc2FsIElkIiwidmFsdWUiOiI3IzcifV0sImNhbGxiYWNrIjoiaHR0cHM6Ly9kZXYtYXBpLm9wZGV4LmNvbS90cmFuc2FjdGlvbnMifQ==
        400:
          description: The request is not valid
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/validationProblemDetails"
              example:
                type: https://httpstatuses.com/400
                title: One or more validation errors occurred.
                status: 400
                errors:
                  vault:
                    - Invalid address.
                extensions:
                  traceId: 00-00000000000000000000000000000000-0000000000000000-00
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/VaultOrProposalNotFound"
        429:
          $ref: "#/components/responses/TooManyRequests"
        500:
          $ref: "#/components/responses/InternalServerError"
  /vault-governances/{vault}/proposals/{proposalId}/pledges:
    post:
      tags:
        - Vaults
      summary: Build Make Pledge Transaction Quote
      description: Builds a quote for a transaction to make a pledge to a vault proposal. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
      operationId: buildPledgeQuote
      parameters:
        - name: vault
          in: path
          description: Address of the vault
          required: true
          schema:
            $ref: "#/components/schemas/address"
          example: tS1PEGC4VsovkDgib1MD3eYNv5BL2FAC3i
        - name: proposalId
          in: path
          description: Id of the proposal
          required: true
          schema:
            type: integer
            minimum: 1
          example: 1
      security:
        - opdexAuth: []
      responses:
        200:
          description: Built pledge transaction quote
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/transactionQuoteResponse"
              example:
                gasUsed: 13674
                events:
                  - proposalId: 7
                    pledger: tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
                    pledgeAmount: "5000.00000000"
                    pledgerAmount: "5000.00000000"
                    proposalPledgeAmount: "10000.00000000"
                    "totalPledgeMinimumMet": true,
                    eventType: VaultProposalPledgeEvent
                    contract: tS1PEGC4VsovkDgib1MD3eYNv5BL2FAC3i
                    sortOrder: 0
                request: eyJzZW5kZXIiOiJ0UTlSdWtac0I2YkJzZW5IbkdTbzFxNjlDSnpXR254b2htIiwidG8iOiJ0UzFQRUdDNFZzb3ZrRGdpYjFNRDNlWU52NUJMMkZBQzNpIiwiYW1vdW50IjoiNTAwMC4wMDAwMDAwMCIsIm1ldGhvZCI6IlBsZWRnZSIsInBhcmFtZXRlcnMiOlt7ImxhYmVsIjoiUHJvcG9zYWwgSWQiLCJ2YWx1ZSI6IjcjNyJ9XSwiY2FsbGJhY2siOiJodHRwczovL3Rlc3QtYXBpLm9wZGV4LmNvbS90cmFuc2FjdGlvbnMifQ==
        400:
          description: The request is not valid
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/validationProblemDetails"
              example:
                type: https://httpstatuses.com/400
                title: One or more validation errors occurred.
                status: 400
                errors:
                  vault:
                    - Invalid address.
                extensions:
                  traceId: 00-00000000000000000000000000000000-0000000000000000-00
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/VaultOrProposalNotFound"
        429:
          $ref: "#/components/responses/TooManyRequests"
        500:
          $ref: "#/components/responses/InternalServerError"
  /vault-governances/{vault}/proposals/{proposalId}/pledges/withdraw:
    post:
      tags:
        - Vaults
      summary: Build Withdraw Pledge Transaction Quote
      description: Builds a quote for a transaction to withdraw a pledge from a vault proposal. If the proposal is expired or the minimum pledge threshold is met, this will not affect the proposal. Otherwise, the pledge will be negated from the total pledge amount. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
      operationId: buildWithdrawPledgeQuote
      parameters:
        - name: vault
          in: path
          description: Address of the vault
          required: true
          schema:
            $ref: "#/components/schemas/address"
          example: tS1PEGC4VsovkDgib1MD3eYNv5BL2FAC3i
        - name: proposalId
          in: path
          description: Id of the proposal
          required: true
          schema:
            type: integer
            minimum: 1
          example: 1
      security:
        - opdexAuth: []
      responses:
        200:
          description: Built withdraw pledge transaction quote
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/transactionQuoteResponse"
              example:
                error: Value overflow.
                gasUsed: 10283
                events: []
                request: eyJzZW5kZXIiOiJQVnd5cWJ3dTVDYXplQUNvQU1Sb25hUVN5UnZUSFp2QVVoIiwidG8iOiJQVkM2RDZkZTZHNEVNdzdjaWJReXR6YjFEWWNZRjRNTEx1IiwiYW1vdW50IjoiMCIsIm1ldGhvZCI6IldpdGhkcmF3Vm90ZSIsInBhcmFtZXRlcnMiOlt7ImxhYmVsIjoiUHJvcG9zYWwgSWQiLCJ2YWx1ZSI6IjcjNyJ9LHsibGFiZWwiOiJXaXRoZHJhd2FsIEFtb3VudCIsInZhbHVlIjoiNyMxMDAwMDAwMDAwIn1dLCJjYWxsYmFjayI6Imh0dHBzOi8vZGV2LWFwaS5vcGRleC5jb20vdHJhbnNhY3Rpb25zIn0=
        400:
          description: The request is not valid
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/validationProblemDetails"
              example:
                type: https://httpstatuses.com/400
                title: One or more validation errors occurred.
                status: 400
                errors:
                  vault:
                    - Invalid address.
                extensions:
                  traceId: 00-00000000000000000000000000000000-0000000000000000-00
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/VaultOrProposalNotFound"
        429:
          $ref: "#/components/responses/TooManyRequests"
        500:
          $ref: "#/components/responses/InternalServerError"
  /vault-governances/{vault}/proposals/{proposalId}/pledges/{pledger}:
    get:
      tags:
        - Vaults
      summary: Get Vault Proposal Pledge Position
      description: Retrieves details for a pledgers position on a vault proposal.
      operationId: getPledgePosition
      parameters:
        - name: vault
          in: path
          description: Address of the vault
          required: true
          schema:
            $ref: "#/components/schemas/address"
          example: tS1PEGC4VsovkDgib1MD3eYNv5BL2FAC3i
        - name: proposalId
          in: path
          description: Id of the proposal
          required: true
          schema:
            type: integer
            minimum: 1
          example: 1
        - name: pledger
          in: path
          description: Address of the pledger
          required: true
          schema:
            $ref: "#/components/schemas/address"
          example: tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
      responses:
        200:
          description: Pledge position found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/pledgeResponse"
              example:
                vault: tS1PEGC4VsovkDgib1MD3eYNv5BL2FAC3i
                proposalId: 1
                pledger: tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
                pledge: "10000.00000000"
                balance: "10000.00000000"
        400:
          description: The request is not valid
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/validationProblemDetails"
              example:
                type: https://httpstatuses.com/400
                title: One or more validation errors occurred.
                status: 400
                errors:
                  vault:
                    - Invalid address.
                extensions:
                  traceId: 00-00000000000000000000000000000000-0000000000000000-00
        404:
          description: Vault, proposal or pledger not found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/problemDetails"
              example:
                type: https://httpstatuses.com/404
                title: Not Found
                status: 404
                extensions:
                  traceId: 00-00000000000000000000000000000000-0000000000000000-00
        429:
          $ref: "#/components/responses/TooManyRequests"
        500:
          $ref: "#/components/responses/InternalServerError"
  /vault-governances/{vault}/proposals/{proposalId}/votes:
    post:
      tags:
        - Vaults
      summary: Build Cast Vote Transaction Quote
      description: Builds a quote for a transaction to make a vote on a vault proposal. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
      operationId: buildVoteQuote
      parameters:
        - name: vault
          in: path
          description: Address of the vault
          required: true
          schema:
            $ref: "#/components/schemas/address"
          example: tS1PEGC4VsovkDgib1MD3eYNv5BL2FAC3i
        - name: proposalId
          in: path
          description: Id of the proposal
          required: true
          schema:
            type: integer
            minimum: 1
          example: 1
      security:
        - opdexAuth: []
      responses:
        200:
          description: Built vote transaction quote
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/transactionQuoteResponse"
              example:
                error: Unable to vote, invalid status
                gasUsed: 13674
                events: []
                request: eyJzZW5kZXIiOiJQVnd5cWJ3dTVDYXplQUNvQU1Sb25hUVN5UnZUSFp2QVVoIiwidG8iOiJQVkM2RDZkZTZHNEVNdzdjaWJReXR6YjFEWWNZRjRNTEx1IiwiYW1vdW50IjoiMTAwMDAuMDAwMDAwMDAiLCJtZXRob2QiOiJWb3RlIiwicGFyYW1ldGVycyI6W3sibGFiZWwiOiJQcm9wb3NhbCBJZCIsInZhbHVlIjoiNyM3In0seyJsYWJlbCI6IkluIEZhdm9yIiwidmFsdWUiOiIxI1RydWUifV0sImNhbGxiYWNrIjoiaHR0cHM6Ly9kZXYtYXBpLm9wZGV4LmNvbS90cmFuc2FjdGlvbnMifQ==
        400:
          description: The request is not valid
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/validationProblemDetails"
              example:
                type: https://httpstatuses.com/400
                title: One or more validation errors occurred.
                status: 400
                errors:
                  vault:
                    - Invalid address.
                extensions:
                  traceId: 00-00000000000000000000000000000000-0000000000000000-00
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/VaultOrProposalNotFound"
        429:
          $ref: "#/components/responses/TooManyRequests"
        500:
          $ref: "#/components/responses/InternalServerError"
  /vault-governances/{vault}/proposals/{proposalId}/votes/withdraw:
    post:
      tags:
        - Vaults
      summary: Build Withdraw Vote Transaction Quote
      description: Builds a quote for a transaction to withdraw a vote from a vault proposal. If the proposal is completed or expired, this will not affect the proposal. Otherwise, the vote will be negated from the current voting weights. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
      operationId: buildWithdrawVoteQuote
      parameters:
        - name: vault
          in: path
          description: Address of the vault
          required: true
          schema:
            $ref: "#/components/schemas/address"
          example: tS1PEGC4VsovkDgib1MD3eYNv5BL2FAC3i
        - name: proposalId
          in: path
          description: Id of the proposal
          required: true
          schema:
            type: integer
            minimum: 1
          example: 1
      security:
        - opdexAuth: []
      responses:
        200:
          description: Built withdraw vote transaction quote
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/transactionQuoteResponse"
              example:
                error: Value overflow.
                gasUsed: 10290
                events: []
                request: eyJzZW5kZXIiOiJQVnd5cWJ3dTVDYXplQUNvQU1Sb25hUVN5UnZUSFp2QVVoIiwidG8iOiJQVkM2RDZkZTZHNEVNdzdjaWJReXR6YjFEWWNZRjRNTEx1IiwiYW1vdW50IjoiMCIsIm1ldGhvZCI6IldpdGhkcmF3Vm90ZSIsInBhcmFtZXRlcnMiOlt7ImxhYmVsIjoiUHJvcG9zYWwgSWQiLCJ2YWx1ZSI6IjcjNyJ9LHsibGFiZWwiOiJXaXRoZHJhd2FsIEFtb3VudCIsInZhbHVlIjoiNyMxMDAwMDAwMDAwIn1dLCJjYWxsYmFjayI6Imh0dHBzOi8vZGV2LWFwaS5vcGRleC5jb20vdHJhbnNhY3Rpb25zIn0=
        400:
          description: The request is not valid
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/validationProblemDetails"
              example:
                type: https://httpstatuses.com/400
                title: One or more validation errors occurred.
                status: 400
                errors:
                  vault:
                    - Invalid address.
                extensions:
                  traceId: 00-00000000000000000000000000000000-0000000000000000-00
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/VaultOrProposalNotFound"
        429:
          $ref: "#/components/responses/TooManyRequests"
        500:
          $ref: "#/components/responses/InternalServerError"
  /vault-governances/{vault}/proposals/{proposalId}/votes/{voter}:
    get:
      tags:
        - Vaults
      summary: Get Vault Proposal Vote Position
      description: Retrieves details for a voters position on a vault proposal.
      operationId: getVotePosition
      parameters:
        - name: vault
          in: path
          description: Address of the vault
          required: true
          schema:
            $ref: "#/components/schemas/address"
          example: tS1PEGC4VsovkDgib1MD3eYNv5BL2FAC3i
        - name: proposalId
          in: path
          description: Id of the proposal
          required: true
          schema:
            type: integer
            minimum: 1
          example: 1
        - name: voter
          in: path
          description: Address of the voter
          required: true
          schema:
            $ref: "#/components/schemas/address"
          example: tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
      responses:
        200:
          description: Vote position found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/voteResponse"
              example:
                vault: tS1PEGC4VsovkDgib1MD3eYNv5BL2FAC3i
                proposalId: 1
                voter: tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
                vote: "30000.00000000"
                balance: "30000.00000000"
                inFavor: true
        400:
          description: The request is not valid
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/validationProblemDetails"
              example:
                type: https://httpstatuses.com/400
                title: One or more validation errors occurred.
                status: 400
                errors:
                  vault:
                    - Invalid address.
                extensions:
                  traceId: 00-00000000000000000000000000000000-0000000000000000-00
        404:
          description: Vault, proposal or voter not found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/problemDetails"
              example:
                type: https://httpstatuses.com/404
                title: Not Found
                status: 404
                extensions:
                  traceId: 00-00000000000000000000000000000000-0000000000000000-00
        429:
          $ref: "#/components/responses/TooManyRequests"
        500:
          $ref: "#/components/responses/InternalServerError"
  /vault-governances/{vault}/votes:
    get:
      tags:
        - Vaults
      summary: Get Vault Proposal Votes
      description: Retrieves details for votes that have been made against proposals within tracked Opdex vaults. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
      operationId: getVotes
      parameters:
        - name: vault
          in: path
          description: Address of the vault
          required: true
          schema:
            $ref: "#/components/schemas/address"
          example: tS1PEGC4VsovkDgib1MD3eYNv5BL2FAC3i
        - name: proposalId
          in: query
          description: Id of the proposal in the vault
          schema:
            type: integer
            minimum: 1
          example: 1
        - name: voter
          in: query
          description: Address of the voter
          schema:
            $ref: "#/components/schemas/address"
          example: tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
        - name: includeZeroBalances
          in: query
          description: Includes zero balances if true, otherwise filters out zero balances if false
          schema:
            type: boolean
          example: true
        - name: direction
          in: query
          description: Order direction of the results
          schema:
            $ref: "#/components/schemas/sortDirection"
          example: DESC
        - name: limit
          in: query
          description: Number of results per page
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 50
          example: 10
        - name: cursor
          in: query
          description: Reference of the requested page, returned by a previous call
          schema:
            type: string
      responses:
        200:
          description: Vote results found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/votesResponse"
              example:
                results:
                  - vault: tS1PEGC4VsovkDgib1MD3eYNv5BL2FAC3i
                    proposalId: 2
                    voter: tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
                    vote: "8000.00000000"
                    balance: "8000.00000000"
                    inFavor: false
                  - vault: tS1PEGC4VsovkDgib1MD3eYNv5BL2FAC3i
                    proposalId: 1
                    voter: tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
                    vote: "30000.00000000"
                    balance: "0.00000000"
                    inFavor: true
                paging: {}
        400:
          description: The request is not valid
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/validationProblemDetails"
              example:
                type: https://httpstatuses.com/400
                title: One or more validation errors occurred.
                status: 400
                errors:
                  vault:
                    - Invalid address.
                extensions:
                  traceId: 00-00000000000000000000000000000000-0000000000000000-00
        404:
          $ref: "#/components/responses/VaultNotFound"
        429:
          $ref: "#/components/responses/TooManyRequests"
        500:
          $ref: "#/components/responses/InternalServerError"
