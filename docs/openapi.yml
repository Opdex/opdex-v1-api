openapi: 3.0.1
info:
  title: Opdex Platform API
  version: 1.0.0
  contact:
    name: Opdex Contributors
    url: https://github.com/Opdex/opdex-v1-api
  description: The Opdex Platform Web API is an interface for querying information from the Opdex contract indexer and quoting Opdex smart contract transactions. The Opdex contract indexer is a job that continually runs and stores relevant broadcast transaction data, in a way that represents the current known state of the Opdex protocol at the present time.
  license:
    name: MIT
    url: https://github.com/Opdex/opdex-v1-api/blob/main/LICENSE
servers:
  - url: https://v1-test-api.opdex.com/v1
tags:
  - name: Authentication
    description: Authenticate with the API
  - name: Blocks
    description: Retrieve indexed block data
  - name: Indexer
    description: Interact with the indexer
  - name: Liquidity Pools
    description: Interact with standard and staking liquidity pools
  - name: Markets
    description: Manage and query standard and staking markets
  - name: Market Tokens
    description: Quote swaps and query token data within markets
  - name: Mining Governances
    description: Quote mining governance distribution
  - name: Mining Pools
    description: Quote and query liquidity mining pools
  - name: Status
    description: View health and API status
  - name: Tokens
    description: Manage and query tracked tokens
  - name: Transactions
    description: View and build transactions
  - name: Vaults
    description: Interact with an Opdex vault DAO
  - name: Wallets
    description: Track and query token balances
components:
  securitySchemes:
    opdexAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Authorize with a bearer token obtained from SignalR
  responses:
    LiquidityPoolNotFound:
      description: Liquidity pool not found
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/problemDetails"
          example:
            type: https://httpstatuses.com/404
            title: Not Found
            status: 404
            extensions:
              traceId: 00-00000000000000000000000000000000-0000000000000000-00
    MiningPoolNotFound:
      description: Mining pool not found
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/problemDetails"
          example:
            type: https://httpstatuses.com/404
            title: Not Found
            status: 404
            extensions:
              traceId: 00-00000000000000000000000000000000-0000000000000000-00
    MiningGovernanceNotFound:
      description: Mining governance not found
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/problemDetails"
          example:
            type: https://httpstatuses.com/404
            title: Not Found
            status: 404
            extensions:
              traceId: 00-00000000000000000000000000000000-0000000000000000-00
    TokenNotFound:
      description: Token not found
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/problemDetails"
          example:
            type: https://httpstatuses.com/404
            title: Not Found
            status: 404
            extensions:
              traceId: 00-00000000000000000000000000000000-0000000000000000-00
    MarketNotFound:
      description: Market not found
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/problemDetails"
          example:
            type: https://httpstatuses.com/404
            title: Not Found
            status: 404
            extensions:
              traceId: 00-00000000000000000000000000000000-0000000000000000-00
    MarketOrTokenNotFound:
      description: Market or token not found
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/problemDetails"
          example:
            type: https://httpstatuses.com/404
            title: Not Found
            detail: Token not found.
            status: 404
            extensions:
              traceId: 00-00000000000000000000000000000000-0000000000000000-00
    VaultNotFound:
      description: Vault not found
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/problemDetails"
          example:
            type: https://httpstatuses.com/404
            title: Not Found
            status: 404
            extensions:
              traceId: 00-00000000000000000000000000000000-0000000000000000-00
    VaultOrProposalNotFound:
      description: Vault or proposal not found
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/problemDetails"
          example:
            type: https://httpstatuses.com/404
            title: Not Found
            status: 404
            extensions:
              traceId: 00-00000000000000000000000000000000-0000000000000000-00
    BlockNotFound:
      description: Block not found
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/problemDetails"
          example:
            type: https://httpstatuses.com/404
            title: Not Found
            detail: Block not found.
            status: 404
            extensions:
              traceId: 00-00000000000000000000000000000000-0000000000000000-00
    Unauthorized:
      description: Unauthorized
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/problemDetails"
          example:
            type: https://httpstatuses.com/401
            title: Unauthorized
            status: 401
            extensions:
              traceId: 00-00000000000000000000000000000000-0000000000000000-00
    TooManyRequests:
      description: Too many requests
      headers:
        Retry-After:
          schema:
            type: integer
            format: int32
            minimum: 0
            example: 30
          description: Indicates how many seconds to wait before making a follow-up request
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/problemDetails"
          example:
            type: https://httpstatuses.com/429
            title: Too Many Requests
            detail: "Quota exceeded. Maximum allowed: 500 per 60s. Please try again in 30 second(s)."
            status: 429
            extensions:
              traceId: 00-00000000000000000000000000000000-0000000000000000-00
    InternalServerError:
      description: Unexpected error occurred
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/problemDetails"
          example:
            type: https://httpstatuses.com/500
            title: Internal Server Error
            status: 500
            extensions:
              traceId: 00-00000000000000000000000000000000-0000000000000000-00
    UnderMaintenance:
      description: Under maintenance
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/problemDetails"
          example:
            type: https://httpstatuses.com/503
            title: Service Unavailable
            status: 503
            detail: Currently undergoing maintenance
            extensions:
              traceId: 00-00000000000000000000000000000000-0000000000000000-00
  schemas:
    problemDetails:
      type: object
      properties:
        type:
          type: string
          description: A URI reference that identifies the problem type
        title:
          type: string
          description: A short, human-readable summary of the problem type
        status:
          type: integer
          format: int32
          description: The HTTP status code generated by the origin server for this occurrence of the problem
        detail:
          type: string
          description: A human-readable explanation specific to this occurrence of the problem
        instance:
          type: string
          description: A URI reference that identifies the specific occurrence of the problem
        extensions:
          type: object
          additionalProperties:
            nullable: true
          description: Non-standard problem details extensions that may be ignored
      description: Carries machine-readable details of errors in a HTTP response
    validationProblemDetails:
      allOf:
        - $ref: "#/components/schemas/problemDetails"
        - type: object
          properties:
            errors:
              type: object
              additionalProperties:
                type: array
                items:
                  type: string
                  description: Validation error message
                minItems: 1
              description: Contains invalid properties and associated error messages
    address:
      type: string
      description: An address on the Cirrus network
      minLength: 30
      maxLength: 42
      pattern: ^[a-km-zA-HJ-NP-Z1-9]+$
    crs:
      type: string
      pattern: CRS
      title: CRS
    tokenAddress:
      description: Either CRS or an SRC token
      oneOf:
        - $ref: "#/components/schemas/address"
        - $ref: "#/components/schemas/crs"
    fixedDecimal:
      type: string
      description: Decimal value with uncapped precision and size
      pattern: ^\d*\.\d{1,18}$
    sha256:
      type: string
      description: SHA256 hash value
      pattern: ^[A-Fa-f0-9]{64}$
      minLength: 64
      maxLength: 64
    tokenOrderByType:
      type: string
      description: Property to sort tokens by
      enum:
        - CreatedBlock
        - Name
        - Symbol
        - DailyPriceChangePercent
        - PriceUsd
      default: CreatedBlock
    stakingStatusFilter:
      type: string
      description: Staking status filter
      enum:
        - Any
        - Enabled
        - Disabled
      default: Any
    miningStatusFilter:
      description: Mining status filter
      enum:
        - Any
        - Enabled
        - Disabled
      default: Any
    nominationStatusFilter:
      description: Nomination status filter
      enum:
        - Any
        - Nominated
        - Excluded
      default: Any
    miningActivityStatus:
      description: Mining activity status filter
      enum:
        - Any
        - Active
        - Inactive
      default: Any
    liquidityPoolOrderByType:
      type: string
      description: Property to sort liquidity pools by
      enum:
        - CreatedBlock
        - Liquidity
        - Volume
        - StakingWeight
        - Name
      default: CreatedBlock
    marketOrderByType:
      type: string
      description: Property to sort markets by
      enum:
        - CreatedBlock
        - LiquidityUsd
        - StakingUsd
        - StakingWeight
        - VolumeUsd
        - MarketRewardsDailyUsd
        - ProviderRewardsDailyUsd
        - DailyLiquidityUsdChangePercent
        - DailyStakingUsdChangePercent
        - DailyStakingWeightChangePercent
      default: CreatedBlock
    marketTypeFilter:
      type: string
      description: Market type filter
      enum:
        - Any
        - Staking
        - Standard
      default: Any
    interval:
      type: string
      description: Snapshot step interval
      enum:
        - 1H
        - 1D
      default: 1H
    sortDirection:
      type: string
      description: Sort order
      enum:
        - ASC
        - DESC
      default: DESC
    marketPermission:
      type: string
      description: Market permission type
      enum:
        - CreatePool
        - Trade
        - Provide
        - SetPermissions
    proposalType:
      type: string
      description: Type of vault proposal
      enum:
        - Create
        - Revoke
        - TotalPledgeMinimum
        - TotalVoteMinimum
    proposalStatus:
      type: string
      description: Status of vault proposal
      enum:
        - Pledge
        - Vote
        - Complete
    certificateStatus:
      type: string
      description: Status of vault certificate
      enum:
        - Vesting
        - Redeemed
        - Revoked
    tokenAttribute:
      type: string
      description: Attribute that can be applied to a token
      enum:
        - Provisional
        - NonProvisional
        - Staking
        - Security
        - Interflux
    tokenAttributeFilter:
      type: string
      description: Token attribute filter for a request
      enum:
        - Provisional
        - NonProvisional
        - Staking
    externalChain:
      type: string
      description: External chain name
      enum:
        - Ethereum
    chainFilter:
      type: string
      description: Chain type filter
      enum:
        - Cirrus
        - Ethereum
    transactionEventType:
      type: string
      description: Opdex event type identifier
      enum:
        - CreateMarketEvent
        - SetPendingDeployerOwnershipEvent
        - ClaimPendingDeployerOwnershipEvent
        - CreateLiquidityPoolEvent
        - SetPendingMarketOwnershipEvent
        - ClaimPendingMarketOwnershipEvent
        - ChangeMarketPermissionEvent
        - AddLiquidityEvent
        - RemoveLiquidityEvent
        - SwapEvent
        - ReservesChangeEvent
        - StartStakingEvent
        - StopStakingEvent
        - CollectStakingRewardsEvent
        - StartMiningEvent
        - StopMiningEvent
        - CollectMiningRewardsEvent
        - EnableMiningEvent
        - ApprovalEvent
        - TransferEvent
        - DistributionEvent
        - RewardMiningPoolEvent
        - NominationEvent
        - CreateVaultCertificateEvent
        - RevokeVaultCertificateEvent
        - RedeemVaultCertificateEvent
        - CreateVaultProposalEvent
        - CompleteVaultProposalEvent
        - VaultProposalPledgeEvent
        - VaultProposalWithdrawPledgeEvent
        - VaultProposalVoteEvent
        - VaultProposalWithdrawVoteEvent
        - SetInterfluxCustodianEvent
        - SupplyChangeEvent
    transactionEvent:
      description: An Opdex transaction event produced by contract execution
      oneOf:
        - $ref: "#/components/schemas/createMarketEvent"
        - $ref: "#/components/schemas/setPendingDeployerOwnershipEvent"
        - $ref: "#/components/schemas/claimPendingDeployerOwnershipEvent"
        - $ref: "#/components/schemas/createLiquidityPoolEvent"
        - $ref: "#/components/schemas/setPendingMarketOwnershipEvent"
        - $ref: "#/components/schemas/claimPendingMarketOwnershipEvent"
        - $ref: "#/components/schemas/changeMarketPermissionEvent"
        - $ref: "#/components/schemas/addLiquidityEvent"
        - $ref: "#/components/schemas/removeLiquidityEvent"
        - $ref: "#/components/schemas/reservesChangeEvent"
        - $ref: "#/components/schemas/swapEvent"
        - $ref: "#/components/schemas/startStakingEvent"
        - $ref: "#/components/schemas/stopStakingEvent"
        - $ref: "#/components/schemas/collectStakingRewardsEvent"
        - $ref: "#/components/schemas/startMiningEvent"
        - $ref: "#/components/schemas/stopMiningEvent"
        - $ref: "#/components/schemas/collectMiningRewardsEvent"
        - $ref: "#/components/schemas/enableMiningEvent"
        - $ref: "#/components/schemas/approvalEvent"
        - $ref: "#/components/schemas/transferEvent"
        - $ref: "#/components/schemas/distributionEvent"
        - $ref: "#/components/schemas/rewardMiningPoolEvent"
        - $ref: "#/components/schemas/nominationEvent"
        - $ref: "#/components/schemas/createVaultCertificateEvent"
        - $ref: "#/components/schemas/revokeVaultCertificateEvent"
        - $ref: "#/components/schemas/createVaultProposalEvent"
        - $ref: "#/components/schemas/completeVaultProposalEvent"
        - $ref: "#/components/schemas/vaultProposalPledgeEvent"
        - $ref: "#/components/schemas/vaultProposalWithdrawPledgeEvent"
        - $ref: "#/components/schemas/vaultProposalVoteEvent"
        - $ref: "#/components/schemas/vaultProposalWithdrawVoteEvent"
        - $ref: "#/components/schemas/setInterfluxCustodianEvent"
        - $ref: "#/components/schemas/supplyChangeEvent"
      discriminator:
        propertyName: eventType
        mapping:
          createMarketEvent: "#/components/schemas/createMarketEvent"
          setPendingDeployerOwnershipEvent: "#/components/schemas/setPendingDeployerOwnershipEvent"
          claimPendingDeployerOwnershipEvent: "#/components/schemas/claimPendingDeployerOwnershipEvent"
          createLiquidityPoolEvent: "#/components/schemas/createLiquidityPoolEvent"
          setPendingMarketOwnershipEvent: "#/components/schemas/setPendingMarketOwnershipEvent"
          claimPendingMarketOwnershipEvent: "#/components/schemas/claimPendingMarketOwnershipEvent"
          changeMarketPermissionEvent: "#/components/schemas/changeMarketPermissionEvent"
          addLiquidityEvent: "#/components/schemas/addLiquidityEvent"
          removeLiquidityEvent: "#/components/schemas/removeLiquidityEvent"
          reservesChangeEvent: "#/components/schemas/reservesChangeEvent"
          swapEvent: "#/components/schemas/swapEvent"
          startStakingEvent: "#/components/schemas/startStakingEvent"
          stopStakingEvent: "#/components/schemas/stopStakingEvent"
          collectStakingRewardsEvent: "#/components/schemas/collectStakingRewardsEvent"
          startMiningEvent: "#/components/schemas/startMiningEvent"
          stopMiningEvent: "#/components/schemas/stopMiningEvent"
          collectMiningRewardsEvent: "#/components/schemas/collectMiningRewardsEvent"
          enableMiningEvent: "#/components/schemas/enableMiningEvent"
          approvalEvent: "#/components/schemas/approvalEvent"
          transferEvent: "#/components/schemas/transferEvent"
          distributionEvent: "#/components/schemas/distributionEvent"
          rewardMiningPoolEvent: "#/components/schemas/rewardMiningPoolEvent"
          nominationEvent: "#/components/schemas/nominationEvent"
          createVaultCertificateEvent: "#/components/schemas/createVaultCertificateEvent"
          revokeVaultCertificateEvent: "#/components/schemas/revokeVaultCertificateEvent"
          createVaultProposalEvent: "#/components/schemas/createVaultProposalEvent"
          completeVaultProposalEvent: "#/components/schemas/completeVaultProposalEvent"
          vaultProposalPledgeEvent: "#/components/schemas/vaultProposalPledgeEvent"
          vaultProposalWithdrawPledgeEvent: "#/components/schemas/vaultProposalWithdrawPledgeEvent"
          vaultProposalVoteEvent: "#/components/schemas/vaultProposalVoteEvent"
          vaultProposalWithdrawVoteEvent: "#/components/schemas/vaultProposalWithdrawVoteEvent"
          setInterfluxCustodianEvent: "#/components/schemas/setInterfluxCustodianEvent"
          supplyChangeEvent: "#/components/schemas/supplyChangeEvent"
    createMarketEvent:
      type: object
      description: Indicates a market was created
      properties:
        market:
          $ref: "#/components/schemas/address"
          description: Address of the new market
        owner:
          $ref: "#/components/schemas/address"
          description: Address of the market owner
        router:
          $ref: "#/components/schemas/address"
          description: Address of the market router
        authPoolCreators:
          type: boolean
          description: Whether the market requires authorization to create a pool
        authProviders:
          type: boolean
          description: Whether the market requires authorization to provide liquidity
        authTraders:
          type: boolean
          description: Whether the market requires authorization to swap
        transactionFeePercent:
          $ref: "#/components/schemas/fixedDecimal"
          pattern: ^0.[0-9]|1.0$
          description: Swap fee percentage amount
        stakingToken:
          $ref: "#/components/schemas/address"
          description: Address of the staking token
        enableMarketFee:
          type: boolean
          description: Whether the market fee is enabled
        eventType:
          $ref: "#/components/schemas/transactionEventType"
          description: Event discriminator
        contract:
          $ref: "#/components/schemas/address"
          description: Address of the market deployer
        sortOrder:
          type: integer
          format: int32
          minimum: 0
          description: Index to sort event order
    setPendingDeployerOwnershipEvent:
      type: object
      description: Indicates a change in pending owner for a market deployer
      properties:
        from:
          $ref: "#/components/schemas/address"
          description: Address of previous pending owner
        to:
          $ref: "#/components/schemas/address"
          description: Address of the new pending owner
        eventType:
          $ref: "#/components/schemas/transactionEventType"
          description: Event discriminator
        contract:
          $ref: "#/components/schemas/address"
          description: Address of the market deployer
        sortOrder:
          type: integer
          format: int32
          minimum: 0
          description: Index to sort event order
    claimPendingDeployerOwnershipEvent:
      type: object
      description: Indicates a change in owner for a market deployer
      properties:
        from:
          $ref: "#/components/schemas/address"
          description: Address of previous owner
        to:
          $ref: "#/components/schemas/address"
          description: Address of the new owner
        eventType:
          $ref: "#/components/schemas/transactionEventType"
          description: Event discriminator
        contract:
          $ref: "#/components/schemas/address"
          description: Address of the market deployer
        sortOrder:
          type: integer
          format: int32
          minimum: 0
          description: Index to sort event order
    createLiquidityPoolEvent:
      type: object
      description: Indicates a new liquidity pool was created
      properties:
        token:
          $ref: "#/components/schemas/address"
          description: Address of the SRC token in the pool
        liquidityPool:
          $ref: "#/components/schemas/address"
          description: Address of the newly created liquidity pool
        eventType:
          $ref: "#/components/schemas/transactionEventType"
          description: Event discriminator
        contract:
          $ref: "#/components/schemas/address"
          description: Address of the market
        sortOrder:
          type: integer
          format: int32
          minimum: 0
          description: Index to sort event order
    setPendingMarketOwnershipEvent:
      type: object
      description: Indicates a change in pending owner for a market
      properties:
        from:
          $ref: "#/components/schemas/address"
          description: Address of previous pending owner
        to:
          $ref: "#/components/schemas/address"
          description: Address of the new pending owner
        eventType:
          $ref: "#/components/schemas/transactionEventType"
          description: Event discriminator
        contract:
          $ref: "#/components/schemas/address"
          description: Address of the market
        sortOrder:
          type: integer
          format: int32
          minimum: 0
          description: Index to sort event order
    claimPendingMarketOwnershipEvent:
      type: object
      description: Indicates a change in owner for a market
      properties:
        from:
          $ref: "#/components/schemas/address"
          description: Address of previous owner
        to:
          $ref: "#/components/schemas/address"
          description: Address of the new owner
        eventType:
          $ref: "#/components/schemas/transactionEventType"
          description: Event discriminator
        contract:
          $ref: "#/components/schemas/address"
          description: Address of the market
        sortOrder:
          type: integer
          format: int32
          minimum: 0
          description: Index to sort event order
    changeMarketPermissionEvent:
      type: object
      description: Indicates a change in permissions for a user address
      properties:
        address:
          $ref: "#/components/schemas/address"
          description: Address for which permissions were updated
        permission:
          $ref: "#/components/schemas/marketPermission"
          description: Permission type
        isAuthorized:
          type: boolean
          description: If the address is granted the permission
        eventType:
          $ref: "#/components/schemas/transactionEventType"
          description: Event discriminator
        contract:
          $ref: "#/components/schemas/address"
          description: Address of the market
        sortOrder:
          type: integer
          format: int32
          minimum: 0
          description: Index to sort event order
    addLiquidityEvent:
      type: object
      description: Indicates liquidity was provided to a pool
      properties:
        amountCrs:
          $ref: "#/components/schemas/fixedDecimal"
          description: Amount of CRS tokens provided
        amountSrc:
          $ref: "#/components/schemas/fixedDecimal"
          description: Amount of SRC tokens provided
        amountLpt:
          $ref: "#/components/schemas/fixedDecimal"
          description: Amount of OLPT tokens received
        tokenSrc:
          $ref: "#/components/schemas/address"
          description: Address of the SRC token
        tokenLp:
          $ref: "#/components/schemas/address"
          description: Address of the OLPT token
        tokenLpTotalSupply:
          $ref: "#/components/schemas/fixedDecimal"
          description: Total supply of the OLPT token
        eventType:
          $ref: "#/components/schemas/transactionEventType"
          description: Event discriminator
        contract:
          $ref: "#/components/schemas/address"
          description: Address of the liquidity pool
        sortOrder:
          type: integer
          format: int32
          minimum: 0
          description: Index to sort event order
    removeLiquidityEvent:
      type: object
      description: Indicates liquidity was removed from a pool
      properties:
        amountCrs:
          $ref: "#/components/schemas/fixedDecimal"
          description: Amount of CRS tokens removed
        amountSrc:
          $ref: "#/components/schemas/fixedDecimal"
          description: Amount of SRC tokens removed
        amountLpt:
          $ref: "#/components/schemas/fixedDecimal"
          description: Amount of OLPT tokens burned
        tokenSrc:
          $ref: "#/components/schemas/address"
          description: Address of the SRC token
        tokenLp:
          $ref: "#/components/schemas/address"
          description: Address of the OLPT token
        tokenLpTotalSupply:
          $ref: "#/components/schemas/fixedDecimal"
          description: Total supply of the OLPT token
        eventType:
          $ref: "#/components/schemas/transactionEventType"
          description: Event discriminator
        contract:
          $ref: "#/components/schemas/address"
          description: Address of the liquidity pool
        sortOrder:
          type: integer
          format: int32
          minimum: 0
          description: Index to sort event order
    reservesChangeEvent:
      type: object
      description: Indicates the reserves in a liquidity pool have changed
      properties:
        crs:
          $ref: "#/components/schemas/fixedDecimal"
          description: Amount of CRS token in reserves
        src:
          $ref: "#/components/schemas/fixedDecimal"
          description: Amount of SRC token in reserves
        eventType:
          $ref: "#/components/schemas/transactionEventType"
          description: Event discriminator
        contract:
          $ref: "#/components/schemas/address"
          description: Address of the SRC token
        sortOrder:
          type: integer
          format: int32
          minimum: 0
          description: Index to sort event order
    approvalEvent:
      type: object
      description: Indicates a token spending approval happened
      properties:
        owner:
          $ref: "#/components/schemas/address"
          description: Address of the token holder
        spender:
          $ref: "#/components/schemas/address"
          description: Address approved to spend the tokens
        amount:
          $ref: "#/components/schemas/fixedDecimal"
          description: Amount of tokens approved to spend
        eventType:
          $ref: "#/components/schemas/transactionEventType"
          description: Event discriminator
        contract:
          $ref: "#/components/schemas/address"
          description: Address of the SRC token
        sortOrder:
          type: integer
          format: int32
          minimum: 0
          description: Index to sort event order
    distributionEvent:
      type: object
      description: Indicates governance token distribution took place
      properties:
        vaultAmount:
          $ref: "#/components/schemas/fixedDecimal"
          description: Amount of tokens distributed to the vault
        miningGovernanceAmount:
          $ref: "#/components/schemas/fixedDecimal"
          description: Amount of tokens distributed to the mining governance
        periodIndex:
          type: integer
          format: int32
          minimum: 0
          description: Distribution number
        totalSupply:
          $ref: "#/components/schemas/fixedDecimal"
          description: Total amount of governance tokens distributed
        nextDistributionBlock:
          type: integer
          format: uint64
          minimum: 1
          description: Block number of the next distribution
        eventType:
          $ref: "#/components/schemas/transactionEventType"
          description: Event discriminator
        contract:
          $ref: "#/components/schemas/address"
          description: Address of the SRC token
        sortOrder:
          type: integer
          format: int32
          minimum: 0
          description: Index to sort event order
    transferEvent:
      type: object
      description: Indicates a transfer happened
      properties:
        from:
          $ref: "#/components/schemas/address"
          description: Address tokens were transferred from
        to:
          $ref: "#/components/schemas/address"
          description: Address tokens were transferred to
        amount:
          $ref: "#/components/schemas/fixedDecimal"
          description: Token amount transferred
        eventType:
          $ref: "#/components/schemas/transactionEventType"
          description: Event discriminator
        contract:
          $ref: "#/components/schemas/address"
          description: Address of the contract performing the transfer
        sortOrder:
          type: integer
          format: int32
          minimum: 0
          description: Index to sort event order
    swapEvent:
      type: object
      description: Indicates a token swap happened
      properties:
        sender:
          $ref: "#/components/schemas/address"
          description: Address of the market router
        to:
          $ref: "#/components/schemas/address"
          description: Address tokens were transferred to
        amountCrsIn:
          $ref: "#/components/schemas/fixedDecimal"
          description: Amount of CRS tokens input
        amountSrcIn:
          $ref: "#/components/schemas/fixedDecimal"
          description: Amount of SRC tokens input
        amountCrsOut:
          $ref: "#/components/schemas/fixedDecimal"
          description: Amount of CRS tokens output
        amountSrcOut:
          $ref: "#/components/schemas/fixedDecimal"
          description: Amount of SRC tokens output
        srcToken:
          $ref: "#/components/schemas/address"
          description: Address of the token swapped
        eventType:
          $ref: "#/components/schemas/transactionEventType"
          description: Event discriminator
        contract:
          $ref: "#/components/schemas/address"
          description: Address of the liquidity pool
        sortOrder:
          type: integer
          format: int32
          minimum: 0
          description: Index to sort event order
    startStakingEvent:
      type: object
      description: Indicates an address began staking in a liquidity pool
      properties:
        staker:
          $ref: "#/components/schemas/address"
          description: Address of the staker
        amount:
          $ref: "#/components/schemas/fixedDecimal"
          description: Amount of staking tokens added
        stakerBalance:
          $ref: "#/components/schemas/fixedDecimal"
          description: Total staking balance in the pool for the staker
        totalStaked:
          $ref: "#/components/schemas/fixedDecimal"
          description: Total amount of tokens staking in the pool
        eventType:
          $ref: "#/components/schemas/transactionEventType"
          description: Event discriminator
        contract:
          $ref: "#/components/schemas/address"
          description: Address of the liquidity pool
        sortOrder:
          type: integer
          format: int32
          minimum: 0
          description: Index to sort event order
    stopStakingEvent:
      type: object
      description: Indicates an address stopped staking in a liquidity pool
      properties:
        staker:
          $ref: "#/components/schemas/address"
          description: Address of the staker
        amount:
          $ref: "#/components/schemas/fixedDecimal"
          description: Amount of staking tokens removed
        stakerBalance:
          $ref: "#/components/schemas/fixedDecimal"
          description: Total staking balance in the pool for the staker
        totalStaked:
          $ref: "#/components/schemas/fixedDecimal"
          description: Total amount of tokens staking in the pool
        eventType:
          $ref: "#/components/schemas/transactionEventType"
          description: Event discriminator
        contract:
          $ref: "#/components/schemas/address"
          description: Address of the liquidity pool
        sortOrder:
          type: integer
          format: int32
          minimum: 0
          description: Index to sort event order
    collectStakingRewardsEvent:
      type: object
      description: Indicates a staker collected rewards from a liquidity pool
      properties:
        staker:
          $ref: "#/components/schemas/address"
          description: Address of the staker
        amount:
          $ref: "#/components/schemas/fixedDecimal"
          description: Staking reward
        eventType:
          $ref: "#/components/schemas/transactionEventType"
          description: Event discriminator
        contract:
          $ref: "#/components/schemas/address"
          description: Address of the liquidity pool
        sortOrder:
          type: integer
          format: int32
          minimum: 0
          description: Index to sort event order
    startMiningEvent:
      type: object
      description: Indicates an address started mining in a mining pool
      properties:
        staker:
          $ref: "#/components/schemas/address"
          description: Address of the miner
        amount:
          $ref: "#/components/schemas/fixedDecimal"
          description: Amount of mining tokens added
        minerBalance:
          $ref: "#/components/schemas/fixedDecimal"
          description: Total mining balance in the pool for the miner
        totalSupply:
          $ref: "#/components/schemas/fixedDecimal"
          description: Total amount of tokens mining in the pool
        eventType:
          $ref: "#/components/schemas/transactionEventType"
          description: Event discriminator
        contract:
          $ref: "#/components/schemas/address"
          description: Address of the mining pool
        sortOrder:
          type: integer
          format: int32
          minimum: 0
          description: Index to sort event order
    stopMiningEvent:
      type: object
      description: Indicates an address stopped mining in a mining pool
      properties:
        staker:
          $ref: "#/components/schemas/address"
          description: Address of the miner
        amount:
          $ref: "#/components/schemas/fixedDecimal"
          description: Amount of mining tokens removed
        minerBalance:
          $ref: "#/components/schemas/fixedDecimal"
          description: Total mining balance in the pool for the miner
        totalSupply:
          $ref: "#/components/schemas/fixedDecimal"
          description: Total amount of tokens mining in the pool
        eventType:
          $ref: "#/components/schemas/transactionEventType"
          description: Event discriminator
        contract:
          $ref: "#/components/schemas/address"
          description: Address of the mining pool
        sortOrder:
          type: integer
          format: int32
          minimum: 0
          description: Index to sort event order
    collectMiningRewardsEvent:
      type: object
      description: Indicates a miner collected rewards from a mining pool
      properties:
        staker:
          $ref: "#/components/schemas/address"
          description: Address of the miner
        amount:
          $ref: "#/components/schemas/fixedDecimal"
          description: Mining reward
        eventType:
          $ref: "#/components/schemas/transactionEventType"
          description: Event discriminator
        contract:
          $ref: "#/components/schemas/address"
          description: Address of the mining pool
        sortOrder:
          type: integer
          format: int32
          minimum: 0
          description: Index to sort event order
    enableMiningEvent:
      type: object
      description: Indicates a liquidity mining was enabled for a liquidity pool
      properties:
        amount:
          $ref: "#/components/schemas/fixedDecimal"
          description: Amount of tokens rewarded to the pool to be mined
        rewardRate:
          $ref: "#/components/schemas/fixedDecimal"
          description: Amount of tokens mined per block
        miningPeriodEndBlock:
          type: integer
          format: uint64
          minimum: 1
          description: Block number that the mining period ends
        eventType:
          $ref: "#/components/schemas/transactionEventType"
          description: Event discriminator
        contract:
          $ref: "#/components/schemas/address"
          description: Address of the mining pool
        sortOrder:
          type: integer
          format: int32
          minimum: 0
          description: Index to sort event order
    rewardMiningPoolEvent:
      type: object
      description: Indicates a mining pool was rewarded with tokens
      properties:
        stakingPool:
          $ref: "#/components/schemas/address"
          description: Address of the staking pool
        miningPool:
          $ref: "#/components/schemas/address"
          description: Address of the mining pool
        amount:
          $ref: "#/components/schemas/fixedDecimal"
          description: Amount of tokens rewarded
        eventType:
          $ref: "#/components/schemas/transactionEventType"
          description: Event discriminator
        contract:
          $ref: "#/components/schemas/address"
          description: Address of the mining governance
        sortOrder:
          type: integer
          format: int32
          minimum: 0
          description: Index to sort event order
    nominationEvent:
      type: object
      description: Indicates a liquidity pool was nominated for mining
      properties:
        stakingPool:
          $ref: "#/components/schemas/address"
          description: Address of the staking pool
        miningPool:
          $ref: "#/components/schemas/address"
          description: Address of the mining pool
        weight:
          $ref: "#/components/schemas/fixedDecimal"
          description: Nomination staking weight
        eventType:
          $ref: "#/components/schemas/transactionEventType"
          description: Event discriminator
        contract:
          $ref: "#/components/schemas/address"
          description: Address of the mining governance
        sortOrder:
          type: integer
          format: int32
          minimum: 0
          description: Index to sort event order
    createVaultCertificateEvent:
      type: object
      description: Indicates a vault certificate was created
      properties:
        owner:
          $ref: "#/components/schemas/address"
          description: Address of the certificate owner
        amount:
          $ref: "#/components/schemas/fixedDecimal"
          description: Governance token certificate value
        vestedBlock:
          type: integer
          format: uint64
          minimum: 1
          description: Block number that the certificate is vested until
        eventType:
          $ref: "#/components/schemas/transactionEventType"
          description: Event discriminator
        contract:
          $ref: "#/components/schemas/address"
          description: Address of the vault
        sortOrder:
          type: integer
          format: int32
          minimum: 0
          description: Index to sort event order
    revokeVaultCertificateEvent:
      type: object
      description: Indicates a vault certificate was revoked
      properties:
        owner:
          $ref: "#/components/schemas/address"
          description: Address of the certificate owner
        oldAmount:
          $ref: "#/components/schemas/fixedDecimal"
          description: Previous governance token certificate value
        newAmount:
          $ref: "#/components/schemas/fixedDecimal"
          description: Remaining governance token certificate value
        vestedBlock:
          type: integer
          format: uint64
          minimum: 1
          description: Block number that the certificate is vested until
        eventType:
          $ref: "#/components/schemas/transactionEventType"
          description: Event discriminator
        contract:
          $ref: "#/components/schemas/address"
          description: Address of the vault
        sortOrder:
          type: integer
          format: int32
          minimum: 0
          description: Index to sort event order
    createVaultProposalEvent:
      type: object
      description: Indicates a vault proposal was created
      properties:
        proposalId:
          type: integer
          format: uint64
          minimum: 1
          description: Identifier for the proposal
        wallet:
          $ref: "#/components/schemas/address"
          description: Address of the proposal target
        amount:
          $ref: "#/components/schemas/fixedDecimal"
          description: Proposed governance token amount
        description:
          type: string
          maxLength: 200
          description: Description of the proposal
        type:
          $ref: "#/components/schemas/proposalType"
          description: Type of proposal
        status:
          $ref: "#/components/schemas/proposalStatus"
          description: Status of the proposal
        expiration:
          type: integer
          format: uint64
          minimum: 1
          description: Block number that the proposal expires
        eventType:
          $ref: "#/components/schemas/transactionEventType"
          description: Event discriminator
        contract:
          $ref: "#/components/schemas/address"
          description: Address of the vault
        sortOrder:
          type: integer
          format: int32
          minimum: 0
          description: Index to sort event order
    completeVaultProposalEvent:
      type: object
      description: Indicates a vault proposal was completed
      properties:
        proposalId:
          type: integer
          format: uint64
          minimum: 1
          description: Identifier for the proposal
        approved:
          type: boolean
          description: Whether the proposal was approved
        eventType:
          $ref: "#/components/schemas/transactionEventType"
          description: Event discriminator
        contract:
          $ref: "#/components/schemas/address"
          description: Address of the vault
        sortOrder:
          type: integer
          format: int32
          minimum: 0
          description: Index to sort event order
    vaultProposalPledgeEvent:
      type: object
      description: Indicates a pledge was made to a vault proposal
      properties:
        proposalId:
          type: integer
          format: uint64
          minimum: 1
          description: Identifier for the proposal
        pledger:
          $ref: "#/components/schemas/address"
          description: Address of the pledger
        pledgeAmount:
          $ref: "#/components/schemas/fixedDecimal"
          description: Amount of CRS pledged in this transaction
        pledgerAmount:
          $ref: "#/components/schemas/fixedDecimal"
          description: Total amount of CRS pledged by the pledger
        proposalPledgeAmount:
          $ref: "#/components/schemas/fixedDecimal"
          description: Total amount of CRS pledged to the proposal
        totalPledgeMinimumMet:
          type: boolean
          description: Whether the proposal has met the minimum pledge requirement
        eventType:
          $ref: "#/components/schemas/transactionEventType"
          description: Event discriminator
        contract:
          $ref: "#/components/schemas/address"
          description: Address of the vault
        sortOrder:
          type: integer
          format: int32
          minimum: 0
          description: Index to sort event order
    vaultProposalWithdrawPledgeEvent:
      type: object
      description: Indicates a pledge was withdrawn from a vault proposal
      properties:
        proposalId:
          type: integer
          format: uint64
          minimum: 1
          description: Identifier for the proposal
        pledger:
          $ref: "#/components/schemas/address"
          description: Address of the pledger
        withdrawAmount:
          $ref: "#/components/schemas/fixedDecimal"
          description: Amount of CRS withdrawn in this transaction
        pledgerAmount:
          $ref: "#/components/schemas/fixedDecimal"
          description: Total amount of CRS pledged by the pledger
        proposalPledgeAmount:
          $ref: "#/components/schemas/fixedDecimal"
          description: Total amount of CRS pledged to the proposal
        pledgeWithdrawn:
          type: boolean
          description: Whether the proposal is active and status is pledge
        eventType:
          $ref: "#/components/schemas/transactionEventType"
          description: Event discriminator
        contract:
          $ref: "#/components/schemas/address"
          description: Address of the vault
        sortOrder:
          type: integer
          format: int32
          minimum: 0
          description: Index to sort event order
    vaultProposalVoteEvent:
      type: object
      description: Indicates a vote was made on a vault proposal
      properties:
        proposalId:
          type: integer
          format: uint64
          minimum: 1
          description: Identifier for the proposal
        voter:
          $ref: "#/components/schemas/address"
          description: Address of the voter
        inFavor:
          type: boolean
          description: Whether the vote is in favor or against the proposal
        voteAmount:
          $ref: "#/components/schemas/fixedDecimal"
          description: Amount of CRS voted with in this transaction
        voterAmount:
          $ref: "#/components/schemas/fixedDecimal"
          description: Total amount of CRS voted with on the proposal by the voter
        proposalYesAmount:
          $ref: "#/components/schemas/fixedDecimal"
          description: Total amount of CRS voted with in favor of the proposal
        proposalNoAmount:
          $ref: "#/components/schemas/fixedDecimal"
          description: Total amount of CRS voted with against the proposal
        eventType:
          $ref: "#/components/schemas/transactionEventType"
          description: Event discriminator
        contract:
          $ref: "#/components/schemas/address"
          description: Address of the vault
        sortOrder:
          type: integer
          format: int32
          minimum: 0
          description: Index to sort event order
    vaultProposalWithdrawVoteEvent:
      type: object
      description: Indicates a vote was withdrawn from a vault proposal
      properties:
        proposalId:
          type: integer
          format: uint64
          minimum: 1
          description: Identifier for the proposal
        voter:
          $ref: "#/components/schemas/address"
          description: Address of the voter
        withdrawAmount:
          $ref: "#/components/schemas/fixedDecimal"
          description: Amount of CRS withdrawn in this transaction
        voterAmount:
          $ref: "#/components/schemas/fixedDecimal"
          description: Total amount of CRS voted with on the proposal by the voter
        proposalYesAmount:
          $ref: "#/components/schemas/fixedDecimal"
          description: Total amount of CRS voted with in favor of the proposal
        proposalNoAmount:
          $ref: "#/components/schemas/fixedDecimal"
          description: Total amount of CRS voted with against the proposal
        voteWithdrawn:
          type: boolean
          description: Whether the proposal is active and not completed
        eventType:
          $ref: "#/components/schemas/transactionEventType"
          description: Event discriminator
        contract:
          $ref: "#/components/schemas/address"
          description: Address of the vault
        sortOrder:
          type: integer
          format: int32
          minimum: 0
          description: Index to sort event order
    setInterfluxCustodianEvent:
      type: object
      description: Indiciates a change in custodian address for an Interflux token
      properties:
        from:
          $ref: "#/components/schemas/address"
          description: Address of previous custodian
        to:
          $ref: "#/components/schemas/address"
          description: Address of the new custodian
        eventType:
          $ref: "#/components/schemas/transactionEventType"
          description: Event discriminator
        contract:
          $ref: "#/components/schemas/address"
          description: Address of the SRC token
        sortOrder:
          type: integer
          format: int32
          minimum: 0
          description: Index to sort event order
    supplyChangeEvent:
      type: object
      description: Indiciates a change in total supply for an Interflux token
      properties:
        totalSupply:
          $ref: "#/components/schemas/fixedDecimal"
          description: New total supply of the SRC token
        eventType:
          $ref: "#/components/schemas/transactionEventType"
          description: Event discriminator
        contract:
          $ref: "#/components/schemas/address"
          description: Address of the SRC token
        sortOrder:
          type: integer
          format: int32
          minimum: 0
          description: Index to sort event order
    stratisSignatureAuthRequest:
      type: object
      required:
        - signature
        - publicKey
      properties:
        signature:
          type: string
          description: Signed Stratis ID
        publicKey:
          $ref: "#/components/schemas/address"
          description: Address of the message signer
    quoteCreateLiquidityPoolRequest:
      type: object
      description: Request to retrieve a create liquidity pool call quote
      required:
        - token
        - market
      properties:
        token:
          $ref: "#/components/schemas/address"
          description: Address of the SRC token in the pool
        market:
          $ref: "#/components/schemas/address"
          description: Address of the market containing the pool
    quoteAddLiquidityRequest:
      type: object
      description: Request to retrieve an add liquidity to pool call quote
      required:
        - amountCrs
        - amountSrc
        - amountCrsMin
        - amountSrcMin
        - recipient
      properties:
        amountCrs:
          $ref: "#/components/schemas/fixedDecimal"
          description: Amount of CRS to add to the pool
        amountSrc:
          $ref: "#/components/schemas/fixedDecimal"
          description: Amount of SRC tokens to add to the pool
        amountCrsMin:
          $ref: "#/components/schemas/fixedDecimal"
          description: Minimum amount of CRS to add to the pool, accounting for slippage
        amountSrcMin:
          $ref: "#/components/schemas/fixedDecimal"
          description: Minimum amount of SRC tokens to add to the pool, accounting for slippage
        recipient:
          $ref: "#/components/schemas/address"
          description: Address of the recipient for the liquidity pool tokens
        deadline:
          type: integer
          format: uint64
          minimum: 1
          description: Block number limit that the transaction is valid for
    liquidityAmountInQuoteRequest:
      type: object
      description: Request detailing desired liquidity deposit
      required:
        - amountIn
        - tokenIn
      properties:
        amountIn:
          $ref: "#/components/schemas/fixedDecimal"
          description: Amount of tokens to input to the pool
        tokenIn:
          $ref: "#/components/schemas/tokenAddress"
          description: Address of the token to input to the pool
    quoteRemoveLiquidityRequest:
      type: object
      description: Request to retrieve a remove liquidity from pool call quote
      required:
        - liquidity
        - amountCrsMin
        - amountSrcMin
        - recipient
      properties:
        liquidity:
          $ref: "#/components/schemas/fixedDecimal"
          description: Amount of liquidity pool tokens to remove
        amountCrsMin:
          $ref: "#/components/schemas/fixedDecimal"
          description: Minimum amount of CRS to remove from the pool, accounting for slippage
        amountSrcMin:
          $ref: "#/components/schemas/fixedDecimal"
          description: Minimum amount of SRC tokens to remove from the pool, accounting for slippage
        recipient:
          $ref: "#/components/schemas/address"
          description: Address of the recipient for the liquidated tokens
        deadline:
          type: integer
          format: uint64
          minimum: 1
          description: Block number limit that the transaction is valid for
    quoteSkimRequest:
      type: object
      description: Request to retrieve a skim liquidity pool call quote
      required:
        - recipient
      properties:
        recipient:
          $ref: "#/components/schemas/address"
          description: Address of the recipient for the skimmed tokens
    quoteStartStakingRequest:
      type: object
      description: Request to retrieve a start staking call quote
      required:
        - amount
      properties:
        amount:
          $ref: "#/components/schemas/fixedDecimal"
          description: Amount of governance tokens to stake in the pool
    quoteStopStakingRequest:
      type: object
      description: Request to retrieve a start staking call quote
      required:
        - liquidate
        - amount
      properties:
        liquidate:
          type: boolean
          description: Option to liquidate earned liquidity pool tokens back into the pool reserve tokens
        amount:
          $ref: "#/components/schemas/fixedDecimal"
          description: Amount of governance tokens to stop staking in the pool
    quoteCollectStakingRewardsRequest:
      type: object
      description: Request to retrieve a collect staking rewards call quote
      required:
        - liquidate
      properties:
        liquidate:
          type: boolean
          description: Option to liquidate earned liquidity pool tokens back into the pool reserve tokens
    quoteSwapTransactionRequest:
      type: object
      description: Request to retrieve a token swap call quote
      required:
        - tokenOut
        - tokenInAmount
        - tokenOutAmount
        - tokenInExactAmount
        - tokenInMaximumAmount
        - tokenOutMinimumAmount
        - recipient
      properties:
        tokenOut:
          $ref: "#/components/schemas/tokenAddress"
          description: Address of the output token
        tokenInAmount:
          $ref: "#/components/schemas/fixedDecimal"
          description: Amount of tokens to input
        tokenOutAmount:
          $ref: "#/components/schemas/fixedDecimal"
          description: Amount of tokens expected to receive
        tokenInExactAmount:
          type: boolean
          description: Token in amount is exact when true, otherwise token out amount is exact
        tokenInMaximumAmount:
          $ref: "#/components/schemas/fixedDecimal"
          description: Maximum amount of tokens willing to input
        tokenOutMinimumAmount:
          $ref: "#/components/schemas/fixedDecimal"
          description: Minimum amount of tokens acceptable to receive
        recipient:
          $ref: "#/components/schemas/address"
          description: Receipient of the swapped tokens
        deadline:
          type: integer
          format: uint64
          description: Block height the transaction should be mined at, which if not met causes the transaction to fail
          minimum: 0
    swapAmountInQuoteRequest:
      type: object
      description: Request to quote the expected amount of input tokens, to receive a desired output
      required:
        - tokenOut
        - tokenOutAmount
      properties:
        tokenOut:
          $ref: "#/components/schemas/tokenAddress"
          description: Address of the output token
        tokenOutAmount:
          $ref: "#/components/schemas/fixedDecimal"
          description: Amount of tokens desired to receive
    swapAmountOutQuoteRequest:
      type: object
      description: Request to quote the expected amount of output tokens, given a specific input
      required:
        - tokenIn
        - tokenInAmount
      properties:
        tokenIn:
          $ref: "#/components/schemas/tokenAddress"
          description: Address of the input token
        tokenInAmount:
          $ref: "#/components/schemas/fixedDecimal"
          description: Amount of tokens to input
    quoteApproveAllowanceRequest:
      type: object
      description: Request to retrieve a approve allowance call quote
      required:
        - amount
        - spender
      properties:
        amount:
          $ref: "#/components/schemas/fixedDecimal"
          description: Amount of SRC tokens to allow the spender to spend
        spender:
          $ref: "#/components/schemas/address"
          description: Address to be given the allowance
    quoteRewardMiningPoolsRequest:
      type: object
      description: Request to retrieve a reward mining pools call quote
      required:
        - fullDistribution
      properties:
        fullDistribution:
          type: boolean
          description: When true, determines all nominated mining pools receive token rewards, otherwise only one receives token rewards
    quoteStartMiningRequest:
      type: object
      description: Request to retrieve a start mining call quote
      required:
        - amount
      properties:
        amount:
          $ref: "#/components/schemas/fixedDecimal"
          description: Amount of tokens to start mining with
    quoteStopMiningRequest:
      type: object
      description: Request to retrieve a stop mining call quote
      required:
        - amount
      properties:
        amount:
          $ref: "#/components/schemas/fixedDecimal"
          description: Amount of tokens to stop mining with
    addTokenRequest:
      type: object
      description: Request to add a token to the Opdex indexer so that it can be tracked
      required:
        - token
      properties:
        token:
          $ref: "#/components/schemas/address"
          description: Address of the token to add
    notifyBroadcastRequest:
      type: object
      description: Request to notify that a transaction has been broadcast
      required:
        - transactionHash
      properties:
        transactionHash:
          $ref: "#/components/schemas/sha256"
          description: SHA-256 hash of the transaction
        walletAddress:
          $ref: "#/components/schemas/address"
          description: The transaction sender's wallet address
    quotedTransaction:
      type: object
      description: Quoted transaction that can be handed off to a wallet
      required:
        - sender
        - to
        - amount
        - method
        - callback
      properties:
        sender:
          $ref: "#/components/schemas/address"
          description: Address of the transaction sender
        to:
          $ref: "#/components/schemas/address"
          description: Address of smart contract
        amount:
          $ref: "#/components/schemas/fixedDecimal"
          description: Amount of CRS to send
        method:
          type: string
          description: Name of smart contract method to call
          minLength: 1
        parameters:
          type: array
          items:
            $ref: "#/components/schemas/labelledSmartContractParameter"
          description: An array of labelled parameters to pass to the method
        callback:
          type: string
          description: An endpoint that the broadcaster can call back to
          minLength: 1
    labelledSmartContractParameter:
      type: object
      description: Labelled serialized smart contract parameter
      required:
        - label
        - value
      properties:
        label:
          type: string
          description: User friendly smart contract property label
          minLength: 1
        value:
          type: string
          description: Serialized smart contract parameter
          pattern: ^[1-9][0-2]?#.+$
          minLength: 3
    quoteCreateStakingMarketRequest:
      type: object
      description: Request to retrieve a create staking market call quote
      required:
        - stakingToken
      properties:
        stakingToken:
          $ref: "#/components/schemas/address"
          description: Address of the staking token in the market
    quoteCreateStandardMarketRequest:
      type: object
      description: Request to retrieve a create standard market call quote
      required:
        - owner
        - transactionFeePercent
        - authPoolCreators
        - authLiquidityProviders
        - authTraders
        - enableMarketFee
      properties:
        owner:
          $ref: "#/components/schemas/address"
          description: Address to assign as owner of the market
        transactionFeePercent:
          $ref: "#/components/schemas/fixedDecimal"
          pattern: ^0.[0-9]|1.0$
          description: Swap fee percentage amount
        authPoolCreators:
          type: boolean
          description: If true, requires permissions to be assigned to create liquidity pools; or if false anyone can create a liquidity pool
        authLiquidityProviders:
          type: boolean
          description: If true, requires permissions to be assigned to provide liquidity; or if false anyone can provide liquidity
        authTraders:
          type: boolean
          description: If true, requires permissions to be assigned to swap; or if false anyone can swap
        enableMarketFee:
          type: boolean
          description: If true, enables the market fee; note this must be false if transaction fee is zero
    quoteSetMarketOwnerRequest:
      type: object
      description: Request to retrieve a set market owner call quote
      required:
        - owner
      properties:
        owner:
          $ref: "#/components/schemas/address"
          description: Address to assign as owner of the market
    quoteSetMarketPermissionsRequest:
      type: object
      description: Request to retrieve a set market permissions call quote
      required:
        - permission
        - authorize
      properties:
        permission:
          $ref: "#/components/schemas/marketPermission"
          description: Market permission type
        authorize:
          type: boolean
          description: If true, assigns the subject address the permission; otherwise revokes the permission if false
    quoteCollectMarketFeesRequest:
      type: object
      description: Request to retrieve a collect market fees call quote
      required:
        - token
        - amount
      properties:
        token:
          $ref: "#/components/schemas/address"
          description: Address of the SRC token used in the pool to collect fees from
        amount:
          $ref: "#/components/schemas/fixedDecimal"
          description: Amount of OLPT fees to collect
    quoteProposeCreateCertificateRequest:
      type: object
      description: Request to retrieve a propose create certificate call quote
      required:
        - owner
        - amount
        - description
      properties:
        owner:
          $ref: "#/components/schemas/address"
          description: Address to request be assigned the certificate
        amount:
          $ref: "#/components/schemas/fixedDecimal"
          description: Amount of governance tokens to request be assigned to the certificate from the vault
        description:
          type: string
          minLength: 1
          maxLength: 200
          description: Short description for the proposal; it is recommended to add a link with futher details
    quoteProposeRevokeCertificateRequest:
      type: object
      description: Request to retrieve a propose revoke certificate call quote
      required:
        - owner
        - description
      properties:
        owner:
          $ref: "#/components/schemas/address"
          description: Address of the certificate holder
        description:
          type: string
          minLength: 1
          maxLength: 200
          description: Short description for the proposal; it is recommended to add a link with futher details
    quoteProposeMinimumPledgeRequest:
      type: object
      description: Request to retrieve a propose change minimum pledge call quote
      required:
        - amount
        - description
      properties:
        amount:
          $ref: "#/components/schemas/fixedDecimal"
          description: Amount of CRS proposed to be the new minimum pledge amount
        description:
          type: string
          minLength: 1
          maxLength: 200
          description: Short description for the proposal; it is recommended to add a link with futher details
    quoteProposeMinimumVoteRequest:
      type: object
      description: Request to retrieve a propose change minimum vote call quote
      required:
        - amount
        - description
      properties:
        amount:
          $ref: "#/components/schemas/fixedDecimal"
          description: Amount of CRS proposed to be the new minimum vote amount
        description:
          type: string
          minLength: 1
          maxLength: 200
          description: Short description for the proposal; it is recommended to add a link with futher details
    quotePledgeRequest:
      type: object
      description: Request to retrieve a pledge call quote
      required:
        - amount
      properties:
        amount:
          $ref: "#/components/schemas/fixedDecimal"
          description: Amount of CRS to pledge to the proposal
    quoteWithdrawPledgeRequest:
      type: object
      description: Request to retrieve a withdraw pledge call quote
      required:
        - amount
      properties:
        amount:
          $ref: "#/components/schemas/fixedDecimal"
          description: Amount of CRS to withdraw from the pledge balance
    quoteVoteRequest:
      type: object
      description: Request to retrieve a vote call quote
      required:
        - amount
        - inFavor
      properties:
        amount:
          $ref: "#/components/schemas/fixedDecimal"
          description: Amount of CRS to vote with
        inFavor:
          type: boolean
          description: If true, votes for the proposal; otherwise votes against if false
    quoteWithdrawVoteRequest:
      type: object
      description: Request to retrieve a withdraw vote call quote
      required:
        - amount
      properties:
        amount:
          $ref: "#/components/schemas/fixedDecimal"
          description: Amount of CRS to withdraw from the vote balance
    liquidityPoolsResponse:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/liquidityPoolResponse"
        paging:
          $ref: "#/components/schemas/pagingResponse"
    liquidityPoolResponse:
      type: object
      properties:
        address:
          $ref: "#/components/schemas/address"
          description: Address of the liquidity pool
        name:
          type: string
          description: Name of the liquidity pool
        transactionFeePercent:
          $ref: "#/components/schemas/fixedDecimal"
          pattern: ^0.[0-9]|1.0$
          description: Percentage fee for a trade
        market:
          $ref: "#/components/schemas/address"
          description: The market address the liquidity pool is within.
        miningPool:
          $ref: "#/components/schemas/miningPoolResponse"
        tokens:
          $ref: "#/components/schemas/liquidityPoolTokenBreakdown"
          description: Breakdown of tokens tied to the pool
        createdBlock:
          type: integer
          format: uint64
          minimum: 1
          description: Block number at which the entity was created
        modifiedBlock:
          type: integer
          format: uint64
          minimum: 1
          description: Block number at which the entity state was last modified
        summary:
          $ref: "#/components/schemas/liquidityPoolSummary"
    liquidityPoolTokenBreakdown:
      type: object
      properties:
        crs:
          $ref: "#/components/schemas/tokenResponse"
        src:
          $ref: "#/components/schemas/tokenResponse"
        lp:
          $ref: "#/components/schemas/tokenResponse"
        staking:
          $ref: "#/components/schemas/tokenResponse"
    liquidityPoolSummary:
      type: object
      properties:
        reserves:
          $ref: "#/components/schemas/reservesSummary"
        rewards:
          $ref: "#/components/schemas/rewardSummary"
        volume:
          $ref: "#/components/schemas/volumeSummary"
        cost:
          $ref: "#/components/schemas/costSummary"
        staking:
          $ref: "#/components/schemas/liquidityPoolStakingSummary"
        createdBlock:
          type: integer
          format: uint64
          minimum: 1
          description: Block number at which the entity state was created
        modifiedBlock:
          type: integer
          format: uint64
          minimum: 1
          description: Block number at which the entity state was last modified
    reservesSummary:
      type: object
      properties:
        crs:
          $ref: "#/components/schemas/fixedDecimal"
          description: CRS reserve amount
        src:
          $ref: "#/components/schemas/fixedDecimal"
          description: SRC reserve amount
        usd:
          $ref: "#/components/schemas/fixedDecimal"
          pattern: ^\d+.\d{8}$
          description: USD value of reserve amount
        dailyUsdPercentChange:
          pattern: \d+.\d{8}$
          $ref: "#/components/schemas/fixedDecimal"
          description: Percentage change of USD value from the previous day
    volumeSummary:
      type: object
      properties:
        dailyUsd:
          $ref: "#/components/schemas/fixedDecimal"
          pattern: ^\d+.\d{8}$
          description: USD value of total daily volume
    costSummary:
      type: object
      properties:
        crsPerSrc:
          $ref: "#/components/schemas/fixedDecimal"
          description: Amount of CRS tokens worth 1 full SRC token
        srcPerCrs:
          $ref: "#/components/schemas/fixedDecimal"
          description: Amount of SRC tokens worth 1 full CRS token
    liquidityPoolStakingSummary:
      type: object
      properties:
        weight:
          $ref: "#/components/schemas/fixedDecimal"
          description: Total number of tokens staking
        usd:
          $ref: "#/components/schemas/fixedDecimal"
          pattern: ^\d+.\d{8}$
          description: USD value of tokens staking
        dailyWeightChangePercent:
          $ref: "#/components/schemas/fixedDecimal"
          pattern: .\d{8}$
          description: Percentage change of tokens staking from the previous day
        nominated:
          type: boolean
          description: True if the pool is nominated for mining, otherwise false
    liquidityPoolSnapshotsResponse:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/liquidityPoolSnapshotResponse"
        paging:
          $ref: "#/components/schemas/pagingResponse"
    liquidityPoolSnapshotResponse:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
          description: Start time for the snapshot
        transactionCount:
          type: integer
          format: int64
          minimum: 0
          description: Number of transactions within the snapshot time period
        reserves:
          $ref: "#/components/schemas/reservesSnapshot"
        rewards:
          $ref: "#/components/schemas/liquidityPoolRewardsSnapshot"
        volume:
          $ref: "#/components/schemas/volumeSnapshot"
        cost:
          $ref: "#/components/schemas/costSnapshot"
        staking:
          $ref: "#/components/schemas/liquidityPoolStakingSnapshot"
    reservesSnapshot:
      type: object
      properties:
        crs:
          $ref: "#/components/schemas/ohlcFixedDecimalResponse"
        src:
          $ref: "#/components/schemas/ohlcFixedDecimalResponse"
        usd:
          $ref: "#/components/schemas/ohlcDecimalResponse"
    liquidityPoolRewardsSnapshot:
      type: object
      properties:
        providerUsd:
          $ref: "#/components/schemas/fixedDecimal"
          pattern: ^\d+.\d{8}$
          description: Total USD value of tokens rewarded to liquidity providers
        marketUsd:
          $ref: "#/components/schemas/fixedDecimal"
          pattern: ^\d+.\d{8}$
          description: Total USD value of tokens rewarded to the market; either the owner of a standard market or stakers in a staking market
        totalUsd:
          $ref: "#/components/schemas/fixedDecimal"
          pattern: ^\d+.\d{8}$
          description: Total USD value of all tokens rewarded
    volumeSnapshot:
      type: object
      properties:
        crs:
          $ref: "#/components/schemas/fixedDecimal"
          description: Amount of CRS token volume
        src:
          $ref: "#/components/schemas/fixedDecimal"
          description: Amount of SRC token volume
        usd:
          $ref: "#/components/schemas/fixedDecimal"
          pattern: ^\d+.\d{8}$
          description: USD value of all token volume
    costSnapshot:
      type: object
      properties:
        crsPerSrc:
          $ref: "#/components/schemas/ohlcFixedDecimalResponse"
        srcPerCrs:
          $ref: "#/components/schemas/ohlcFixedDecimalResponse"
    liquidityPoolStakingSnapshot:
      type: object
      properties:
        weight:
          $ref: "#/components/schemas/ohlcFixedDecimalResponse"
          description: Total number of tokens staking
        usd:
          $ref: "#/components/schemas/ohlcDecimalResponse"
          description: Total USD value of tokens staking
    marketsResponse:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/marketResponse"
        paging:
          $ref: "#/components/schemas/pagingResponse"
    marketResponse:
      type: object
      properties:
        address:
          $ref: "#/components/schemas/address"
          description: Address of the market
        pendingOwner:
          $ref: "#/components/schemas/address"
          description: Address of the pending market owner
        owner:
          $ref: "#/components/schemas/address"
          description: Address of the market owner
        tokens:
          $ref: "#/components/schemas/marketTokenBreakdown"
          description: Details of tokens that are tied to a market
        authPoolCreators:
          type: boolean
          description: Whether the market owner authorizes liquidity pool creators
        authTraders:
          type: boolean
          description: Whether the market owner authorizes traders
        authProviders:
          type: boolean
          description: Whether the market owner authorizes liquidity providers
        marketFeeEnabled:
          type: boolean
          description: Whether the market fee is enabled
        transactionFeePercent:
          $ref: "#/components/schemas/fixedDecimal"
          pattern: ^0.[0-9]|1.0$
          description: Percentage fee for a trade
        createdBlock:
          type: integer
          format: uint64
          minimum: 1
          description: Block number at which the entity was created
        modifiedBlock:
          type: integer
          format: uint64
          minimum: 1
          description: Block number at which the entity state was last modified
        summary:
          $ref: "#/components/schemas/marketSummary"
          description: Financial summary for the market
    marketTokenBreakdown:
      type: object
      description: Details of tokens that are tied to a market
      properties:
        crs:
          $ref: "#/components/schemas/tokenResponse"
          description: Details of the CRS token
        staking:
          $ref: "#/components/schemas/tokenResponse"
          description: Details of the staking token
    marketSummary:
      type: object
      properties:
        liquidityUsd:
          $ref: "#/components/schemas/fixedDecimal"
          pattern: ^\d+.\d{8}$
          description: Total liquidity USD amount
        dailyLiquidityUsdChangePercent:
          $ref: "#/components/schemas/fixedDecimal"
          pattern: .\d{8}$
          description: Percentage change of the liquidity USD amount from the previous day
        volumeUsd:
          $ref: "#/components/schemas/fixedDecimal"
          pattern: ^\d+.\d{8}$
          description: Total volume USD amount
        staking:
          $ref: "#/components/schemas/marketStakingSummary"
          description: Staking summary
        rewards:
          $ref: "#/components/schemas/rewardSummary"
          description: Rewards summary
        liquidityPoolCount:
          type: integer
          format: uint32
          minimum: 0
          description: Number of liquidity pools in the market
        createdBlock:
          type: integer
          format: uint64
          minimum: 1
          description: Block number at which the entity state was created
        modifiedBlock:
          type: integer
          format: uint64
          minimum: 1
          description: Block number at which the entity state was last modified
    marketStakingSummary:
      type: object
      properties:
        stakingWeight:
          $ref: "#/components/schemas/fixedDecimal"
          description: Total staking weight in all pools
        dailyStakingWeightChangePercent:
          $ref: "#/components/schemas/fixedDecimal"
          pattern: ^\d+.\d{8}$
          description: Percentage change of the staking weight amount from the previous day
        stakingUsd:
          $ref: "#/components/schemas/fixedDecimal"
          pattern: ^\d+.\d{8}$
          description: Total staking weight USD amount
        dailyStakingUsdChangePercent:
          $ref: "#/components/schemas/fixedDecimal"
          pattern: ^\d+.\d{8}$
          description: Percentage change of the staking USD amount from the previous day
    rewardSummary:
      type: object
      properties:
        providerDailyUsd:
          $ref: "#/components/schemas/fixedDecimal"
          pattern: ^\d+.\d{8}$
          description: USD value of rewards distributed to liquidity providers for the day
        marketDailyUsd:
          $ref: "#/components/schemas/fixedDecimal"
          pattern: ^\d+.\d{8}$
          description: USD value of rewards distributed to the market for the day
        totalDailyUsd:
          $ref: "#/components/schemas/fixedDecimal"
          pattern: ^\d+.\d{8}$
          description: Total USD value of rewards distributed for the day
    marketTokensResponse:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/marketTokenResponse"
        paging:
          $ref: "#/components/schemas/pagingResponse"
    marketTokenResponse:
      type: object
      description: Details of a token within a market
      properties:
        allOf:
          $ref: "#/components/schemas/tokenResponse"
          type: object
          properties:
            market:
              $ref: "#/components/schemas/address"
              description: Address of the market
            liquidityPool:
              $ref: "#/components/schemas/address"
              description: Address of the liquidity pool
    miningPoolsResponse:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/miningPoolResponse"
        paging:
          $ref: "#/components/schemas/pagingResponse"
    miningPoolResponse:
      type: object
      properties:
        address:
          $ref: "#/components/schemas/address"
          description: Address of the mining pool
        liquidityPool:
          $ref: "#/components/schemas/address"
          description: Address of the liquidity pool
        miningPeriodEndBlock:
          type: integer
          format: uint64
          minimum: 1
          description: Block number which the current mining period ends
        rewardPerBlock:
          $ref: "#/components/schemas/fixedDecimal"
          description: Amount of governance tokens rewarded to the pool per block
        rewardPerLpt:
          $ref: "#/components/schemas/fixedDecimal"
          description: Amount of governance tokens rewarded per liquidity pool token
        tokensMining:
          $ref: "#/components/schemas/fixedDecimal"
          description: Amount of liquidity pool tokens mining in the pool
        isActive:
          type: boolean
          description: True if liquidity mining is active, otherwise false
        createdBlock:
          type: integer
          format: uint64
          minimum: 1
          description: Block number at which the entity was created
        modifiedBlock:
          type: integer
          format: uint64
          minimum: 1
          description: Block number at which the entity state was last modified
    marketSnapshotsResponse:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/marketSnapshotResponse"
        paging:
          $ref: "#/components/schemas/pagingResponse"
    marketSnapshotResponse:
      type: object
      properties:
        liquidityUsd:
          $ref: "#/components/schemas/ohlcDecimalResponse"
          description: Liquidity USD value OHLC amounts
        volumeUsd:
          $ref: "#/components/schemas/fixedDecimal"
          description: Total USD swap volume
        staking:
          $ref: "#/components/schemas/marketStakingSnapshot"
        rewards:
          $ref: "#/components/schemas/marketRewardsSnapshot"
        timestamp:
          type: string
          format: date-time
          description: Snapshot timestamp
    marketStakingSnapshot:
      type: object
      properties:
        weight:
          $ref: "#/components/schemas/ohlcFixedDecimalResponse"
          description: Staking weight OHLC amounts
        usd:
          $ref: "#/components/schemas/ohlcDecimalResponse"
          description: Staking USD value OHLC amounts
    marketRewardsSnapshot:
      type: object
      properties:
        providerUsd:
          $ref: "#/components/schemas/fixedDecimal"
          pattern: ^\d+.\d{8}$
          description: USD value of rewards to providers
        marketUsd:
          $ref: "#/components/schemas/fixedDecimal"
          pattern: ^\d+.\d{8}$
          description: USD value of rewards to the market; either the owner of a standard market or stakers in a staking market
        totalUsd:
          $ref: "#/components/schemas/fixedDecimal"
          pattern: ^\d+.\d{8}$
          description: USD value of all rewards from token swaps
    tokensResponse:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/tokenResponse"
        paging:
          $ref: "#/components/schemas/pagingResponse"
    tokenResponse:
      type: object
      description: Details of a token
      properties:
        address:
          $ref: "#/components/schemas/address"
          description: Address of the token
        name:
          type: string
          description: Name of the token
        symbol:
          type: string
          description: Token ticker symbol
        decimals:
          type: integer
          format: int32
          description: Number of decimals of precision for token values
          minimum: 0
        sats:
          type: string
          description: Number of parts which make up one whole token
          pattern: ^[0-9]+$
        totalSupply:
          $ref: "#/components/schemas/fixedDecimal"
          description: Total supply for the entire token
        attributes:
          type: array
          items:
            $ref: "#/components/schemas/tokenAttribute"
          description: Attributes applied to the token
        wrappedToken:
          $ref: "#/components/schemas/wrappedTokenDetails"
          description: Details for the external token that is wrapped
        distribution:
          $ref: "#/components/schemas/minedTokenDistributionDetails"
          description: For a mined token, details the distribution
        createdBlock:
          type: integer
          format: uint64
          minimum: 1
          description: Block number at which the entity was created
        modifiedBlock:
          type: integer
          format: uint64
          minimum: 1
          description: Block number at which the entity state was last modified
        summary:
          $ref: "#/components/schemas/tokenSummary"
    wrappedTokenDetails:
      type: object
      description: Details for an external token that is wrapped
      properties:
        custodian:
          $ref: "#/components/schemas/address"
          description: Cirrus address for the custodian of the bridge
        chain:
          $ref: "#/components/schemas/externalChain"
          description: External chain of the wrapped token
        address:
          type: string
          description: Address of the token on the native chain, or unset if the base token of the external chain is wrapped
        trusted:
          type: boolean
          description: True if the custodian is configured as trusted; otherwise false
        validated:
          type: boolean
          description: True if the native token it points to is valid; otherwise false
        createdBlock:
          type: integer
          format: uint64
          description: Block number at which the entity state was created
          minimum: 1
        modifiedBlock:
          type: integer
          format: uint64
          minimum: 1
          description: Block number at which the entity state was last modified
    minedTokenDistributionDetails:
      type: object
      description: Details for the mined token distribution schedule
      properties:
        vault:
          $ref: "#/components/schemas/address"
          description: Vault address that receives the distributed tokens
        miningGovernance:
          $ref: "#/components/schemas/address"
          description: Mining governance address that receives the distributed tokens
        nextDistributionBlock:
          type: integer
          format: uint64
          description: Block number at which the next distribution is available
          minimum: 1
        history:
          type: array
          description: Details for the historical mined token distributions
          items:
            $ref: "#/components/schemas/minedTokenDistribution"
    minedTokenDistribution:
      type: object
      description: Details for a mined token distribution
      properties:
        vault:
          $ref: "#/components/schemas/fixedDecimal"
          description: Amount of tokens distributed to the vault contract
        miningGovernance:
          $ref: "#/components/schemas/fixedDecimal"
          description: Amount of tokens distributed to the mining governance contract
        block:
          type: integer
          format: uint64
          description: Block number at which the next distribution is available
          minimum: 1
    tokenSummary:
      type: object
      description: Point in time pricing summary for a token
      properties:
        priceUsd:
          $ref: "#/components/schemas/fixedDecimal"
          pattern: ^\d+.\d{8}$
          description: USD token price
        dailyPriceChangePercent:
          $ref: "#/components/schemas/fixedDecimal"
          pattern: .\d{8}$
          description: Price change percentage for the current day, reset at 00:00 UTC
        createdBlock:
          type: integer
          format: uint64
          description: Block number at which price was created
          minimum: 1
        modifiedBlock:
          type: integer
          format: uint64
          description: Block number at which price was last updated
          minimum: 1
    tokenSnapshotsResponse:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/tokenSnapshotResponse"
        paging:
          $ref: "#/components/schemas/pagingResponse"
    tokenSnapshotResponse:
      type: object
      description: Interval pricing snapshot for a token
      properties:
        price:
          $ref: "#/components/schemas/ohlcDecimalResponse"
          description: Pricing details
        timestamp:
          type: string
          format: date-time
          description: Start time of the snapshot
    transactionsResponse:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/transactionResponse"
        paging:
          $ref: "#/components/schemas/pagingResponse"
    transactionResponse:
      type: object
      properties:
        success:
          type: boolean
          description: Whether the transaction succeeded
        hash:
          $ref: "#/components/schemas/sha256"
          description: SHA-256 hash of the transaction
        newContractAddress:
          $ref: "#/components/schemas/address"
          description: Address of the newly created contract, if transaction is a Create transaction
        block:
          $ref: "#/components/schemas/blockResponse"
          description: Details of the block that the transaction was included in
        gasUsed:
          type: integer
          format: int32
          minimum: 10000
          maximum: 250000
          description: Quantity of gas consumed
        from:
          $ref: "#/components/schemas/address"
          description: Address of transaction sender
        to:
          $ref: "#/components/schemas/address"
          description: Address of smart contract
        events:
          type: array
          items:
            $ref: "#/components/schemas/transactionEvent"
    approvedAllowanceResponse:
      type: object
      description: Details an approved spending allowance
      properties:
        allowance:
          $ref: "#/components/schemas/fixedDecimal"
          description: Amount of token allowance
        owner:
          $ref: "#/components/schemas/address"
          description: Address of the balance holder
        spender:
          $ref: "#/components/schemas/address"
          description: Address of the approved spender
        token:
          $ref: "#/components/schemas/address"
          description: Address of the SRC token
    addressBalancesResponse:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/addressBalanceResponse"
        paging:
          $ref: "#/components/schemas/pagingResponse"
    addressBalanceResponse:
      type: object
      description: Details an approved spending allowance
      properties:
        balance:
          $ref: "#/components/schemas/fixedDecimal"
          description: Token balance amount
        address:
          $ref: "#/components/schemas/address"
          description: Address of the balance holder
        token:
          $ref: "#/components/schemas/address"
          description: Address of the SRC token
        createdBlock:
          type: integer
          format: uint64
          minimum: 1
          description: Block number at which the entity was created
        modifiedBlock:
          type: integer
          format: uint64
          minimum: 1
          description: Block number at which the entity state was last modified
    miningPositionsResponse:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/miningPositionResponse"
        paging:
          $ref: "#/components/schemas/pagingResponse"
    miningPositionResponse:
      type: object
      description: Details a mining position
      properties:
        address:
          $ref: "#/components/schemas/address"
          description: Address of the miner
        amount:
          $ref: "#/components/schemas/fixedDecimal"
          description: Liquidity pool token amount
        miningPool:
          $ref: "#/components/schemas/address"
          description: Address of the mining pool
        miningToken:
          $ref: "#/components/schemas/address"
          description: Address of the liquidity pool token
        createdBlock:
          type: integer
          format: uint64
          minimum: 1
          description: Block number at which the entity was created
        modifiedBlock:
          type: integer
          format: uint64
          minimum: 1
          description: Block number at which the entity state was last modified
    stakingPositionsResponse:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/stakingPositionResponse"
        paging:
          $ref: "#/components/schemas/pagingResponse"
    stakingPositionResponse:
      type: object
      description: Details a staking position
      properties:
        address:
          $ref: "#/components/schemas/address"
          description: Address of the staker
        amount:
          $ref: "#/components/schemas/fixedDecimal"
          description: Amount of tokens staked
        liquidityPool:
          $ref: "#/components/schemas/address"
          description: Address of the liquidity being staked in
        stakingToken:
          $ref: "#/components/schemas/address"
          description: Address of the token used for staking
        createdBlock:
          type: integer
          format: uint64
          minimum: 1
          description: Block number at which the entity was created
        modifiedBlock:
          type: integer
          format: uint64
          minimum: 1
          description: Block number at which the entity state was last modified
    blocksResponse:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/blockResponse"
        paging:
          $ref: "#/components/schemas/pagingResponse"
    blockResponse:
      type: object
      description: Details about a block
      properties:
        hash:
          $ref: "#/components/schemas/sha256"
          description: SHA-256 hash of the block
        height:
          type: integer
          format: uint64
          minimum: 1
          description: Block number
        time:
          type: string
          format: date-time
          description: Block timestamp as determined by the block producer
        medianTime:
          type: string
          format: date-time
          description: Network-adjusted timestamp
    ohlcDecimalResponse:
      type: object
      description: Open, high, low, close values within a time interval
      properties:
        open:
          $ref: "#/components/schemas/fixedDecimal"
          pattern: ^\d+.\d{8}$
          description: Value at the start of the time interval
        high:
          $ref: "#/components/schemas/fixedDecimal"
          pattern: ^\d+.\d{8}$
          description: Highest value during the time interval
        low:
          $ref: "#/components/schemas/fixedDecimal"
          pattern: ^\d+.\d{8}$
          description: Lowest value during the time interval
        close:
          $ref: "#/components/schemas/fixedDecimal"
          pattern: ^\d+.\d{8}$
          description: Value at the end of the time interval
    ohlcFixedDecimalResponse:
      type: object
      description: Open, high, low, close values within a time interval
      properties:
        open:
          $ref: "#/components/schemas/fixedDecimal"
          description: Value at the start of the time interval
        high:
          $ref: "#/components/schemas/fixedDecimal"
          description: Highest value during the time interval
        low:
          $ref: "#/components/schemas/fixedDecimal"
          description: Lowest value during the time interval
        close:
          $ref: "#/components/schemas/fixedDecimal"
          description: Value at the end of the time interval
    pagingResponse:
      type: object
      description: Paging cursors
      properties:
        next:
          type: string
          description: Cursor referencing the next page
        previous:
          type: string
          description: Cursor referencing the previous page
    transactionQuoteResponse:
      type: object
      description: Quote for submitting a smart contract transaction
      properties:
        result:
          description: Value which is returned by the quoted smart contract call
        error:
          type: string
          description: Smart contract call error details
        gasUsed:
          type: integer
          format: int32
          minimum: 0
          description: Total amount of gas consumed in the quoted smart contract call
        events:
          type: array
          items:
            $ref: "#/components/schemas/transactionEvent"
        request:
          $ref: "#/components/schemas/quotedTransaction"
          description: Quoted transaction definition, which can be used to replay or broadcast the transaction
    liquidityAmountInQuoteResponse:
      type: object
      description: Details the estimated token input amount required to add liquidity, given the other paired token amount
      properties:
        amountIn:
          $ref: "#/components/schemas/fixedDecimal"
          description: Estimated token input amount
    swapAmountInQuoteResponse:
      type: object
      description: Details the estimated token input required for a given swap output
      properties:
        amountIn:
          $ref: "#/components/schemas/fixedDecimal"
          description: Estimated token input amount
    swapAmountOutQuoteResponse:
      type: object
      description: Details the estimated token output for a given swap input
      properties:
        amountOut:
          $ref: "#/components/schemas/fixedDecimal"
          description: Estimated token output amount
    miningGovernancesResponse:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/miningGovernanceResponse"
        paging:
          $ref: "#/components/schemas/pagingResponse"
    miningGovernanceResponse:
      type: object
      description: Details state of liquidity mining governance
      properties:
        address:
          $ref: "#/components/schemas/address"
          description: Address of the mining governance contract
        periodEndBlock:
          type: integer
          format: uint64
          minimum: 1
          description: Block number at which the current mining period ends
        periodRemainingBlocks:
          type: integer
          format: uint64
          minimum: 0
          description: Number of blocks left for the current mining period
        periodBlockDuration:
          type: integer
          format: uint64
          minimum: 0
          description: Number of blocks in a full mining period
        periodsUntilRewardReset:
          type: integer
          format: int32
          minimum: 0
          description: Number of mining periods before reward amounts change
        miningPoolRewardPerPeriod:
          $ref: "#/components/schemas/fixedDecimal"
          description: Total governance token reward amount for a single mining pool per mining period
        totalRewardsPerPeriod:
          $ref: "#/components/schemas/fixedDecimal"
          description: Total governance token reward amount for a single period across all nominated pools
        minedToken:
          $ref: "#/components/schemas/address"
          description: Address of governance token that is mined
        createdBlock:
          type: integer
          format: uint64
          minimum: 1
          description: Block number at which the entity was created
        modifiedBlock:
          type: integer
          format: uint64
          minimum: 1
          description: Block number at which the entity state was last modified
    indexerStatusResponse:
      type: object
      description: Status of the Opdex transaction indexer
      properties:
        latestBlock:
          $ref: "#/components/schemas/blockResponse"
          description: Details of the latest block indexed
        available:
          type: boolean
          description: True if the indexer process is active, otherwise false
        locked:
          type: boolean
          description: True if the indexer process is currently running, otherwise false
        instanceId:
          type: string
          description: Unique identifier for the API instance that locked the indexer
        reason:
          type: string
          enum:
            - Deploying
            - Indexing
            - Rewinding
          description: Reason that the indexer process is currently running
        modifiedDate:
          type: string
          format: date-time
          description: When the indexer status last changed
    statusResponse:
      type: object
      description: Status of the API instance
      properties:
        commit:
          type: string
          description: The commit hash for the version of the code that is running
        identifier:
          type: string
          description: Globally unique identifier of the current API instance
        underMaintenance:
          type: boolean
          description: Whether the API is under maintenance
    vaultsResponse:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/vaultResponse"
        paging:
          $ref: "#/components/schemas/pagingResponse"
    vaultResponse:
      type: object
      properties:
        vault:
          $ref: "#/components/schemas/address"
          description: Address of the vault
        token:
          $ref: "#/components/schemas/address"
          description: Address of the governance token stored in the vault
        tokensUnassigned:
          $ref: "#/components/schemas/fixedDecimal"
          description: Amount of governance tokens that can be put toward new proposals
        tokensProposed:
          $ref: "#/components/schemas/fixedDecimal"
          description: Amount of governance tokens currently locked for active proposals
        tokensLocked:
          $ref: "#/components/schemas/fixedDecimal"
          description: Amount of governance tokens in the vault
        totalPledgeMinimum:
          $ref: "#/components/schemas/fixedDecimal"
          description: Minimum amount of CRS tokens required to be pledged, for a proposal to move to a vote
        totalVoteMinimum:
          $ref: "#/components/schemas/fixedDecimal"
          description: Minimum amount of CRS tokens required to be voted with, for a proposal to be considered
        vestingDuration:
          type: integer
          format: uint64
          minimum: 0
          description: Number of blocks that a certificate is vested for, before it can be redeemed
        createdBlock:
          type: integer
          format: uint64
          minimum: 1
          description: Block number at which the entity was created
        modifiedBlock:
          type: integer
          format: uint64
          minimum: 1
          description: Block number at which the entity state was last modified
    certificatesResponse:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/certificateResponse"
        paging:
          $ref: "#/components/schemas/pagingResponse"
    certificateResponse:
      type: object
      properties:
        owner:
          $ref: "#/components/schemas/address"
          description: Address of the certificate owner
        amount:
          $ref: "#/components/schemas/fixedDecimal"
          description: Total value of the certificate, over the duration of the vesting period
        vestingStartBlock:
          type: integer
          format: uint64
          minimum: 1
          description: Block that the vesting period starts
        vestingEndBlock:
          type: integer
          format: uint64
          minimum: 1
          description: Block that the vesting period ends
        redeemed:
          type: boolean
          description: Whether the certificate has been redeemed by the certificate owner
        revoked:
          type: boolean
          description: Whether the certificate was revoked by the vault owner
        proposals:
          type: array
          description: Create and revoke proposal ids relating to the certificate
          items:
            type: integer
            format: uint64
            minimum: 1
        createdBlock:
          type: integer
          format: uint64
          minimum: 1
          description: Block number at which the entity was created
        modifiedBlock:
          type: integer
          format: uint64
          minimum: 1
          description: Block number at which the entity state was last modified
    pledgesResponse:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/pledgeResponse"
        paging:
          $ref: "#/components/schemas/pagingResponse"
    pledgeResponse:
      type: object
      properties:
        vault:
          $ref: "#/components/schemas/address"
          description: Address of the vault
        proposalId:
          type: integer
          format: uint64
          minimum: 1
          description: Id of the proposal stored by the vault
        pledger:
          $ref: "#/components/schemas/address"
          description: Address of the pledger
        pledge:
          $ref: "#/components/schemas/fixedDecimal"
          description: Amount of CRS pledged to the proposal
        balance:
          $ref: "#/components/schemas/fixedDecimal"
          description: Currently pledged CRS balance
        createdBlock:
          type: integer
          format: uint64
          minimum: 1
          description: Block number at which the entity was created
        modifiedBlock:
          type: integer
          format: uint64
          minimum: 1
          description: Block number at which the entity state was last modified
    proposalsResponse:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/proposalResponse"
        paging:
          $ref: "#/components/schemas/pagingResponse"
    proposalResponse:
      type: object
      properties:
        vault:
          $ref: "#/components/schemas/address"
          description: Address of the vault
        token:
          $ref: "#/components/schemas/address"
          description: Address of the governance token stored in the vault
        proposalId:
          type: integer
          format: uint64
          minimum: 1
          description: Id of the proposal stored by the vault
        creator:
          $ref: "#/components/schemas/address"
          description: Address of the proposal creator
        wallet:
          $ref: "#/components/schemas/address"
          description: Address of the beneficiary if a certificate proposal, otherwise the proposal creator
        amount:
          $ref: "#/components/schemas/fixedDecimal"
          description: Proposal token amount
        description:
          type: string
          minLength: 200
          description: Description for the proposal
        type:
          $ref: "#/components/schemas/proposalType"
          description: Type of vault proposal
        status:
          $ref: "#/components/schemas/proposalStatus"
          description: Status of vault proposal
        expiration:
          type: integer
          format: uint64
          minimum: 1
          description: Block number that the proposal status expires, for an active proposal
        yesAmount:
          $ref: "#/components/schemas/fixedDecimal"
          description: Yes vote CRS weight
        noAmount:
          $ref: "#/components/schemas/fixedDecimal"
          description: No vote CRS weight
        pledgeAmount:
          $ref: "#/components/schemas/fixedDecimal"
          description: Pledged CRS amount
        approved:
          type: boolean
          description: Whether the proposal has been approved
        createdBlock:
          type: integer
          format: uint64
          minimum: 1
          description: Block number at which the entity was created
        modifiedBlock:
          type: integer
          format: uint64
          minimum: 1
          description: Block number at which the entity state was last modified
    votesResponse:
      type: object
      properties:
        results:
          type: array
          items:
            $ref: "#/components/schemas/voteResponse"
        paging:
          $ref: "#/components/schemas/pagingResponse"
    voteResponse:
      type: object
      properties:
        vault:
          $ref: "#/components/schemas/address"
          description: Address of the vault
        proposalId:
          type: integer
          format: uint64
          minimum: 1
          description: Id of the proposal stored by the vault
        voter:
          $ref: "#/components/schemas/address"
          description: Address of the voter
        vote:
          $ref: "#/components/schemas/fixedDecimal"
          description: Amount of CRS voted with on the proposal
        balance:
          $ref: "#/components/schemas/fixedDecimal"
          description: Currently voting CRS balance
        inFavor:
          type: boolean
          description: Whether the vote is in favor of the proposal
        createdBlock:
          type: integer
          format: uint64
          minimum: 1
          description: Block number at which the entity was created
        modifiedBlock:
          type: integer
          format: uint64
          minimum: 1
          description: Block number at which the entity state was last modified
paths:
  /auth:
    get:
      tags:
        - Authentication
      summary: Get Stratis Id
      description: >
        Returns a new Stratis Id to sign and authenticate.
        See the [specification](https://github.com/Opdex/SSAS) for further detail.
      operationId: getStratisId
      responses:
        200:
          description: Stratis Id was created
          content:
            text/plain:
              schema:
                type: string
                example: sid:test-app.opdex.com/v1/auth?uid=nd0ZT7yrMpLPa207v1uGk0uu9NNcKILgn0HLJXpLQxGKuI9RKnugLdZPz_05a2tX-rCuN0tHM6z3_Qs1yi0Lyg&exp=1643082000
        429:
          $ref: "#/components/responses/TooManyRequests"
        500:
          $ref: "#/components/responses/InternalServerError"
    post:
      tags:
        - Authentication
      summary: Stratis Signature Auth
      description: >
        Responds to a request from a Stratis Signature Auth signer directly.
        See the [specification](https://github.com/Opdex/SSAS) for further detail.
      operationId: authenticate
      parameters:
        - name: uid
          in: query
          description: Unique identifier for the Stratis ID
          required: true
          schema:
            type: string
          example: Lf5t5J-oAn3CZ9YY27JnK5XtpbjIOD3BxyvHhd80AQ4fsJ7o0J8i5uSjzHZ9jeS3
        - name: exp
          in: query
          description: Unix timestamp indicating when the signature expires
          required: true
          schema:
            type: integer
            format: int64
            minimum: 0
            maximum: 273402300799
          example: 1641220000
      requestBody:
        description: The Stratis Signature Auth body
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/stratisSignatureAuthRequest"
            example:
              signature: H9xjfnvqucCmi3sfEKUes0qL4mD9PrZ/al78+Ka440t6WH5Qh0AIgl5YlxPa2cyuXdwwDa2OYUWR/0ocL6jRZLc=
              publicKey: tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
      responses:
        200:
          description: Signature was validated successfully
          content:
            text/plain:
              schema:
                type: string
                example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ3YWxsZXQiOiJQUFFkZVhkaldEQnpWTFVqZ1d3aTRtRlA0WTFtaHVOY1J1IiwibmJmIjoxNjQzMDgxNzM5LCJleHAiOjE2NDMxNjgxMzcsImlhdCI6MTY0MzA4MTczN30.xjiwjPxzgYbQlP6ON2-Mg3S7m-dWww41FISVXhOGEFY
        400:
          description: The request is not valid
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/validationProblemDetails"
              example:
                type: https://httpstatuses.com/400
                title: One or more validation errors occurred.
                status: 400
                errors:
                  exp:
                    - Expiration date must be a unix timestamp.
                extensions:
                  traceId: 00-00000000000000000000000000000000-0000000000000000-00
        429:
          $ref: "#/components/responses/TooManyRequests"
        500:
          $ref: "#/components/responses/InternalServerError"
  /auth/callback:
    post:
      tags:
        - Authentication
      summary: Stratis Signature Auth Callback
      description: >
        Responds to a request from a Stratis Signature Auth signer's wallet.
        See the [specification](https://github.com/Opdex/SSAS) for further detail.
      operationId: authenticate callback
      parameters:
        - name: uid
          in: query
          description: Unique identifier for the Stratis ID
          required: true
          schema:
            type: string
          example: Lf5t5J-oAn3CZ9YY27JnK5XtpbjIOD3BxyvHhd80AQ4fsJ7o0J8i5uSjzHZ9jeS3
        - name: exp
          in: query
          description: Unix timestamp indicating when the signature expires
          required: true
          schema:
            type: integer
            format: int64
            minimum: 0
            maximum: 273402300799
          example: 1641220000
      requestBody:
        description: The Stratis Signature Auth body
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/stratisSignatureAuthRequest"
            example:
              signature: H9xjfnvqucCmi3sfEKUes0qL4mD9PrZ/al78+Ka440t6WH5Qh0AIgl5YlxPa2cyuXdwwDa2OYUWR/0ocL6jRZLc=
              publicKey: tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
      responses:
        204:
          description: Signature was validated successfully
        400:
          description: The request is not valid
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/validationProblemDetails"
              example:
                type: https://httpstatuses.com/400
                title: One or more validation errors occurred.
                status: 400
                errors:
                  exp:
                    - Expiration date must be a unix timestamp.
                extensions:
                  traceId: 00-00000000000000000000000000000000-0000000000000000-00
        429:
          $ref: "#/components/responses/TooManyRequests"
        500:
          $ref: "#/components/responses/InternalServerError"
  /blocks:
    get:
      tags:
        - Blocks
      summary: Get Blocks
      description: Retrieves details for blocks that have been indexed by the Opdex indexer. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
      operationId: getBlocks
      parameters:
        - name: direction
          in: query
          description: Order direction of the results
          schema:
            $ref: "#/components/schemas/sortDirection"
          example: DESC
        - name: limit
          in: query
          description: Number of results per page
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 50
            default: 10
          example: 10
        - name: cursor
          in: query
          description: Reference of the requested page, returned by a previous call
          schema:
            type: string
      responses:
        200:
          description: Block results retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/blocksResponse"
              example:
                results:
                  - hash: 07eabb6c1d2aadbfcfc9d690b210a7686d8775acf0deda7d2ad892c3a8c836b7
                    height: 3009005
                    time: 2022-01-18T22:02:56Z
                    medianTime: 2022-01-18T22:01:04Z
                  - hash: 94596f8f9009d1034ab3ab6fd203580fc27b5a2a222f72b2e7d6ac55ec1a6541
                    height: 3009004
                    time: 2022-01-18T22:02:40Z
                    medianTime: 2022-01-18T22:00:48Z
                  - hash: c58eb0e79654237722822bdb23b963d40f118e64194a4db2f60fc8c56c829698
                    height: 3009003
                    time: 2022-01-18T22:02:08Z
                    medianTime: 2022-01-18T22:00:32Z
                  - hash: eb15aa448c542d775a633d338e67095dcf30080945c41e10e6c16ada62e30ea1
                    height: 3009002
                    time: 2022-01-18T22:01:52Z
                    medianTime: 2022-01-18T22:00:00Z
                  - hash: b880453ffd700b21816ab68e6d74af7d31eb91756135cb456d0096f8639a7f3e
                    height: 3009001
                    time: 2022-01-18T22:01:20Z
                    medianTime: 2022-01-18T21:59:44Z
                paging:
                  next: ZGlyZWN0aW9uOkRFU0M7bGltaXQ6NTtwYWdpbmc6Rm9yd2FyZDtwb2ludGVyOk16QXdPVEF3TVE9PTs=
          headers:
            Cache-Control:
              schema:
                type: string
                example: public, max-age=15
              description: Holds directives that control caching
        429:
          $ref: "#/components/responses/TooManyRequests"
        500:
          $ref: "#/components/responses/InternalServerError"
        503:
          $ref: "#/components/responses/UnderMaintenance"
  /blocks/{height}:
    get:
      tags:
        - Blocks
      summary: Get Block
      description: Retrieves details for a block that has been indexed by the Opdex indexer.
      operationId: getBlock
      parameters:
        - name: height
          in: path
          required: true
          schema:
            type: integer
            format: uint64
            minimum: 1
          example: 3000000
      responses:
        200:
          description: Block details retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/blockResponse"
              example:
                hash: 07eabb6c1d2aadbfcfc9d690b210a7686d8775acf0deda7d2ad892c3a8c836b7
                height: 3009005
                time: 2022-01-18T22:02:56Z
                medianTime: 2022-01-18T22:01:04Z
          headers:
            Cache-Control:
              schema:
                type: string
                example: public, max-age=15
              description: Holds directives that control caching
        400:
          description: The request is not valid
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/validationProblemDetails"
              example:
                type: https://httpstatuses.com/400
                title: One or more validation errors occurred.
                status: 400
                errors:
                  height:
                    - Height must be greater than 0.
                extensions:
                  traceId: 00-00000000000000000000000000000000-0000000000000000-00
        404:
          $ref: "#/components/responses/BlockNotFound"
        429:
          $ref: "#/components/responses/TooManyRequests"
        500:
          $ref: "#/components/responses/InternalServerError"
        503:
          $ref: "#/components/responses/UnderMaintenance"
  /indexer:
    get:
      tags:
        - Indexer
      summary: Get Indexer Status
      description: Retrieves status details for the Opdex transaction indexer.
      operationId: getIndexerStatus
      responses:
        200:
          description: Indexer status retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/indexerStatusResponse"
              example:
                latestBlock:
                  hash: 05179f49edccc26387a1d9200e2525ca64067b294d31966450e111d983ddefc1
                  height: 2987787
                  time: 2022-01-13T13:09:04Z
                  medianTime: 2022-01-13T13:06:56Z
                available: true
                locked: true
                instanceId: bc399269-74cb-4147-a7c3-f2d296fa4a9b
                reason: Indexing
                modifiedDate: 2022-01-13T13:09:56Z
        429:
          $ref: "#/components/responses/TooManyRequests"
        500:
          $ref: "#/components/responses/InternalServerError"
  /liquidity-pools:
    get:
      tags:
        - Liquidity Pools
      summary: Get Liquidity Pools
      description: Retrieves details for Opdex liquidity pools across one or many markets. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
      operationId: getLiquidityPools
      parameters:
        - name: keyword
          in: query
          description: Keyword search against liquidity pool addresses and names
          schema:
            type: string
          example: BTC
        - name: markets
          in: query
          description: Addresses of markets to search within
          schema:
            type: array
            items:
              $ref: "#/components/schemas/address"
              description: Address of a market
          example:
            - t7RorA7xQCMVYKPM1ibPE1NSswaLbpqLQb
        - name: liquidityPools
          in: query
          description: Addresses of liquidity pools to fetch
          schema:
            type: array
            items:
              $ref: "#/components/schemas/address"
              description: Address of a liquidity pool
          example:
            - tVFhXcS3gVb49MSTsaDFoqkxLrAUiNEN7n
            - tFCyMPURX9pVWXuXQqYY2hJmRcCrhmBPfY
        - name: tokens
          in: query
          description: Addresses of SRC tokens paired in pools
          schema:
            type: array
            items:
              $ref: "#/components/schemas/address"
              description: Address of an SRC token
          example:
            - tGSk2dVENuqAQ2rNXbui37XHuurFCTqadD
            - tF83sdXXt2nTkL7UyEYDVFMK4jTuYMbmR3
        - name: stakingStatus
          in: query
          description: Staking status filter; default is not to filter
          schema:
            $ref: "#/components/schemas/stakingStatusFilter"
          example: Enabled
        - name: nominationStatus
          in: query
          description: Nomination status filter; default is not to filter
          schema:
            $ref: "#/components/schemas/nominationStatusFilter"
          example: Nominated
        - name: miningStatus
          in: query
          description: Mining status filter; default is not to filter
          schema:
            $ref: "#/components/schemas/miningStatusFilter"
          example: Enabled
        - name: orderBy
          in: query
          description: Property by which to sort results
          schema:
            $ref: "#/components/schemas/liquidityPoolOrderByType"
          example: Volume
        - name: direction
          in: query
          description: Order direction of the results
          schema:
            $ref: "#/components/schemas/sortDirection"
          example: DESC
        - name: limit
          in: query
          description: Number of results per page
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 50
            default: 10
          example: 10
        - name: cursor
          in: query
          description: Reference of the requested page, returned by a previous call
          schema:
            type: string
      responses:
        200:
          description: Liqudidity pool results found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/liquidityPoolsResponse"
              example:
                results:
                  - address: tVFhXcS3gVb49MSTsaDFoqkxLrAUiNEN7n
                    name: TBTC-TCRS
                    transactionFeePercent: "0.3"
                    market: t7RorA7xQCMVYKPM1ibPE1NSswaLbpqLQb
                    createdBlock: 2988918
                    modifiedBlock: 2988918
                    tokens:
                      crs:
                        address: CRS
                        name: Cirrus
                        symbol: TCRS
                        decimals: 8
                        sats: "100000000"
                        totalSupply: "100000000.00000000"
                        attributes: []
                        createdBlock: 2988890
                        modifiedBlock: 2988890
                        summary:
                          priceUsd: "0.95057037"
                          dailyPriceChangePercent: "0.63000000"
                          createdBlock: 2988890
                          modifiedBlock: 3043278
                      src:
                        address: tGSk2dVENuqAQ2rNXbui37XHuurFCTqadD
                        name: Bitcoin (Wrapped)
                        symbol: TBTC
                        decimals: 8
                        sats: "100000000"
                        totalSupply: "21000000.00000000"
                        attributes:
                          - NonProvisional
                        createdBlock: 2988918
                        modifiedBlock: 2988918
                        summary:
                          priceUsd: "27698.36556351"
                          dailyPriceChangePercent: "0.21000000"
                          createdBlock: 2988918
                          modifiedBlock: 3043250
                      lp:
                        address: tVFhXcS3gVb49MSTsaDFoqkxLrAUiNEN7n
                        name: Opdex Liquidity Pool Token
                        symbol: OLPT
                        decimals: 8
                        sats: "100000000"
                        totalSupply: "94.39473361"
                        attributes:
                          - Provisional
                        createdBlock: 2988918
                        modifiedBlock: 2989382
                        summary:
                          priceUsd: "323.92670749"
                          dailyPriceChangePercent: "0.21000000"
                          createdBlock: 2988918
                          modifiedBlock: 3043250
                      staking:
                        address: tTTuKbCR2UnsEByXBp1ynBz91J2yz63h1c
                        name: Testnet Opdex Token
                        symbol: TODX
                        decimals: 8
                        sats: "100000000"
                        totalSupply: "400000000.00000000"
                        attributes:
                          - NonProvisional
                          - Staking
                        distribution:
                          vault: t7hy4H51KzU6PPCL4QKCdgBGPLV9Jpmf9G
                          miningGovernance: tKFkNiL5KJ3Q4br929i6hHbB4X4mt1MigF
                          nextDistributionBlock: 3829900
                          history:
                            - vault: "100000000.00000000"
                              miningGovernance: "300000000.00000000"
                              block: 2848893
                        createdBlock: 2988890
                        modifiedBlock: 2989018
                        summary:
                          priceUsd: "0.00000000"
                          dailyPriceChangePercent: "0.00000000"
                          createdBlock: 2988890
                          modifiedBlock: 3043278
                    miningPool:
                      address: tRs6rXfHuLhKZhWuWpycLASzAyn4kXo6bT
                      liquidityPool: tVFhXcS3gVb49MSTsaDFoqkxLrAUiNEN7n
                      miningPeriodEndBlock: 0
                      rewardPerBlock: "0.00000000"
                      rewardPerLpt: "0.00000000"
                      tokensMining: "4.14831968"
                      isActive: false
                      createdBlock: 2988918
                      modifiedBlock: 2992621
                    summary:
                      reserves:
                        crs: "16676.38165376"
                        src: "0.53431082"
                        usd: "45559.31401812"
                        dailyUsdChangePercent: "-0.02000000"
                      rewards:
                        providerDailyUsd: "0.01000000"
                        marketDailyUsd: "0.00000000"
                        totalDailyUsd: "0.01000000"
                      volume:
                        dailyUsd: "4.26496572"
                      cost:
                        crsPerSrc: "31211.01244732"
                        srcPerCrs: "0.00003203"
                      staking:
                        weight: "0.00000000"
                        usd: "0.00000000"
                        dailyWeightChangePercent: "0.00000000"
                        nominated: true
                      createdBlock: 2988918
                      modifiedBlock: 3043296
                paging: {}
          headers:
            Cache-Control:
              schema:
                type: string
                example: public, max-age=15
              description: Holds directives that control caching
        400:
          description: The request is not valid
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/validationProblemDetails"
              example:
                type: https://httpstatuses.com/400
                title: One or more validation errors occurred.
                status: 400
                errors:
                  nominationStatus:
                    - The value 'Enabled' is not valid for NominationStatus.
                extensions:
                  traceId: 00-00000000000000000000000000000000-0000000000000000-00
        429:
          $ref: "#/components/responses/TooManyRequests"
        500:
          $ref: "#/components/responses/InternalServerError"
        503:
          $ref: "#/components/responses/UnderMaintenance"
    post:
      tags:
        - Liquidity Pools
      summary: Build Create Liquidity Pool Transaction Quote
      description: Builds a quote for a transaction to create an Opdex liquidity pool. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
      operationId: buildCreateLiquidityPoolQuote
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/quoteCreateLiquidityPoolRequest"
            example:
              token: tGSk2dVENuqAQ2rNXbui37XHuurFCTqadD
              market: t7RorA7xQCMVYKPM1ibPE1NSswaLbpqLQb
      security:
        - opdexAuth: []
      responses:
        200:
          description: Built create liquidity pool quote
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/transactionQuoteResponse"
              example:
                result: tNiP367ETVYReXenrZXz5XQGVXt1FFHQz1
                gasUsed: 59204
                events:
                  - token: tA88mLAYt3gTp5eqFR6srceAPrTNf4tdFy
                    liquidityPool: tNiP367ETVYReXenrZXz5XQGVXt1FFHQz1
                    eventType: CreateLiquidityPoolEvent
                    contract: t7RorA7xQCMVYKPM1ibPE1NSswaLbpqLQb
                    sortOrder: 0
                request:
                  sender: tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
                  to: t7RorA7xQCMVYKPM1ibPE1NSswaLbpqLQb
                  amount: "0.00000000"
                  method: CreatePool
                  parameters:
                    - label: Token Address
                      value: 9#tA88mLAYt3gTp5eqFR6srceAPrTNf4tdFy
                  callback: https://v1-test-api.opdex.com/v1/transactions
          headers:
            Cache-Control:
              schema:
                type: string
                example: private, max-age=15
              description: Holds directives that control caching
        400:
          description: The request is not valid
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/validationProblemDetails"
              example:
                type: https://httpstatuses.com/400
                title: One or more validation errors occurred.
                status: 400
                errors:
                  market:
                    - Invalid address.
                extensions:
                  traceId: 00-00000000000000000000000000000000-0000000000000000-00
        401:
          $ref: "#/components/responses/Unauthorized"
        429:
          $ref: "#/components/responses/TooManyRequests"
        500:
          $ref: "#/components/responses/InternalServerError"
        503:
          $ref: "#/components/responses/UnderMaintenance"
  /liquidity-pools/{pool}:
    get:
      tags:
        - Liquidity Pools
      summary: Get Liquidity Pool
      description: Retrieve details for an Opdex liquidity pool.
      operationId: getLiquidityPool
      parameters:
        - name: pool
          in: path
          description: Address of a liquidity pool
          required: true
          schema:
            $ref: "#/components/schemas/address"
          example: tVFhXcS3gVb49MSTsaDFoqkxLrAUiNEN7n
      responses:
        200:
          description: Liquidity pool found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/liquidityPoolResponse"
              example:
                address: tVFhXcS3gVb49MSTsaDFoqkxLrAUiNEN7n
                name: TBTC-TCRS
                transactionFeePercent: "0.3"
                market: t7RorA7xQCMVYKPM1ibPE1NSswaLbpqLQb
                createdBlock: 2988918
                modifiedBlock: 2988918
                tokens:
                  crs:
                    address: CRS
                    name: Cirrus
                    symbol: TCRS
                    decimals: 8
                    sats: "100000000"
                    totalSupply: "100000000.00000000"
                    attributes: []
                    createdBlock: 2988890
                    modifiedBlock: 2988890
                    summary:
                      priceUsd: "0.95057037"
                      dailyPriceChangePercent: "0.63000000"
                      createdBlock: 2988918
                      modifiedBlock: 3043278
                  src:
                    address: tGSk2dVENuqAQ2rNXbui37XHuurFCTqadD
                    name: Bitcoin (Wrapped)
                    symbol: TBTC
                    decimals: 8
                    sats: "100000000"
                    totalSupply: "21000000.00000000"
                    attributes:
                      - NonProvisional
                    createdBlock: 2988918
                    modifiedBlock: 2988918
                    summary:
                      priceUsd: "27698.36556351"
                      dailyPriceChangePercent: "0.21000000"
                      createdBlock: 2988918
                      modifiedBlock: 3043250
                  lp:
                    address: tVFhXcS3gVb49MSTsaDFoqkxLrAUiNEN7n
                    name: Opdex Liquidity Pool Token
                    symbol: OLPT
                    decimals: 8
                    sats: "100000000"
                    totalSupply: "94.39473361"
                    attributes:
                      - Provisional
                    createdBlock: 2988918
                    modifiedBlock: 2989382
                    summary:
                      priceUsd: "323.92670749"
                      dailyPriceChangePercent: "0.21000000"
                      createdBlock: 2988918
                      modifiedBlock: 3043250
                  staking:
                    address: tTTuKbCR2UnsEByXBp1ynBz91J2yz63h1c
                    name: Testnet Opdex Token
                    symbol: TODX
                    decimals: 8
                    sats: "100000000"
                    totalSupply: "400000000.00000000"
                    attributes:
                      - NonProvisional
                      - Staking
                    distribution:
                      vault: t7hy4H51KzU6PPCL4QKCdgBGPLV9Jpmf9G
                      miningGovernance: tKFkNiL5KJ3Q4br929i6hHbB4X4mt1MigF
                      nextDistributionBlock: 3829900
                      history:
                        - vault: "100000000.00000000"
                          miningGovernance: "300000000.00000000"
                          block: 2848893
                    createdBlock: 2988890
                    modifiedBlock: 2989018
                    summary:
                      priceUsd: "0.00000000"
                      dailyPriceChangePercent: "0.00000000"
                      createdBlock: 2988890
                      modifiedBlock: 3043278
                miningPool:
                  address: tRs6rXfHuLhKZhWuWpycLASzAyn4kXo6bT
                  liquidityPool: tVFhXcS3gVb49MSTsaDFoqkxLrAUiNEN7n
                  miningPeriodEndBlock: 0
                  rewardPerBlock: "0.00000000"
                  rewardPerLpt: "0.00000000"
                  tokensMining: "4.14831968"
                  isActive: false
                  createdBlock: 2988918
                  modifiedBlock: 2992621
                summary:
                  reserves:
                    crs: "16676.38165376"
                    src: "0.53431082"
                    usd: "45559.31401812"
                    dailyUsdChangePercent: "-0.02000000"
                  rewards:
                    providerDailyUsd: "0.01000000"
                    marketDailyUsd: "0.00000000"
                    totalDailyUsd: "0.01000000"
                  volume:
                    dailyUsd: "4.26496572"
                  cost:
                    crsPerSrc: "31211.01244732"
                    srcPerCrs: "0.00003203"
                  staking:
                    weight: "0.00000000"
                    usd: "0.00000000"
                    dailyWeightChangePercent: "0.00000000"
                    nominated: true
                  createdBlock: 2988918
                  modifiedBlock: 3043296
          headers:
            Cache-Control:
              schema:
                type: string
                example: public, max-age=15
              description: Holds directives that control caching
        400:
          description: The request is not valid
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/validationProblemDetails"
              example:
                type: https://httpstatuses.com/400
                title: One or more validation errors occurred.
                status: 400
                errors:
                  pool:
                    - Invalid address.
                extensions:
                  traceId: 00-00000000000000000000000000000000-0000000000000000-00
        404:
          $ref: "#/components/responses/LiquidityPoolNotFound"
        429:
          $ref: "#/components/responses/TooManyRequests"
        500:
          $ref: "#/components/responses/InternalServerError"
        503:
          $ref: "#/components/responses/UnderMaintenance"
  /liquidity-pools/{pool}/history:
    get:
      tags:
        - Liquidity Pools
      summary: Get Liquidity Pool History
      description: Retrieves historical transactions, reserves, rewards, volume, cost and staking data for an Opdex liquidity pool. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
      operationId: getLiquidityPoolHistory
      parameters:
        - name: pool
          in: path
          description: Address of a liquidity pool
          required: true
          schema:
            $ref: "#/components/schemas/address"
          example: tVFhXcS3gVb49MSTsaDFoqkxLrAUiNEN7n
        - name: interval
          in: query
          description: Time range between each snapshot
          schema:
            $ref: "#/components/schemas/interval"
          example: 1D
        - name: startDateTime
          in: query
          description: Start time for which to retrieve snapshots
          schema:
            type: string
            format: date-time
          example: 2022-01-01T00:00:00Z
        - name: endDateTime
          in: query
          description: End time for which to retrieve snapshots
          schema:
            type: string
            format: date-time
          example: 2022-12-31T23:59:59
        - name: direction
          in: query
          description: Order direction of the results
          schema:
            $ref: "#/components/schemas/sortDirection"
          example: DESC
        - name: limit
          in: query
          description: Number of results per page; defaults to 168 for hourly snapshots (1 week), or 28 for daily snapshots (4 weeks)
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 750
            default: 168
          example: 100
        - name: cursor
          in: query
          description: Reference of the requested page, returned by a previous call
          schema:
            type: string
      responses:
        200:
          description: Liquidity pool snapshots found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/liquidityPoolSnapshotsResponse"
              example:
                results:
                  - timestamp: 2022-01-13T00:00:00Z
                    tranasctionCount: 5
                    reserves:
                      crs:
                        open: "1000.00000000"
                        high: "18446.48809942"
                        low: "1000.00000000"
                        close: "16679.49397419"
                      src:
                        open: "0.03202800"
                        high: "0.59080410"
                        low: "0.03202800"
                        close: "0.53421082"
                      usd:
                        open: "2731.96638000"
                        high: "50395.18531668"
                        low: "2731.96638000"
                        close: "45567.81677288"
                    rewards:
                      providerUsd: "0.00000000"
                      marketUsd: "0.00000000"
                      totalUsd: "0.00000000"
                    volume:
                      crs: "0.00000000"
                      src: "0.00000000"
                      usd: "0.00000000"
                    cost:
                      crsPerSrc:
                        open: "31222.68015486"
                        high: "31222.68125664"
                        low: "31222.68015486"
                        close: "31222.68091498"
                      srcPerCrs:
                        open: "0.00003202"
                        high: "0.00003202"
                        low: "0.00003202"
                        close: "0.00003202"
                    staking:
                      weight:
                        open: "0.00000000"
                        high: "0.00000000"
                        low: "0.00000000"
                        close: "0.00000000"
                      usd:
                        open: "0.00000000"
                        high: "0.00000000"
                        low: "0.00000000"
                        close: "0.00000000"
                  - timestamp: 2022-01-14T00:00:00Z
                    tranasctionCount: 1
                    reserves:
                      crs:
                        open: "16679.49397419"
                        high: "16679.49397419"
                        low: "16676.38165376"
                        close: "16676.38165376"
                      src:
                        open: "0.53421082"
                        high: "0.53431082"
                        low: "0.53421082"
                        close: "0.53431082"
                      usd:
                        open: "45567.81677288"
                        high: "45567.81677288"
                        low: "45559.31401812"
                        close: "45559.31401812"
                    rewards:
                      providerUsd: "0.01000000"
                      marketUsd: "0.00000000"
                      totalUsd: "0.01000000"
                    volume:
                      crs: "3.11232043"
                      src: "0.00000000"
                      usd: "4.26496572"
                    cost:
                      crsPerSrc:
                        open: "31222.68091498"
                        high: "31222.68091498"
                        low: "31211.01244732"
                        close: "31211.01244732"
                      srcPerCrs:
                        open: "0.00003202"
                        high: "0.00003203"
                        low: "0.00003202"
                        close: "0.00003203"
                    staking:
                      weight:
                        open: "0.00000000"
                        high: "0.00000000"
                        low: "0.00000000"
                        close: "0.00000000"
                      usd:
                        open: "0.00000000"
                        high: "0.00000000"
                        low: "0.00000000"
                        close: "0.00000000"
                paging: {}
          headers:
            Cache-Control:
              schema:
                type: string
                example: public, max-age=15
              description: Holds directives that control caching
        400:
          description: The request is not valid
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/validationProblemDetails"
              example:
                type: https://httpstatuses.com/400
                title: One or more validation errors occurred.
                status: 400
                errors:
                  pool:
                    - Invalid address.
                extensions:
                  traceId: 00-00000000000000000000000000000000-0000000000000000-00
        404:
          $ref: "#/components/responses/LiquidityPoolNotFound"
        429:
          $ref: "#/components/responses/TooManyRequests"
        500:
          $ref: "#/components/responses/InternalServerError"
        503:
          $ref: "#/components/responses/UnderMaintenance"
  /liquidity-pools/{pool}/add:
    post:
      tags:
        - Liquidity Pools
      summary: Build Add Liquidity Transaction Quote
      description: Builds a quote for a transaction to add liquidity to an Opdex liquidity pool. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
      operationId: buildAddLiquidityQuote
      parameters:
        - name: pool
          in: path
          description: Address of a liquidity pool
          required: true
          schema:
            $ref: "#/components/schemas/address"
          example: tVFhXcS3gVb49MSTsaDFoqkxLrAUiNEN7n
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/quoteAddLiquidityRequest"
            example:
              amountCrs: "500.00000000"
              amountSrc: "2500.00000000000000000"
              amountCrsMin: "495.00000000"
              amountSrcMin: "2490.00000000000000000"
              receipient: tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
              deadline: 3000000
      security:
        - opdexAuth: []
      responses:
        200:
          description: Built add liquidity quote
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/transactionQuoteResponse"
              example:
                result:
                  - "2500000000"
                  - "80099"
                  - "14150796"
                gasUsed: 61708
                events:
                  - from: tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
                    to: tVFhXcS3gVb49MSTsaDFoqkxLrAUiNEN7n
                    amount: "0.00080099"
                    eventType: TransferEvent
                    contract: tGSk2dVENuqAQ2rNXbui37XHuurFCTqadD
                    sortOrder: 0
                  - from: t6vc3nrbAurGs3i17HJUavZuw4ioKTiFCE
                    to: tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
                    amount: "0.14150796"
                    eventType: TransferEvent
                    contract: tVFhXcS3gVb49MSTsaDFoqkxLrAUiNEN7n
                    sortOrder: 1
                  - amountCrs: "25.50000000"
                    amountSrc: "0.00080099"
                    amountLpt: "0.14150796"
                    tokenSrc: tGSk2dVENuqAQ2rNXbui37XHuurFCTqadD
                    tokenLp: tVFhXcS3gVb49MSTsaDFoqkxLrAUiNEN7n
                    tokenLpTotalSupply: "94.53624157"
                    eventType: AddLiquidityEvent
                    contract: tVFhXcS3gVb49MSTsaDFoqkxLrAUiNEN7n
                    sortOrder: 2
                request:
                  sender: tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
                  to: tAFxpxRdcV9foADqD6gK3c8sY5MeANzFp5
                  amount: "25.00000000"
                  method: AddLiquidity
                  parameters:
                    - label: Token
                      value: 9#tGSk2dVENuqAQ2rNXbui37XHuurFCTqadD
                    - label: SRC Amount
                      value: 12#80099
                    - label: Minimum CRS Amount
                      value: 7#2400000000
                    - label: Minimum SRC Amount
                      value: 12#75000
                    - label: Recipient
                      value: 9#tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
                    - label: Deadline
                      value: 7#0
                  callback: https://v1-test-api.opdex.com/v1/transactions
          headers:
            Cache-Control:
              schema:
                type: string
                example: private, max-age=15
              description: Holds directives that control caching
        400:
          description: The request is not valid
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/validationProblemDetails"
              example:
                type: https://httpstatuses.com/400
                title: One or more validation errors occurred.
                status: 400
                errors:
                  pool:
                    - Invalid address.
                extensions:
                  traceId: 00-00000000000000000000000000000000-0000000000000000-00
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/LiquidityPoolNotFound"
        429:
          $ref: "#/components/responses/TooManyRequests"
        500:
          $ref: "#/components/responses/InternalServerError"
        503:
          $ref: "#/components/responses/UnderMaintenance"
  /liquidity-pools/{pool}/add/amount-in:
    post:
      tags:
        - Liquidity Pools
      summary: Add Liquidity Amount In Quote
      description: Retrieves an estimate for the amount of a token required to be added, give an input amount of the other token in the pair.
      operationId: getLiquidityAmountInQuote
      parameters:
        - name: pool
          in: path
          description: Address of a liquidity pool
          required: true
          schema:
            $ref: "#/components/schemas/address"
          example: tVFhXcS3gVb49MSTsaDFoqkxLrAUiNEN7n
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/liquidityAmountInQuoteRequest"
            example:
              amountIn: "100.00000000"
              tokenIn: CRS
      responses:
        200:
          description: Add liquidity amount in quote retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/liquidityAmountInQuoteResponse"
              example:
                amountIn: "0.00080099"
          headers:
            Cache-Control:
              schema:
                type: string
                example: public, max-age=15
              description: Holds directives that control caching
        400:
          description: The request is not valid
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/validationProblemDetails"
              example:
                type: https://httpstatuses.com/400
                title: One or more validation errors occurred.
                status: 400
                errors:
                  pool:
                    - Invalid address.
                extensions:
                  traceId: 00-00000000000000000000000000000000-0000000000000000-00
        404:
          $ref: "#/components/responses/LiquidityPoolNotFound"
        429:
          $ref: "#/components/responses/TooManyRequests"
        500:
          $ref: "#/components/responses/InternalServerError"
        503:
          $ref: "#/components/responses/UnderMaintenance"
  /liquidity-pools/{pool}/remove:
    post:
      tags:
        - Liquidity Pools
      summary: Build Remove Liquidity Transaction Quote
      description: Builds a quote for a transaction to remove liquidity from an Opdex liquidity pool. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
      operationId: buildRemoveLiquidityQuote
      parameters:
        - name: pool
          in: path
          description: Address of a liquidity pool
          required: true
          schema:
            $ref: "#/components/schemas/address"
          example: tVFhXcS3gVb49MSTsaDFoqkxLrAUiNEN7n
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/quoteRemoveLiquidityRequest"
            example:
              liquidity: "0.05000000"
              amountCrsMin: "5.00000000"
              amountSrcMin: "0.00005000"
              receipient: tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
              deadline: 3000000
      security:
        - opdexAuth: []
      responses:
        200:
          description: Built remove liquidity quote
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/transactionQuoteResponse"
              example:
                result:
                  - "883358690"
                  - "28301"
                gasUsed: 76032
                events:
                  - from: tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
                    to: tVFhXcS3gVb49MSTsaDFoqkxLrAUiNEN7n
                    amount: "0.05000000"
                    eventType: TransferEvent
                    contract: tVFhXcS3gVb49MSTsaDFoqkxLrAUiNEN7n
                    sortOrder: 0
                  - from: tVFhXcS3gVb49MSTsaDFoqkxLrAUiNEN7n
                    to: t6vc3nrbAurGs3i17HJUavZuw4ioKTiFCE
                    amount: "0.05000000"
                    eventType: TransferEvent
                    contract: tVFhXcS3gVb49MSTsaDFoqkxLrAUiNEN7n
                    sortOrder: 1
                  - from: tVFhXcS3gVb49MSTsaDFoqkxLrAUiNEN7n
                    to: tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
                    amount: "0.00028301"
                    eventType: TransferEvent
                    contract: tGSk2dVENuqAQ2rNXbui37XHuurFCTqadD
                    sortOrder: 2
                  - amountCrs: "8.83358690"
                    amountSrc: "0.00028301"
                    amountLpt: "0.05000000"
                    tokenSrc: tGSk2dVENuqAQ2rNXbui37XHuurFCTqadD
                    tokenLp: tVFhXcS3gVb49MSTsaDFoqkxLrAUiNEN7n
                    tokenLpTotalSupply: "94.34473361"
                    eventType: RemoveLiquidityEvent
                    contract: tVFhXcS3gVb49MSTsaDFoqkxLrAUiNEN7n
                    sortOrder: 3
                request:
                  sender: tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
                  to: tAFxpxRdcV9foADqD6gK3c8sY5MeANzFp5
                  amount: "0.00000000"
                  method: RemoveLiquidity
                  parameters:
                    - label: Token
                      value: 9#tGSk2dVENuqAQ2rNXbui37XHuurFCTqadD
                    - label: OLPT Amount
                      value: 12#5000000
                    - label: Minimum CRS Amount
                      value: 7#1
                    - label: Minimum SRC Amount
                      value: 12#1
                    - label: Recipient
                      value: 9#tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
                    - label: Deadline
                      value: 7#0
                  callback: https://v1-test-api.opdex.com/v1/transactions
          headers:
            Cache-Control:
              schema:
                type: string
                example: private, max-age=15
              description: Holds directives that control caching
        400:
          description: The request is not valid
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/validationProblemDetails"
              example:
                type: https://httpstatuses.com/400
                title: One or more validation errors occurred.
                status: 400
                errors:
                  pool:
                    - Invalid address.
                extensions:
                  traceId: 00-00000000000000000000000000000000-0000000000000000-00
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/LiquidityPoolNotFound"
        429:
          $ref: "#/components/responses/TooManyRequests"
        500:
          $ref: "#/components/responses/InternalServerError"
        503:
          $ref: "#/components/responses/UnderMaintenance"
  /liquidity-pools/{pool}/sync:
    post:
      tags:
        - Liquidity Pools
      summary: Build Sync Transaction Quote
      description: Builds a quote for a transaction to sync an Opdex liquidity pool. This transaction forces the reserves to equal the current token balances. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
      operationId: buildSyncQuote
      parameters:
        - name: pool
          in: path
          description: Address of a liquidity pool
          required: true
          schema:
            $ref: "#/components/schemas/address"
          example: tVFhXcS3gVb49MSTsaDFoqkxLrAUiNEN7n
      security:
        - opdexAuth: []
      responses:
        200:
          description: Built sync quote
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/transactionQuoteResponse"
              example:
                gasUsed: 21458
                events: []
                request:
                  sender: tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
                  to: tVFhXcS3gVb49MSTsaDFoqkxLrAUiNEN7n
                  amount: "0.00000000"
                  method: Sync
                  parameters: []
                  callback: https://v1-test-api.opdex.com/v1/transactions
          headers:
            Cache-Control:
              schema:
                type: string
                example: private, max-age=15
              description: Holds directives that control caching
        400:
          description: The request is not valid
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/validationProblemDetails"
              example:
                type: https://httpstatuses.com/400
                title: One or more validation errors occurred.
                status: 400
                errors:
                  pool:
                    - Invalid address.
                extensions:
                  traceId: 00-00000000000000000000000000000000-0000000000000000-00
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/LiquidityPoolNotFound"
        429:
          $ref: "#/components/responses/TooManyRequests"
        500:
          $ref: "#/components/responses/InternalServerError"
        503:
          $ref: "#/components/responses/UnderMaintenance"
  /liquidity-pools/{pool}/skim:
    post:
      tags:
        - Liquidity Pools
      summary: Build Skim Transaction Quote
      description: Builds a quote for a transaction to skim an Opdex liquidity pool. This transaction forces the token balances to equal the current reserves. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
      operationId: buildSkimQuote
      parameters:
        - name: pool
          in: path
          description: Address of a liquidity pool
          required: true
          schema:
            $ref: "#/components/schemas/address"
          example: tVFhXcS3gVb49MSTsaDFoqkxLrAUiNEN7n
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/quoteSkimRequest"
            example:
              receipient: tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
      security:
        - opdexAuth: []
      responses:
        200:
          description: Built skim quote
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/transactionQuoteResponse"
              example:
                gasUsed: 24173
                events:
                  - from: tVFhXcS3gVb49MSTsaDFoqkxLrAUiNEN7n
                    to: tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
                    amount: "0.00000000"
                    eventType: TransferEvent
                    contract: tVFhXcS3gVb49MSTsaDFoqkxLrAUiNEN7n
                    sortOrder: 0
                request:
                  sender: tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
                  to: tVFhXcS3gVb49MSTsaDFoqkxLrAUiNEN7n
                  amount: "0.00000000"
                  method: Skim
                  parameters:
                    - label: Recipient
                      value: 9#tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
                  callback: https://v1-test-api.opdex.com/v1/transactions
          headers:
            Cache-Control:
              schema:
                type: string
                example: private, max-age=15
              description: Holds directives that control caching
        400:
          description: The request is not valid
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/validationProblemDetails"
              example:
                type: https://httpstatuses.com/400
                title: One or more validation errors occurred.
                status: 400
                errors:
                  pool:
                    - Invalid address.
                extensions:
                  traceId: 00-00000000000000000000000000000000-0000000000000000-00
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/LiquidityPoolNotFound"
        429:
          $ref: "#/components/responses/TooManyRequests"
        500:
          $ref: "#/components/responses/InternalServerError"
        503:
          $ref: "#/components/responses/UnderMaintenance"
  /liquidity-pools/{pool}/staking/start:
    post:
      tags:
        - Liquidity Pools
      summary: Build Start Staking Transaction Quote
      description: Builds a quote for a transaction to begin staking in an Opdex liquidity pool. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
      operationId: buildStartStakingQuote
      parameters:
        - name: pool
          in: path
          description: Address of a liquidity pool
          required: true
          schema:
            $ref: "#/components/schemas/address"
          example: tVFhXcS3gVb49MSTsaDFoqkxLrAUiNEN7n
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/quoteStartStakingRequest"
            example:
              amount: "1000.00000000"
      security:
        - opdexAuth: []
      responses:
        200:
          description: Built start staking quote
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/transactionQuoteResponse"
              example:
                error:
                  friendly: "Unable to start staking, staking token transfer failed."
                  raw: "Stratis.SmartContracts.SmartContractAssertException: OPDEX: INVALID_TRANSFER_FROM\r\n   at Stratis.SmartContracts.SmartContract.Assert(Boolean condition, String message)\r\n   at OpdexLiquidityPool.SafeTransferFrom(Address token, Address from, Address to, UInt256 amount)\r\n   at OpdexStakingPool.StartStaking(UInt256 amount)"
                gasUsed: 27839
                events: []
                request:
                  sender: tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
                  to: tVFhXcS3gVb49MSTsaDFoqkxLrAUiNEN7n
                  amount: "0.00000000"
                  method: StartStaking
                  parameters:
                    - label: Amount
                      value: 12#100000000
                  callback: https://v1-test-api.opdex.com/v1/transactions
          headers:
            Cache-Control:
              schema:
                type: string
                example: private, max-age=15
              description: Holds directives that control caching
        400:
          description: The request is not valid
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/validationProblemDetails"
              example:
                type: https://httpstatuses.com/400
                title: One or more validation errors occurred.
                status: 400
                errors:
                  pool:
                    - Invalid address.
                extensions:
                  traceId: 00-00000000000000000000000000000000-0000000000000000-00
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/LiquidityPoolNotFound"
        429:
          $ref: "#/components/responses/TooManyRequests"
        500:
          $ref: "#/components/responses/InternalServerError"
        503:
          $ref: "#/components/responses/UnderMaintenance"
  /liquidity-pools/{pool}/staking/stop:
    post:
      tags:
        - Liquidity Pools
      summary: Build Stop Staking Transaction Quote
      description: Builds a quote for a transaction to stop staking in an Opdex liquidity pool. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
      operationId: buildStopStakingQuote
      parameters:
        - name: pool
          in: path
          description: Address of a liquidity pool
          required: true
          schema:
            $ref: "#/components/schemas/address"
          example: tVFhXcS3gVb49MSTsaDFoqkxLrAUiNEN7n
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/quoteStopStakingRequest"
            example:
              liquidate: true
              amount: "25000.00000000"
      security:
        - opdexAuth: []
      responses:
        200:
          description: Built stop staking quote
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/transactionQuoteResponse"
              example:
                error:
                  friendly: "Unable to stop staking, invalid amount."
                  raw: "Stratis.SmartContracts.SmartContractAssertException: OPDEX: INVALID_AMOUNT\r\n   at Stratis.SmartContracts.SmartContract.Assert(Boolean condition, String message)\r\n   at OpdexStakingPool.StopStaking(UInt256 amount, Boolean liquidate)"
                gasUsed: 15283
                events: []
                request:
                  sender: tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
                  to: tVFhXcS3gVb49MSTsaDFoqkxLrAUiNEN7n
                  amount: "0.00000000"
                  method: StopStaking
                  parameters:
                    - label: Amount
                      value: 12#100000000
                    - label: Liquidate Rewards
                      value: 1#False
                  callback: https://v1-test-api.opdex.com/v1/transactions
          headers:
            Cache-Control:
              schema:
                type: string
                example: private, max-age=15
              description: Holds directives that control caching
        400:
          description: The request is not valid
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/validationProblemDetails"
              example:
                type: https://httpstatuses.com/400
                title: One or more validation errors occurred.
                status: 400
                errors:
                  pool:
                    - Invalid address.
                extensions:
                  traceId: 00-00000000000000000000000000000000-0000000000000000-00
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/LiquidityPoolNotFound"
        429:
          $ref: "#/components/responses/TooManyRequests"
        500:
          $ref: "#/components/responses/InternalServerError"
        503:
          $ref: "#/components/responses/UnderMaintenance"
  /liquidity-pools/{pool}/staking/collect:
    post:
      tags:
        - Liquidity Pools
      summary: Build Collect Staking Rewards Transaction Quote
      description: Builds a quote for a transaction to collect staking rewards from an Opdex liquidity pool. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
      operationId: buildCollectStakingRewardsQuote
      parameters:
        - name: pool
          in: path
          description: Address of a liquidity pool
          required: true
          schema:
            $ref: "#/components/schemas/address"
          example: tVFhXcS3gVb49MSTsaDFoqkxLrAUiNEN7n
      security:
        - opdexAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/quoteCollectStakingRewardsRequest"
            example:
              liquidate: true
      responses:
        200:
          description: Built collect staking rewards quote
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/transactionQuoteResponse"
              example:
                gasUsed: 16755
                events: []
                request:
                  sender: tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
                  to: tVFhXcS3gVb49MSTsaDFoqkxLrAUiNEN7n
                  amount: "0.00000000"
                  method: CollectStakingRewards
                  parameters:
                    - label: Liquidate Rewards
                      value: 1#False
                  callback: https://v1-test-api.opdex.com/v1/transactions
          headers:
            Cache-Control:
              schema:
                type: string
                example: private, max-age=15
              description: Holds directives that control caching
        400:
          description: The request is not valid
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/validationProblemDetails"
              example:
                type: https://httpstatuses.com/400
                title: One or more validation errors occurred.
                status: 400
                errors:
                  pool:
                    - Invalid address.
                extensions:
                  traceId: 00-00000000000000000000000000000000-0000000000000000-00
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/LiquidityPoolNotFound"
        429:
          $ref: "#/components/responses/TooManyRequests"
        500:
          $ref: "#/components/responses/InternalServerError"
        503:
          $ref: "#/components/responses/UnderMaintenance"
  /markets:
    get:
      tags:
        - Markets
      summary: Get Markets
      description: Retrieves details for the tracked markets. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
      operationId: getMarkets
      parameters:
        - name: marketType
          in: query
          description: Market type filter
          schema:
            $ref: "#/components/schemas/marketTypeFilter"
          example: Staking
        - name: orderBy
          in: query
          description: Property by which to sort results
          schema:
            $ref: "#/components/schemas/marketOrderByType"
          example: DailyLiquidityUsdChangePercent
        - name: direction
          in: query
          description: Order direction of the results
          schema:
            $ref: "#/components/schemas/sortDirection"
          example: DESC
        - name: limit
          in: query
          description: Number of results per page
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 50
            default: 10
          example: 10
        - name: cursor
          in: query
          description: Reference of the requested page, returned by a previous call
          schema:
            type: string
      responses:
        200:
          description: Market results found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/marketsResponse"
              example:
                results:
                  - address: t7RorA7xQCMVYKPM1ibPE1NSswaLbpqLQb
                    owner: tHYHem7cLKgoLkeb792yn4WayqKzLrjJak
                    authPoolCreators: false
                    authTraders: false
                    authProviders: false
                    marketFeeEnabled: true
                    transactionFeePercent: "0.3"
                    tokens:
                      crs:
                        address: CRS
                        name: Cirrus
                        symbol: TCRS
                        decimals: 8
                        sats: "100000000"
                        totalSupply: "130000000.00000000"
                        attributes: []
                        createdBlock: 2988890
                        modifiedBlock: 2988890
                        summary:
                          priceUsd: "0.95057037"
                          dailyPriceChangePercent: "0.63000000"
                          createdBlock: 298889
                          modifiedBlock: 3043278
                      staking:
                        address: tTTuKbCR2UnsEByXBp1ynBz91J2yz63h1c
                        name: Testnet Opdex Token
                        symbol: TODX
                        decimals: 8
                        sats: "100000000"
                        totalSupply: "40000000000000000.00000000"
                        attributes:
                          - NonProvisional
                          - Staking
                        distribution:
                          vault: t7hy4H51KzU6PPCL4QKCdgBGPLV9Jpmf9G
                          miningGovernance: tKFkNiL5KJ3Q4br929i6hHbB4X4mt1MigF
                          nextDistributionBlock: 3829900
                          history:
                            - vault: "100000000.00000000"
                              miningGovernance: "300000000.00000000"
                              block: 2848893
                        createdBlock: 2988890
                        modifiedBlock: 2989018
                        summary:
                          priceUsd: "0.00000000"
                          dailyPriceChangePercent: "0.00000000"
                          createdBlock: 2988890
                          modifiedBlock: 3043278
                    createdBlock: 2988898
                    modifiedBlock: 2988898
                    summary:
                      liquidityUsd: "2490080.59003948"
                      dailyLiquidityUsdChangePercent: "4.32891108"
                      volumeUsd: "482002.55832901"
                      staking:
                        stakingWeight: "54883992.33820003"
                        dailyStakingWeightChangePercent: "7.33825455"
                        stakingUsd: "8713399.088810338"
                        dailyStakingUsdChangePercent: "9.58339281"
                      rewards:
                        providerDailyUsd: "1205.00639582"
                        marketDailyUsd: "241.00127916"
                        totalDailyUsd: "1446.00767498"
                      liquidityPoolCount: 8
                      createdBlock: 2988898
                      modifiedBlock: 3042951
                paging: {}
          headers:
            Cache-Control:
              schema:
                type: string
                example: public, max-age=15
              description: Holds directives that control caching
        400:
          description: The request is not valid
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/validationProblemDetails"
              example:
                type: https://httpstatuses.com/400
                title: One or more validation errors occurred.
                status: 400
                errors:
                  marketType:
                    - The value 'New' is not valid for MarketType.
                    - Filters cannot be provided alongside cursor.
                extensions:
                  traceId: 00-00000000000000000000000000000000-0000000000000000-00
        429:
          $ref: "#/components/responses/TooManyRequests"
        500:
          $ref: "#/components/responses/InternalServerError"
        503:
          $ref: "#/components/responses/UnderMaintenance"
  /markets/{market}:
    get:
      tags:
        - Markets
      summary: Get Market
      description: Retrieves details for an Opdex market.
      operationId: getMarket
      parameters:
        - name: market
          in: path
          description: Address of a market
          required: true
          schema:
            $ref: "#/components/schemas/address"
          example: t7RorA7xQCMVYKPM1ibPE1NSswaLbpqLQb
      responses:
        200:
          description: Market details found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/marketResponse"
              example:
                address: t7RorA7xQCMVYKPM1ibPE1NSswaLbpqLQb
                owner: tHYHem7cLKgoLkeb792yn4WayqKzLrjJak
                authPoolCreators: false
                authTraders: false
                authProviders: false
                marketFeeEnabled: true
                transactionFeePercent: "0.3"
                tokens:
                  crs:
                    address: CRS
                    name: Cirrus
                    symbol: TCRS
                    decimals: 8
                    sats: "100000000"
                    totalSupply: "130000000.00000000"
                    attributes: []
                    createdBlock: 2988890
                    modifiedBlock: 2988890
                    summary:
                      priceUsd: "0.95057037"
                      dailyPriceChangePercent: "0.63000000"
                      createdBlock: 2988890
                      modifiedBlock: 3043278
                  staking:
                    address: tTTuKbCR2UnsEByXBp1ynBz91J2yz63h1c
                    name: Testnet Opdex Token
                    symbol: TODX
                    decimals: 8
                    sats: "100000000"
                    totalSupply: "40000000000000000.00000000"
                    attributes:
                      - NonProvisional
                      - Staking
                    distribution:
                      vault: t7hy4H51KzU6PPCL4QKCdgBGPLV9Jpmf9G
                      miningGovernance: tKFkNiL5KJ3Q4br929i6hHbB4X4mt1MigF
                      nextDistributionBlock: 3829900
                      history:
                        - vault: "100000000.00000000"
                          miningGovernance: "300000000.00000000"
                          block: 2848893
                    createdBlock: 2988890
                    modifiedBlock: 2989018
                    summary:
                      priceUsd: "0.00000000"
                      dailyPriceChangePercent: "0.00000000"
                      createdBlock: 2988890
                      modifiedBlock: 3043278
                createdBlock: 2988898
                modifiedBlock: 2988898
                summary:
                  liquidityUsd: "2490080.59003948"
                  dailyLiquidityUsdChangePercent: "4.32891108"
                  volumeUsd: "482002.55832901"
                  staking:
                    stakingWeight: "54883992.33820003"
                    dailyStakingWeightChangePercent: "7.33825455"
                    stakingUsd: "8713399.088810338"
                    dailyStakingUsdChangePercent: "9.58339281"
                  rewards:
                    providerDailyUsd: "1205.00639582"
                    marketDailyUsd: "241.00127916"
                    totalDailyUsd: "1446.00767498"
                  liquidityPoolCount: 8
                  createdBlock: 2988898
                  modifiedBlock: 3042951
          headers:
            Cache-Control:
              schema:
                type: string
                example: public, max-age=15
              description: Holds directives that control caching
        400:
          description: The request is not valid
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/validationProblemDetails"
              example:
                type: https://httpstatuses.com/400
                title: One or more validation errors occurred.
                status: 400
                errors:
                  market:
                    - Invalid address.
                extensions:
                  traceId: 00-00000000000000000000000000000000-0000000000000000-00
        404:
          $ref: "#/components/responses/MarketNotFound"
        429:
          $ref: "#/components/responses/TooManyRequests"
        500:
          $ref: "#/components/responses/InternalServerError"
        503:
          $ref: "#/components/responses/UnderMaintenance"
  /markets/{market}/history:
    get:
      tags:
        - Markets
      summary: Get Market History
      description: Retrieves historical liquidity, rewards, volume and staking data for an Opdex market. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
      operationId: getMarketHistory
      parameters:
        - name: market
          in: path
          description: Address of a market
          required: true
          schema:
            $ref: "#/components/schemas/address"
          example: t7RorA7xQCMVYKPM1ibPE1NSswaLbpqLQb
        - name: startDateTime
          in: query
          description: Start time for which to retrieve snapshots
          schema:
            type: string
            format: date-time
          example: 2022-01-01T00:00:00Z
        - name: endDateTime
          in: query
          description: End time for which to retrieve snapshots
          schema:
            type: string
            format: date-time
          example: 2022-12-31T23:59:59
        - name: direction
          in: query
          description: Order direction of the results
          schema:
            $ref: "#/components/schemas/sortDirection"
          example: DESC
        - name: limit
          in: query
          description: Number of results per page; defaults to 28 (4 weeks)
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 750
            default: 28
          example: 10
        - name: cursor
          in: query
          description: Reference of the requested page, returned by a previous call
          schema:
            type: string
      responses:
        200:
          description: Market details found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/marketSnapshotsResponse"
              example:
                results:
                  - liquidityUsd:
                      open: "2731.96638000"
                      high: "186586.18004516"
                      low: "2731.96638000"
                      close: "173066.54009626"
                    volumeUsd: "349.25360470"
                    staking:
                      weight:
                        open: "0.00000000"
                        high: "0.00000000"
                        low: "0.00000000"
                        close: "0.00000000"
                      usd:
                        open: "0.00000000"
                        high: "0.00000000"
                        low: "0.00000000"
                        close: "0.00000000"
                    rewards:
                      providerUsd: "1.05000000"
                      marketUsd: "0.00000000"
                      totalUsd: "1.05000000"
                    timestamp: 2022-01-13T00:00:00Z
                paging:
                  next: ZGlyZWN0aW9uOkFTQztsaW1pdDoxO3BhZ2luZzpGb3J3YXJkO2ludGVydmFsOk9uZURheTtzdGFydDoxNjQwOTk1MjAwO2VuZDoxNjQzNTg3MjAwO3BvaW50ZXI6S0RFMk5ESXdNekl3TURBc0lERXA7
          headers:
            Cache-Control:
              schema:
                type: string
                example: public, max-age=15
              description: Holds directives that control caching
        400:
          description: The request is not valid
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/validationProblemDetails"
              example:
                type: https://httpstatuses.com/400
                title: One or more validation errors occurred.
                status: 400
                errors:
                  market:
                    - Invalid address.
                extensions:
                  traceId: 00-00000000000000000000000000000000-0000000000000000-00
        404:
          $ref: "#/components/responses/MarketNotFound"
        429:
          $ref: "#/components/responses/TooManyRequests"
        500:
          $ref: "#/components/responses/InternalServerError"
        503:
          $ref: "#/components/responses/UnderMaintenance"
  /markets/staking:
    post:
      tags:
        - Markets
      summary: Build Create Staking Market Transaction Quote
      description: Builds a quote for a create staking market transaction. Only the owner of the market deployer can successfully execute this call. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
      operationId: buildCreateStakingMarketQuote
      requestBody:
        description: Parameters used for the creation of the staking market
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/quoteCreateStakingMarketRequest"
            example:
              stakingToken: tTTuKbCR2UnsEByXBp1ynBz91J2yz63h1c
      security:
        - opdexAuth: []
      responses:
        200:
          description: Built create staking market quote
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/transactionQuoteResponse"
              example:
                result: tNiP367ETVYReXenrZXz5XQGVXt1FFHQz1
                gasUsed: 35864
                events:
                  - market: tNiP367ETVYReXenrZXz5XQGVXt1FFHQz1
                    owner: tHYHem7cLKgoLkeb792yn4WayqKzLrjJak
                    router: tEfYoLGDRhqUtcjQsQQxYvXo74RvyjVnmy
                    authPoolCreators: false
                    authProviders: false
                    authTraders: false
                    transactionFeePercent: "0.3"
                    stakingToken: tTTuKbCR2UnsEByXBp1ynBz91J2yz63h1c
                    enableMarketFee: true
                    eventType: CreateMarketEvent
                    contract: tJi67WDN6uoSRWgqTWr3Gmobc5xQ3AEfnC
                    sortOrder: 0
                request:
                  sender: tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
                  to: tJi67WDN6uoSRWgqTWr3Gmobc5xQ3AEfnC
                  amount: "0.00000000"
                  method: CreateStakingMarket
                  parameters:
                    - label: Staking Token
                      value: 9#tTTuKbCR2UnsEByXBp1ynBz91J2yz63h1c
                  callback: https://v1-test-api.opdex.com/v1/transactions
          headers:
            Cache-Control:
              schema:
                type: string
                example: private, max-age=15
              description: Holds directives that control caching
        400:
          description: The request is not valid
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/validationProblemDetails"
              example:
                type: https://httpstatuses.com/400
                title: One or more validation errors occurred.
                status: 400
                errors:
                  market:
                    - Invalid address.
                extensions:
                  traceId: 00-00000000000000000000000000000000-0000000000000000-00
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/MarketNotFound"
        429:
          $ref: "#/components/responses/TooManyRequests"
        500:
          $ref: "#/components/responses/InternalServerError"
        503:
          $ref: "#/components/responses/UnderMaintenance"
  /markets/standard:
    post:
      tags:
        - Markets
      summary: Build Create Standard Market Transaction Quote
      description: Builds a quote for a create standard market transaction. Only the owner of the market deployer can successfully execute this call. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
      operationId: buildCreateStandardMarketQuote
      requestBody:
        description: Parameters used for the creation of the standard market
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/quoteCreateStandardMarketRequest"
            example:
              owner: tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
              transactionFeePercent: "0.5"
              authPoolCreators: true
              authLiquidityProviders: false
              authTraders: false
              enableMarketFee: true
      security:
        - opdexAuth: []
      responses:
        200:
          description: Built create staking market quote
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/transactionQuoteResponse"
              example:
                result: tNiP367ETVYReXenrZXz5XQGVXt1FFHQz1
                gasUsed: 58196
                events:
                  - market: tNiP367ETVYReXenrZXz5XQGVXt1FFHQz1
                    owner: tJi67WDN6uoSRWgqTWr3Gmobc5xQ3AEfnC
                    router: tEfYoLGDRhqUtcjQsQQxYvXo74RvyjVnmy
                    authPoolCreators: false
                    authProviders: true
                    authTraders: false
                    transactionFeePercent: "0.5"
                    stakingToken: t6vc3nrbAurGs3i17HJUavZuw4ioKTiFCE
                    enableMarketFee: true
                    eventType: CreateMarketEvent
                    contract: tJi67WDN6uoSRWgqTWr3Gmobc5xQ3AEfnC
                    sortOrder: 0
                  - address: tEfYoLGDRhqUtcjQsQQxYvXo74RvyjVnmy
                    permission: Provide
                    isAuthorized: true
                    eventType: ChangeMarketPermissionEvent
                    contract: tNiP367ETVYReXenrZXz5XQGVXt1FFHQz1
                    sortOrder: 1
                  - from: tJi67WDN6uoSRWgqTWr3Gmobc5xQ3AEfnC
                    to: tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
                    eventType: SetPendingMarketOwnershipEvent
                    contract: tNiP367ETVYReXenrZXz5XQGVXt1FFHQz1
                    sortOrder: 2
                request:
                  sender: tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
                  to: tJi67WDN6uoSRWgqTWr3Gmobc5xQ3AEfnC
                  amount: "0.00000000"
                  method: CreateStandardMarket
                  parameters:
                    - label: Market Owner
                      value: 9#tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
                    - label: Transaction Fee
                      value: 5#5
                    - label: Authorize Providers
                      value: 1#False
                    - label: Authorize Pool Creators
                      value: 1#True
                    - label: Authorize Traders
                      value: 1#False
                    - label: Enable Fee
                      value: 1#True
                  callback: https://v1-test-api.opdex.com/v1/transactions
          headers:
            Cache-Control:
              schema:
                type: string
                example: private, max-age=15
              description: Holds directives that control caching
        400:
          description: The request is not valid
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/validationProblemDetails"
              example:
                type: https://httpstatuses.com/400
                title: One or more validation errors occurred.
                status: 400
                errors:
                  market:
                    - Invalid address.
                extensions:
                  traceId: 00-00000000000000000000000000000000-0000000000000000-00
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/MarketNotFound"
        429:
          $ref: "#/components/responses/TooManyRequests"
        500:
          $ref: "#/components/responses/InternalServerError"
        503:
          $ref: "#/components/responses/UnderMaintenance"
  /markets/{market}/standard/set-ownership:
    post:
      tags:
        - Markets
      summary: Build Set Market Ownership Transaction Quote
      description: Builds a quote for a set market ownership transaction. Only the owner of the market can successfully execute this call. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
      operationId: buildSetMarketOwnershipQuote
      parameters:
        - name: market
          in: path
          description: Address of a market
          required: true
          schema:
            $ref: "#/components/schemas/address"
          example: t7RorA7xQCMVYKPM1ibPE1NSswaLbpqLQb
      requestBody:
        description: Parameters used for setting the market owner
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/quoteSetMarketOwnerRequest"
            example:
              owner: tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
      security:
        - opdexAuth: []
      responses:
        200:
          description: Built set market ownership quote
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/transactionQuoteResponse"
              example:
                gasUsed: 10733
                events:
                  - from: tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
                    to: tHYHem7cLKgoLkeb792yn4WayqKzLrjJak
                    eventType: SetPendingMarketOwnershipEvent
                    contract: tSPtSt1eEnn5Sq9F9wccqpb5p1namDZVdf
                    sortOrder: 0
                request:
                  sender: tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
                  to: tSPtSt1eEnn5Sq9F9wccqpb5p1namDZVdf
                  amount: "0.00000000"
                  method: SetPendingOwnership
                  parameters:
                    - label: New Owner
                      value: 9#tHYHem7cLKgoLkeb792yn4WayqKzLrjJak
                  callback: https://v1-test-api.opdex.com/v1/transactions
          headers:
            Cache-Control:
              schema:
                type: string
                example: private, max-age=15
              description: Holds directives that control caching
        400:
          description: The request is not valid
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/validationProblemDetails"
              example:
                type: https://httpstatuses.com/400
                title: One or more validation errors occurred.
                status: 400
                errors:
                  market:
                    - Invalid address.
                extensions:
                  traceId: 00-00000000000000000000000000000000-0000000000000000-00
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/MarketNotFound"
        429:
          $ref: "#/components/responses/TooManyRequests"
        500:
          $ref: "#/components/responses/InternalServerError"
        503:
          $ref: "#/components/responses/UnderMaintenance"
  /markets/{market}/standard/claim-ownership:
    post:
      tags:
        - Markets
      summary: Build Claim Market Ownership Transaction Quote
      description: Builds a quote for a claim market ownership transaction. Only the pending owner of the market deployer can successfully execute this call. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
      operationId: buildClaimMarketOwnershipQuote
      parameters:
        - name: market
          in: path
          description: Address of a market
          required: true
          schema:
            $ref: "#/components/schemas/address"
          example: t7RorA7xQCMVYKPM1ibPE1NSswaLbpqLQb
      security:
        - opdexAuth: []
      responses:
        200:
          description: Built claim market ownership quote
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/transactionQuoteResponse"
              example:
                gasUsed: 11226
                events:
                  - from: tJi67WDN6uoSRWgqTWr3Gmobc5xQ3AEfnC
                    to: tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
                    eventType: ClaimPendingMarketOwnershipEvent
                    contract: tSPtSt1eEnn5Sq9F9wccqpb5p1namDZVdf
                    sortOrder: 0
                request:
                  sender: tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
                  to: tSPtSt1eEnn5Sq9F9wccqpb5p1namDZVdf
                  amount: "0.00000000"
                  method: ClaimPendingOwnership
                  parameters: []
                  callback: https://v1-test-api.opdex.com/v1/transactions
          headers:
            Cache-Control:
              schema:
                type: string
                example: private, max-age=15
              description: Holds directives that control caching
        400:
          description: The request is not valid
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/validationProblemDetails"
              example:
                type: https://httpstatuses.com/400
                title: One or more validation errors occurred.
                status: 400
                errors:
                  market:
                    - Invalid address.
                extensions:
                  traceId: 00-00000000000000000000000000000000-0000000000000000-00
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/MarketNotFound"
        429:
          $ref: "#/components/responses/TooManyRequests"
        500:
          $ref: "#/components/responses/InternalServerError"
        503:
          $ref: "#/components/responses/UnderMaintenance"
  /markets/{market}/standard/permissions/{address}:
    get:
      tags:
        - Markets
      summary: Get Market Permissions
      description: Retrieves permissions within a market that are assigned to an address.
      operationId: getMarketPermissions
      parameters:
        - name: market
          in: path
          description: Address of a market
          required: true
          schema:
            $ref: "#/components/schemas/address"
          example: t7RorA7xQCMVYKPM1ibPE1NSswaLbpqLQb
        - name: address
          in: path
          description: Address subject to the permissions
          required: true
          schema:
            $ref: "#/components/schemas/address"
          example: tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
      responses:
        200:
          description: Retrieved assigned market permissions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/marketPermission"
              example:
                - CreatePool
                - Trade
          headers:
            Cache-Control:
              schema:
                type: string
                example: public, max-age=15
              description: Holds directives that control caching
        400:
          description: The request is not valid
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/validationProblemDetails"
              example:
                type: https://httpstatuses.com/400
                title: One or more validation errors occurred.
                status: 400
                errors:
                  market:
                    - Invalid address.
                extensions:
                  traceId: 00-00000000000000000000000000000000-0000000000000000-00
        404:
          $ref: "#/components/responses/MarketNotFound"
        429:
          $ref: "#/components/responses/TooManyRequests"
        500:
          $ref: "#/components/responses/InternalServerError"
        503:
          $ref: "#/components/responses/UnderMaintenance"
    post:
      tags:
        - Markets
      summary: Build Set Market Permissions Transaction Quote
      description: Builds a quote for a set market permissions transaction. This call can only successfully be executed if done by the market owner, or an address which has been assigned this permission. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
      operationId: buildSetMarketPermissionsQuote
      parameters:
        - name: market
          in: path
          description: Address of a market
          required: true
          schema:
            $ref: "#/components/schemas/address"
          example: t7RorA7xQCMVYKPM1ibPE1NSswaLbpqLQb
        - name: address
          in: path
          description: Address subject to the permissions
          required: true
          schema:
            $ref: "#/components/schemas/address"
          example: tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
      requestBody:
        description: Parameters used for assigning a market permission
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/quoteSetMarketPermissionsRequest"
            example:
              permission: Provide
              authorize: true
      security:
        - opdexAuth: []
      responses:
        200:
          description: Built set market permissions quote
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/transactionQuoteResponse"
              example:
                gasUsed: 11181
                events:
                  - address: tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
                    permission: Provide
                    isAuthorized: true
                    eventType: ChangeMarketPermissionEvent
                    contract: tSPtSt1eEnn5Sq9F9wccqpb5p1namDZVdf
                    sortOrder: 0
                request:
                  sender: tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
                  to: tSPtSt1eEnn5Sq9F9wccqpb5p1namDZVdf
                  amount: "0.00000000"
                  method: Authorize
                  parameters:
                    - label: User
                      value: 9#tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
                    - label: Permission
                      value: 2#3
                    - label: Authorize
                      value: 1#True
                  callback: https://v1-test-api.opdex.com/v1/transactions
          headers:
            Cache-Control:
              schema:
                type: string
                example: private, max-age=15
              description: Holds directives that control caching
        400:
          description: The request is not valid
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/validationProblemDetails"
              example:
                type: https://httpstatuses.com/400
                title: One or more validation errors occurred.
                status: 400
                errors:
                  market:
                    - Invalid address.
                extensions:
                  traceId: 00-00000000000000000000000000000000-0000000000000000-00
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/MarketNotFound"
        429:
          $ref: "#/components/responses/TooManyRequests"
        500:
          $ref: "#/components/responses/InternalServerError"
        503:
          $ref: "#/components/responses/UnderMaintenance"
  /markets/{market}/standard/collect-fees:
    post:
      tags:
        - Markets
      summary: Build Collect Market Fees Transaction Quote
      description: Builds a quote for a collect market fees transaction. Only the owner of the market can successfully execute this call. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
      operationId: buildCollectMarketFeesQuote
      parameters:
        - name: market
          in: path
          description: Address of a market
          required: true
          schema:
            $ref: "#/components/schemas/address"
          example: t7RorA7xQCMVYKPM1ibPE1NSswaLbpqLQb
      requestBody:
        description: Parameters used to determine fees to collect
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/quoteCollectMarketFeesRequest"
            example:
              token: tGSk2dVENuqAQ2rNXbui37XHuurFCTqadD
              amount: "0.00000100"
      security:
        - opdexAuth: []
      responses:
        200:
          description: Built collect market fees quote
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/transactionQuoteResponse"
              example:
                gasUsed: 23792
                events:
                  - from: tSPtSt1eEnn5Sq9F9wccqpb5p1namDZVdf
                    to: tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
                    amount: "0.00000100"
                    eventType: TransferEvent
                    contract: tLizuHmyCZdibEMRCuiXzNuHuzDcbrFd93
                    sortOrder: 0
                request:
                  sender: tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
                  to: tSPtSt1eEnn5Sq9F9wccqpb5p1namDZVdf
                  amount: "0.00000100"
                  method: CollectMarketFees
                  parameters:
                    - label: Token
                      value: 9#tGSk2dVENuqAQ2rNXbui37XHuurFCTqadD
                    - label: Amount
                      value: 12#100
                  callback: https://v1-test-api.opdex.com/v1/transactions
          headers:
            Cache-Control:
              schema:
                type: string
                example: private, max-age=15
              description: Holds directives that control caching
        400:
          description: The request is not valid
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/validationProblemDetails"
              example:
                type: https://httpstatuses.com/400
                title: One or more validation errors occurred.
                status: 400
                errors:
                  market:
                    - Invalid address.
                extensions:
                  traceId: 00-00000000000000000000000000000000-0000000000000000-00
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/MarketNotFound"
        429:
          $ref: "#/components/responses/TooManyRequests"
        500:
          $ref: "#/components/responses/InternalServerError"
        503:
          $ref: "#/components/responses/UnderMaintenance"
  /markets/{market}/tokens:
    get:
      tags:
        - Market Tokens
      summary: Get Market Tokens
      description: Retrieves details of tokens tracked within a specified market. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
      operationId: getMarketTokens
      parameters:
        - name: market
          in: path
          description: Address of the market
          required: true
          schema:
            $ref: "#/components/schemas/address"
          example: t7RorA7xQCMVYKPM1ibPE1NSswaLbpqLQb
        - name: tokenAttributes
          in: query
          description: Token attributes filter
          schema:
            type: array
            items:
              $ref: "#/components/schemas/tokenAttributeFilter"
          example:
            - Provisional
        - name: nativeChains
          in: query
          description: Native chain filter
          schema:
            type: array
            items:
              $ref: "#/components/schemas/chainFilter"
          example:
            - Cirrus
        - name: tokens
          in: query
          description: Specific tokens to include
          schema:
            type: array
            items:
              $ref: "#/components/schemas/address"
              description: Address of a token
        - name: keyword
          in: query
          description: Keyword search against token address, name and ticker symbol
          schema:
            type: string
        - name: orderBy
          in: query
          description: Property by which to sort results
          schema:
            $ref: "#/components/schemas/tokenOrderByType"
          example: PriceUsd
        - name: direction
          in: query
          description: Order direction of the results
          schema:
            $ref: "#/components/schemas/sortDirection"
          example: DESC
        - name: limit
          in: query
          description: Number of results per page
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 50
            default: 10
          example: 10
        - name: cursor
          in: query
          description: Reference of the requested page, returned by a previous call
          schema:
            type: string
      responses:
        200:
          description: Market token results found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/marketTokensResponse"
              example:
                results:
                  - market: t7RorA7xQCMVYKPM1ibPE1NSswaLbpqLQb
                    liqudityPool: tVFhXcS3gVb49MSTsaDFoqkxLrAUiNEN7n
                    address: tGSk2dVENuqAQ2rNXbui37XHuurFCTqadD
                    name: Bitcoin (Wrapped)
                    symbol: TBTC
                    decimals: 8
                    sats: "100000000"
                    totalSupply: "21000000.00000000"
                    attributes:
                      - NonProvisional
                    createdBlock: 2988918
                    modifiedBlock: 2988918
                    summary:
                      priceUsd: "27852.57795481"
                      dailyPriceChangePercent: "0.77000000"
                      modifiedBlock: 3043250
                  - market: t7RorA7xQCMVYKPM1ibPE1NSswaLbpqLQb
                    liqudityPool: tFCyMPURX9pVWXuXQqYY2hJmRcCrhmBPfY
                    address: tF83sdXXt2nTkL7UyEYDVFMK4jTuYMbmR3
                    name: ETH (Wrapped)
                    symbol: TETH
                    decimals: 18
                    sats: "1000000000000000000"
                    totalSupply: "100000000.000000000000000000"
                    attributes:
                      - NonProvisional
                    createdBlock: 2988919
                    modifiedBlock: 2988919
                    summary:
                      priceUsd: "2294.33407690"
                      dailyPriceChangePercent: "0.77000000"
                      modifiedBlock: 3043250
                paging:
                  next: ZGlyZWN0aW9uOkRFU0M7bGltaXQ6MjtwYWdpbmc6Rm9yd2FyZDt0b2tlbkF0dHJpYnV0ZXM6Tm9uUHJvdmlzaW9uYWw7aW5jbHVkZVplcm9MaXF1aWRpdHk6VHJ1ZTtrZXl3b3JkOjtvcmRlckJ5OlByaWNlVXNkO3BvaW50ZXI6S0RJeU56UXVOVFkxTmprM09EUXNJRFlwOw==
          headers:
            Cache-Control:
              schema:
                type: string
                example: public, max-age=15
              description: Holds directives that control caching
        400:
          description: The request is not valid
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/validationProblemDetails"
              example:
                type: https://httpstatuses.com/400
                title: One or more validation errors occurred.
                status: 400
                errors:
                  tokenAttributes:
                    - Filters cannot be provided alongside cursor.
                extensions:
                  traceId: 00-00000000000000000000000000000000-0000000000000000-00
        404:
          $ref: "#/components/responses/MarketNotFound"
        429:
          $ref: "#/components/responses/TooManyRequests"
        500:
          $ref: "#/components/responses/InternalServerError"
        503:
          $ref: "#/components/responses/UnderMaintenance"
  /markets/{market}/tokens/{token}:
    get:
      tags:
        - Market Tokens
      summary: Get Market Token
      description: Retrieves details of a token, that is tracked within a specified market.
      operationId: getMarketToken
      parameters:
        - name: market
          in: path
          description: Address of the market
          required: true
          schema:
            $ref: "#/components/schemas/address"
          example: t7RorA7xQCMVYKPM1ibPE1NSswaLbpqLQb
        - name: token
          in: path
          description: Address of the token
          required: true
          schema:
            $ref: "#/components/schemas/address"
          example: tGSk2dVENuqAQ2rNXbui37XHuurFCTqadD
      responses:
        200:
          description: Market token found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/marketTokenResponse"
              example:
                market: t7RorA7xQCMVYKPM1ibPE1NSswaLbpqLQb
                liqudityPool: tVFhXcS3gVb49MSTsaDFoqkxLrAUiNEN7n
                address: tGSk2dVENuqAQ2rNXbui37XHuurFCTqadD
                name: Bitcoin (Wrapped)
                symbol: TBTC
                decimals: 8
                sats: "100000000"
                totalSupply: "21000000.00000000"
                attributes:
                  - NonProvisional
                createdBlock: 2988918
                modifiedBlock: 2988918
                summary:
                  priceUsd: "27852.57795481"
                  dailyPriceChangePercent: "0.77000000"
                  modifiedBlock: 3043250
          headers:
            Cache-Control:
              schema:
                type: string
                example: public, max-age=15
              description: Holds directives that control caching
        400:
          description: The request is not valid
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/validationProblemDetails"
              example:
                type: https://httpstatuses.com/400
                title: One or more validation errors occurred.
                status: 400
                errors:
                  token:
                    - Token must be a valid SRC token.
                extensions:
                  traceId: 00-00000000000000000000000000000000-0000000000000000-00
        404:
          $ref: "#/components/responses/MarketOrTokenNotFound"
        429:
          $ref: "#/components/responses/TooManyRequests"
        500:
          $ref: "#/components/responses/InternalServerError"
        503:
          $ref: "#/components/responses/UnderMaintenance"
  /markets/{market}/tokens/{token}/history:
    get:
      tags:
        - Market Tokens
      summary: Get Market Token History
      description: Retrieves historical pricing data for a token tracked within a specified market. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
      operationId: getMarketTokenHistory
      parameters:
        - name: market
          in: path
          description: Address of the market
          required: true
          schema:
            $ref: "#/components/schemas/address"
          example: t7RorA7xQCMVYKPM1ibPE1NSswaLbpqLQb
        - name: token
          in: path
          description: Address of the token
          required: true
          schema:
            $ref: "#/components/schemas/address"
          example: tGSk2dVENuqAQ2rNXbui37XHuurFCTqadD
        - name: interval
          in: query
          description: Time range between each snapshot
          schema:
            $ref: "#/components/schemas/interval"
          example: 1D
        - name: startDateTime
          in: query
          description: Start time for which to retrieve snapshots
          schema:
            type: string
            format: date-time
          example: 2022-01-01T00:00:00Z
        - name: endDateTime
          in: query
          description: End time for which to retrieve snapshots
          schema:
            type: string
            format: date-time
          example: 2022-12-31T23:59:59
        - name: direction
          in: query
          description: Order direction of the results
          schema:
            $ref: "#/components/schemas/sortDirection"
          example: DESC
        - name: limit
          in: query
          description: Number of results per page; defaults to 168 for hourly snapshots (1 week), or 28 for daily snapshots (4 weeks)
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 750
            default: 168
          example: 100
        - name: cursor
          in: query
          description: Reference of the requested page, returned by a previous call
          schema:
            type: string
      responses:
        200:
          description: Market token snapshot results found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/tokenSnapshotsResponse"
              example:
                properties:
                  results:
                    - price:
                        open: "54274.35344481"
                        high: "55172.00419378"
                        low: "54239.99642473"
                        close: "55000.14239378"
                      timestamp: 2022-01-04T00:00:00Z
                    - price:
                        open: "52159.53226778"
                        high: "54463.33523111"
                        low: "52159.53226778"
                        close: "54274.35344481"
                      timestamp: 2022-01-03T00:00:00Z
                    - price:
                        open: "53163.84322264"
                        high: "54339.99180028"
                        low: "52101.00022178"
                        close: "52159.53226778"
                      timestamp: 2022-01-02T00:00:00Z
                    - price:
                        open: "54293.91289928"
                        high: "54333.91319534"
                        low: "52983.129000420"
                        close: "53163.84322264"
                      timestamp: 2022-01-01T00:00:00Z
                  paging: {}
          headers:
            Cache-Control:
              schema:
                type: string
                example: public, max-age=15
              description: Holds directives that control caching
        400:
          description: The request is not valid
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/validationProblemDetails"
              example:
                type: https://httpstatuses.com/400
                title: One or more validation errors occurred.
                status: 400
                errors:
                  interval:
                    - Filters cannot be provided alongside cursor.
                extensions:
                  traceId: 00-00000000000000000000000000000000-0000000000000000-00
        404:
          $ref: "#/components/responses/MarketOrTokenNotFound"
        429:
          $ref: "#/components/responses/TooManyRequests"
        500:
          $ref: "#/components/responses/InternalServerError"
        503:
          $ref: "#/components/responses/UnderMaintenance"
  /markets/{market}/tokens/{token}/swap:
    post:
      tags:
        - Market Tokens
      summary: Build Swap Tokens Transaction Quote
      description: Builds a quote for a token swap transaction. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
      operationId: swap
      parameters:
        - name: market
          in: path
          description: Address of the market
          required: true
          schema:
            $ref: "#/components/schemas/address"
          example: t7RorA7xQCMVYKPM1ibPE1NSswaLbpqLQb
        - name: token
          in: path
          description: Address of the input token
          required: true
          schema:
            $ref: "#/components/schemas/address"
          example: tGSk2dVENuqAQ2rNXbui37XHuurFCTqadD
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/quoteSwapTransactionRequest"
            example:
              tokenOut: CRS
              tokenInAmount: "0.00250000"
              tokenOutAmount: "61.53143554"
              tokenInExactAmount: true
              tokenInMaximumAmount: "0.00250250"
              tokenOutMinimumAmount: "61.46990411"
              recipient: tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
              deadline: 100000000
      security:
        - opdexAuth: []
      responses:
        200:
          description: Built swap transaction quote
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/transactionQuoteResponse"
              example:
                result: 6153143554
                gasUsed: 60139
                events:
                  - from: tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
                    to: tVFhXcS3gVb49MSTsaDFoqkxLrAUiNEN7n
                    amount: "0.00250000"
                    eventType: TransferEvent
                    contract: tGSk2dVENuqAQ2rNXbui37XHuurFCTqadD
                    sortOrder: 0
                  - sender: tAFxpxRdcV9foADqD6gK3c8sY5MeANzFp5
                    to: tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
                    amountCrsIn: "0.00000000"
                    amountSrcIn: "0.00250000"
                    amountCrsOut: "61.53142554"
                    amountSrcOut: "0.00000000"
                    srcToken: tGSk2dVENuqAQ2rNXbui37XHuurFCTqadD
                    eventType: SwapEvent
                    contract: tVFhXcS3gVb49MSTsaDFoqkxLrAUiNEN7n
                    sortOrder: 2
                request:
                  sender: tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
                  to: t8XpH1pNYDgCnqk91ZQKLgpUVeJ7XmomLT
                  amount: "0.00000000"
                  method: SwapExactSrcForCrs
                  parameters:
                    - label: Amount In
                      value: 12#250000
                    - label: Minimum Amount Out
                      value: 7#6146990411
                    - label: Token In
                      value: 9#tGSk2dVENuqAQ2rNXbui37XHuurFCTqadD
                    - label: Recipient
                      value: 9#tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
                    - label: Deadline
                      value: 7#2960464
                  callback: https://v1-test-api.opdex.com/v1/transactions
          headers:
            Cache-Control:
              schema:
                type: string
                example: private, max-age=15
              description: Holds directives that control caching
        400:
          description: The request is not valid
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/validationProblemDetails"
              example:
                type: https://httpstatuses.com/400
                title: One or more validation errors occurred.
                status: 400
                errors:
                  market:
                    - Invalid address.
                extensions:
                  traceId: 00-00000000000000000000000000000000-0000000000000000-00
        404:
          $ref: "#/components/responses/MarketOrTokenNotFound"
        429:
          $ref: "#/components/responses/TooManyRequests"
        500:
          $ref: "#/components/responses/InternalServerError"
        503:
          $ref: "#/components/responses/UnderMaintenance"
  /markets/{market}/tokens/{token}/swap/amount-in:
    post:
      tags:
        - Market Tokens
      summary: Swap Amount In Quote
      description: Retrieves an estimate for the amount of tokens to be input, given a swap output.
      operationId: getSwapAmountInQuote
      parameters:
        - name: market
          in: path
          description: Address of the market
          required: true
          schema:
            $ref: "#/components/schemas/address"
          example: t7RorA7xQCMVYKPM1ibPE1NSswaLbpqLQb
        - name: token
          in: path
          description: Address of the input token
          required: true
          schema:
            $ref: "#/components/schemas/address"
          example: tGSk2dVENuqAQ2rNXbui37XHuurFCTqadD
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/swapAmountInQuoteRequest"
            example:
              tokenOut: CRS
              tokenOutAmount: "10.00000000"
      responses:
        200:
          description: Swap amount in quote retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/swapAmountInQuoteResponse"
              example:
                amountIn: "0.00038271"
          headers:
            Cache-Control:
              schema:
                type: string
                example: public, max-age=15
              description: Holds directives that control caching
        400:
          description: The request is not valid
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/validationProblemDetails"
              example:
                type: https://httpstatuses.com/400
                title: One or more validation errors occurred.
                status: 400
                errors:
                  market:
                    - Invalid address.
                extensions:
                  traceId: 00-00000000000000000000000000000000-0000000000000000-00
        404:
          $ref: "#/components/responses/MarketOrTokenNotFound"
        429:
          $ref: "#/components/responses/TooManyRequests"
        500:
          $ref: "#/components/responses/InternalServerError"
        503:
          $ref: "#/components/responses/UnderMaintenance"
  /markets/{market}/tokens/{token}/swap/amount-out:
    post:
      tags:
        - Market Tokens
      summary: Swap Amount Out Quote
      description: Retrieves an estimate for the amount of tokens output, given a swap input.
      operationId: getSwapAmountOutQuote
      parameters:
        - name: market
          in: path
          description: Address of the market
          required: true
          schema:
            $ref: "#/components/schemas/address"
          example: t7RorA7xQCMVYKPM1ibPE1NSswaLbpqLQb
        - name: token
          in: path
          description: Address of the input token
          required: true
          schema:
            $ref: "#/components/schemas/address"
          example: tGSk2dVENuqAQ2rNXbui37XHuurFCTqadD
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/swapAmountOutQuoteRequest"
            example:
              tokenIn: CRS
              tokenInAmount: "1000.00000000"
      responses:
        200:
          description: Swap amount out quote retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/swapAmountOutQuoteResponse"
              example:
                amountOut: "0.15319188"
          headers:
            Cache-Control:
              schema:
                type: string
                example: public, max-age=15
              description: Holds directives that control caching
        400:
          description: The request is not valid
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/validationProblemDetails"
              example:
                type: https://httpstatuses.com/400
                title: One or more validation errors occurred.
                status: 400
                errors:
                  market:
                    - Invalid address.
                extensions:
                  traceId: 00-00000000000000000000000000000000-0000000000000000-00
        404:
          $ref: "#/components/responses/MarketOrTokenNotFound"
        429:
          $ref: "#/components/responses/TooManyRequests"
        500:
          $ref: "#/components/responses/InternalServerError"
        503:
          $ref: "#/components/responses/UnderMaintenance"
  /mining-governances:
    get:
      tags:
        - Mining Governances
      summary: Get Mining Governances
      description: Retrieves details for all tracked mining governances.  This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
      operationId: getMiningGovernances
      parameters:
        - name: minedToken
          in: query
          description: Address of the mined token
          schema:
            $ref: "#/components/schemas/address"
          example: tTTuKbCR2UnsEByXBp1ynBz91J2yz63h1c
        - name: direction
          in: query
          description: Order direction of the results
          schema:
            $ref: "#/components/schemas/sortDirection"
          example: DESC
        - name: limit
          in: query
          description: Number of results per page
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 50
            default: 10
          example: 10
        - name: cursor
          in: query
          description: Reference of the requested page, returned by a previous call
          schema:
            type: string
      responses:
        200:
          description: Mining governance results found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/miningGovernancesResponse"
              example:
                results:
                  - address: tKFkNiL5KJ3Q4br929i6hHbB4X4mt1MigF
                    periodEndBlock: 2987296
                    periodRemainingBlocks: 5918
                    periodBlockDuration: 164250
                    periodsUntilRewardReset: 11
                    miningPoolRewardPerPeriod: "6250000.00000000"
                    totalRewardsPerPeriod: "25000000.00000000"
                    minedToken: tTTuKbCR2UnsEByXBp1ynBz91J2yz63h1c
                    createdBlock: 2988890
                    modifiedBlock: 2989018
                paging: {}
          headers:
            Cache-Control:
              schema:
                type: string
                example: public, max-age=15
              description: Holds directives that control caching
        400:
          description: The request is not valid
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/validationProblemDetails"
              example:
                type: https://httpstatuses.com/400
                title: One or more validation errors occurred.
                status: 400
                errors:
                  minedToken:
                    - Invalid address.
                    - Filters cannot be provided alongside cursor.
                extensions:
                  traceId: 00-00000000000000000000000000000000-0000000000000000-00
        429:
          $ref: "#/components/responses/TooManyRequests"
        500:
          $ref: "#/components/responses/InternalServerError"
        503:
          $ref: "#/components/responses/UnderMaintenance"
  /mining-governances/{governance}:
    get:
      tags:
        - Mining Governances
      summary: Get Mining Governance
      description: Retrieves details for a tracked mining governance.
      operationId: getMiningGovernance
      parameters:
        - name: governance
          in: path
          description: Address of the mining governance contract
          required: true
          schema:
            $ref: "#/components/schemas/address"
          example: tKFkNiL5KJ3Q4br929i6hHbB4X4mt1MigF
      responses:
        200:
          description: Mining governance details found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/miningGovernanceResponse"
              example:
                address: tKFkNiL5KJ3Q4br929i6hHbB4X4mt1MigF
                periodEndBlock: 2987296
                periodRemainingBlocks: 5918
                periodBlockDuration: 164250
                periodsUntilRewardReset: 11
                miningPoolRewardPerPeriod: "6250000.00000000"
                totalRewardsPerPeriod: "25000000.00000000"
                minedToken: tTTuKbCR2UnsEByXBp1ynBz91J2yz63h1c
                createdBlock: 2988890
                modifiedBlock: 2989018
          headers:
            Cache-Control:
              schema:
                type: string
                example: public, max-age=15
              description: Holds directives that control caching
        400:
          description: The request is not valid
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/validationProblemDetails"
              example:
                type: https://httpstatuses.com/400
                title: One or more validation errors occurred.
                status: 400
                errors:
                  governance:
                    - Invalid address.
                extensions:
                  traceId: 00-00000000000000000000000000000000-0000000000000000-00
        404:
          $ref: "#/components/responses/MiningGovernanceNotFound"
        429:
          $ref: "#/components/responses/TooManyRequests"
        500:
          $ref: "#/components/responses/InternalServerError"
        503:
          $ref: "#/components/responses/UnderMaintenance"
  /mining-governances/{governance}/reward-mining-pools:
    post:
      tags:
        - Mining Governances
      summary: Build Reward Mining Pools Transaction Quote
      description: Builds a quote for a reward mining pools transaction. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
      operationId: buildRewardMiningPoolsQuote
      parameters:
        - name: governance
          in: path
          description: Address of the mining governance contract
          required: true
          schema:
            $ref: "#/components/schemas/address"
          example: tKFkNiL5KJ3Q4br929i6hHbB4X4mt1MigF
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/quoteRewardMiningPoolsRequest"
            example:
              fullDistribution: true
      security:
        - opdexAuth: []
      responses:
        200:
          description: Built reward mining pools quote
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/transactionQuoteResponse"
              example:
                error:
                  friendly: Unable to reward mining pools, nomination period not yet ended.
                  raw: "Stratis.SmartContracts.SmartContractAssertException: OPDEX: NOMINATION_PERIOD_ACTIVE\n   at Stratis.SmartContracts.SmartContract.Assert(Boolean condition, String message)\n   at OpdexMiningGovernance.EnsureNominationPeriodEnded()\n   at OpdexMiningGovernance.RewardMiningPools()"
                gasUsed: 10070
                events: []
                request:
                  sender: tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
                  to: tKFkNiL5KJ3Q4br929i6hHbB4X4mt1MigF
                  amount: "0.00000000"
                  method: RewardMiningPools
                  parameters: []
                  callback: https://v1-test-api.opdex.com/v1/transactions
          headers:
            Cache-Control:
              schema:
                type: string
                example: private, max-age=15
              description: Holds directives that control caching
        400:
          description: The request is not valid
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/validationProblemDetails"
              example:
                type: https://httpstatuses.com/400
                title: One or more validation errors occurred.
                status: 400
                errors:
                  governance:
                    - Invalid address.
                extensions:
                  traceId: 00-00000000000000000000000000000000-0000000000000000-00
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/MiningGovernanceNotFound"
        429:
          $ref: "#/components/responses/TooManyRequests"
        500:
          $ref: "#/components/responses/InternalServerError"
        503:
          $ref: "#/components/responses/UnderMaintenance"
  /mining-pools:
    get:
      tags:
        - Mining Pools
      summary: Get Mining Pools
      description: Retrieves details of all tracked mining pools across staking markets. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
      operationId: getMiningPools
      parameters:
        - name: liquidityPools
          in: query
          description: Liquidity pools used for mining
          schema:
            type: array
            items:
              $ref: "#/components/schemas/address"
        - name: miningStatus
          in: query
          description: Mining pool activity status
          schema:
            $ref: "#/components/schemas/miningActivityStatus"
          example: Inactive
        - name: direction
          in: query
          description: Order direction of the results
          schema:
            $ref: "#/components/schemas/sortDirection"
          example: DESC
        - name: limit
          in: query
          description: Number of results per page
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 50
            default: 10
          example: 10
        - name: cursor
          in: query
          description: Reference of the requested page, returned by a previous call
          schema:
            type: string
      responses:
        200:
          description: Mining pool results found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/miningPoolsResponse"
              example:
                results:
                  - address: tG7WcPzCQmHMf6mVKiXsDVoQkADLm6Tvm1
                    liquidityPool: tFzjCy1sXXNuUqFghC9oyxSisyvSmLGkAF
                    miningPeriodEndBlock: 0
                    rewardPerBlock: "0.00000000"
                    rewardPerLpt: "0.00000000"
                    tokensMining: "0.00000000"
                    isActive: false
                    createdBlock: 2991252
                    modifiedBlock: 2991252
                  - address: tJL3GQFf2xupWKvgXHuQBuMiAuutLs3Q4j
                    liquidityPool: tCE8LfkCj9HJUZu3dtgERNFfquMVJVe4sh
                    miningPeriodEndBlock: 0
                    rewardPerBlock: "0.00000000"
                    rewardPerLpt: "0.00000000"
                    tokensMining: "0.00000000"
                    isActive: false
                    createdBlock: 2988927
                    modifiedBlock: 2988927
                  - address: t9V19aoUakGooM8hXDCrR52NmTS7ZnmN31
                    liquidityPool: tCorSgPVt6pF5Q4gzcrZWDZ8f7ERVxhwAd
                    miningPeriodEndBlock: 0
                    rewardPerBlock: "0.00000000"
                    rewardPerLpt: "0.00000000"
                    tokensMining: "2314.82289849"
                    isActive: false
                    createdBlock: 2988925
                    modifiedBlock: 2992615
                paging: {}
          headers:
            Cache-Control:
              schema:
                type: string
                example: public, max-age=15
              description: Holds directives that control caching
        400:
          description: The request is not valid
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/validationProblemDetails"
              example:
                type: https://httpstatuses.com/400
                title: One or more validation errors occurred.
                status: 400
                errors:
                  miningStatus:
                    - The value 'Mining' is invalid.
                extensions:
                  traceId: 00-00000000000000000000000000000000-0000000000000000-00
        429:
          $ref: "#/components/responses/TooManyRequests"
        500:
          $ref: "#/components/responses/InternalServerError"
        503:
          $ref: "#/components/responses/UnderMaintenance"
  /mining-pools/{pool}:
    get:
      tags:
        - Mining Pools
      summary: Get Mining Pool
      description: Retrieves details of a tracked mining pool by its contract address.
      operationId: getMiningPool
      parameters:
        - name: pool
          in: path
          description: Address of a mining pool
          required: true
          schema:
            $ref: "#/components/schemas/address"
          example: tRs6rXfHuLhKZhWuWpycLASzAyn4kXo6bT
      responses:
        200:
          description: Mining pool details found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/miningPoolResponse"
              example:
                address: tRs6rXfHuLhKZhWuWpycLASzAyn4kXo6bT
                liquidityPool: tVFhXcS3gVb49MSTsaDFoqkxLrAUiNEN7n
                miningPeriodEndBlock: 0
                rewardPerBlock: "0.00000000"
                rewardPerLpt: "0.00000000"
                tokensMining: "8.80764531"
                isActive: false
                createdBlock: 2988918
                modifiedBlock: 2992621
          headers:
            Cache-Control:
              schema:
                type: string
                example: public, max-age=15
              description: Holds directives that control caching
        400:
          description: The request is not valid
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/validationProblemDetails"
              example:
                type: https://httpstatuses.com/400
                title: One or more validation errors occurred.
                status: 400
                errors:
                  pool:
                    - Invalid address.
                extensions:
                  traceId: 00-00000000000000000000000000000000-0000000000000000-00
        404:
          $ref: "#/components/responses/MiningPoolNotFound"
        429:
          $ref: "#/components/responses/TooManyRequests"
        500:
          $ref: "#/components/responses/InternalServerError"
        503:
          $ref: "#/components/responses/UnderMaintenance"
  /mining-pools/{pool}/start:
    post:
      tags:
        - Mining Pools
      summary: Build Start Mining Transaction Quote
      description: Builds a quote for a start mining transaction. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
      operationId: buildStartMiningQuote
      parameters:
        - name: pool
          in: path
          description: Address of a mining pool
          required: true
          schema:
            $ref: "#/components/schemas/address"
          example: tRs6rXfHuLhKZhWuWpycLASzAyn4kXo6bT
      requestBody:
        description: Details for a start mining transaction request
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/quoteStartMiningRequest"
            example:
              amount: "0.10000000"
      security:
        - opdexAuth: []
      responses:
        200:
          description: Built start mining quote
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/transactionQuoteResponse"
              example:
                gasUsed: 33762
                events:
                  - from: tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
                    to: tRs6rXfHuLhKZhWuWpycLASzAyn4kXo6bT
                    amount: "0.10000000"
                    eventType: TransferEvent
                    contract: tVFhXcS3gVb49MSTsaDFoqkxLrAUiNEN7n
                    sortOrder: 0
                  - miner: tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
                    amount: "0.10000000"
                    totalSupply: "8.90764531"
                    minerBalance: "3.24831968"
                    eventType: StartMiningEvent
                    contract: tRs6rXfHuLhKZhWuWpycLASzAyn4kXo6bT
                    sortOrder: 1
                request:
                  sender: tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
                  to: tRs6rXfHuLhKZhWuWpycLASzAyn4kXo6bT
                  amount: "0.00000000"
                  method: StartMining
                  parameters:
                    - label: Amount
                      value: 12#10000000
                  callback: https://v1-test-api.opdex.com/v1/transactions
          headers:
            Cache-Control:
              schema:
                type: string
                example: private, max-age=15
              description: Holds directives that control caching
        400:
          description: The request is not valid
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/validationProblemDetails"
              example:
                type: https://httpstatuses.com/400
                title: One or more validation errors occurred.
                status: 400
                errors:
                  pool:
                    - Invalid address.
                extensions:
                  traceId: 00-00000000000000000000000000000000-0000000000000000-00
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/MiningPoolNotFound"
        429:
          $ref: "#/components/responses/TooManyRequests"
        500:
          $ref: "#/components/responses/InternalServerError"
        503:
          $ref: "#/components/responses/UnderMaintenance"
  /mining-pools/{pool}/stop:
    post:
      tags:
        - Mining Pools
      summary: Build Stop Mining Transaction Quote
      description: Builds a quote for a stop mining transaction. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
      operationId: buildStopMiningQuote
      parameters:
        - name: pool
          in: path
          description: Address of a mining pool
          required: true
          schema:
            $ref: "#/components/schemas/address"
          example: tRs6rXfHuLhKZhWuWpycLASzAyn4kXo6bT
      requestBody:
        description: Details for a stop mining transaction request
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/quoteStopMiningRequest"
            example:
              amount: "0.10000000"
      security:
        - opdexAuth: []
      responses:
        200:
          description: Built stop mining quote
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/transactionQuoteResponse"
              example:
                gasUsed: 31364
                events:
                  - from: tRs6rXfHuLhKZhWuWpycLASzAyn4kXo6bT
                    to: tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
                    amount: "0.10000000"
                    eventType: TransferEvent
                    contract: tVFhXcS3gVb49MSTsaDFoqkxLrAUiNEN7n
                    sortOrder: 0
                  - miner: tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
                    amount: "0.10000000"
                    totalSupply: "8.70764531"
                    minerBalance: "3.04831968"
                    eventType: StopMiningEvent
                    contract: tRs6rXfHuLhKZhWuWpycLASzAyn4kXo6bT
                    sortOrder: 1
                request:
                  sender: tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
                  to: tRs6rXfHuLhKZhWuWpycLASzAyn4kXo6bT
                  amount: "0.00000000"
                  method: StopMining
                  parameters:
                    - label: Amount
                      value: 12#10000000
                  callback: https://v1-test-api.opdex.com/v1/transactions
          headers:
            Cache-Control:
              schema:
                type: string
                example: private, max-age=15
              description: Holds directives that control caching
        400:
          description: The request is not valid
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/validationProblemDetails"
              example:
                type: https://httpstatuses.com/400
                title: One or more validation errors occurred.
                status: 400
                errors:
                  pool:
                    - Invalid address.
                extensions:
                  traceId: 00-00000000000000000000000000000000-0000000000000000-00
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/MiningPoolNotFound"
        429:
          $ref: "#/components/responses/TooManyRequests"
        500:
          $ref: "#/components/responses/InternalServerError"
        503:
          $ref: "#/components/responses/UnderMaintenance"
  /mining-pools/{pool}/collect:
    post:
      tags:
        - Mining Pools
      summary: Build Collect Mining Rewards Transaction Quote
      description: Builds a quote for a collect mining rewards transaction. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
      operationId: buildCollectMiningRewardsQuote
      parameters:
        - name: pool
          in: path
          description: Address of a mining pool
          required: true
          schema:
            $ref: "#/components/schemas/address"
          example: tRs6rXfHuLhKZhWuWpycLASzAyn4kXo6bT
      security:
        - opdexAuth: []
      responses:
        200:
          description: Built collect mining rewards quote
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/transactionQuoteResponse"
              example:
                gasUsed: 15014
                events: []
                request:
                  sender: tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
                  to: tRs6rXfHuLhKZhWuWpycLASzAyn4kXo6bT
                  amount: "0.00000000"
                  method: CollectMiningRewards
                  parameters: []
                  callback: https://v1-test-api.opdex.com/v1/transactions
          headers:
            Cache-Control:
              schema:
                type: string
                example: private, max-age=15
              description: Holds directives that control caching
        400:
          description: The request is not valid
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/validationProblemDetails"
              example:
                type: https://httpstatuses.com/400
                title: One or more validation errors occurred.
                status: 400
                errors:
                  pool:
                    - Invalid address.
                extensions:
                  traceId: 00-00000000000000000000000000000000-0000000000000000-00
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/MiningPoolNotFound"
        429:
          $ref: "#/components/responses/TooManyRequests"
        500:
          $ref: "#/components/responses/InternalServerError"
        503:
          $ref: "#/components/responses/UnderMaintenance"
  /status:
    get:
      tags:
        - Status
      summary: Get Status
      description: Retrieves status details for the running instance of the API.
      operationId: getStatus
      responses:
        200:
          description: Status details found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/statusResponse"
              example:
                commit: 92ec53dc8388bc835eae5a892b29cb9519de7d97
                identifier: ae89af2a-9774-4956-aa40-507edd38d200
                underMaintenance: false
        429:
          $ref: "#/components/responses/TooManyRequests"
        500:
          $ref: "#/components/responses/InternalServerError"
  /tokens:
    get:
      tags:
        - Tokens
      summary: Get Tokens
      description: Retrieves details of all tracked tokens across markets. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
      operationId: getTokens
      parameters:
        - name: tokenAttributes
          in: query
          description: Token attributes filter
          schema:
            type: array
            items:
              $ref: "#/components/schemas/tokenAttributeFilter"
          example:
            - Provisional
        - name: nativeChains
          in: query
          description: Native chain filter
          schema:
            type: array
            items:
              $ref: "#/components/schemas/chainFilter"
          example:
            - Cirrus
        - name: tokens
          in: query
          description: Specific tokens to include
          schema:
            type: array
            items:
              $ref: "#/components/schemas/address"
              description: Address of a token
        - name: keyword
          in: query
          description: Keyword search against token address, name and ticker symbol
          schema:
            type: string
        - name: orderBy
          in: query
          description: Property by which to sort results
          schema:
            $ref: "#/components/schemas/tokenOrderByType"
        - name: direction
          in: query
          description: Order direction of the results
          schema:
            $ref: "#/components/schemas/sortDirection"
          example: DESC
        - name: limit
          in: query
          description: Number of results per page
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 50
            default: 10
          example: 10
        - name: cursor
          in: query
          description: Reference of the requested page, returned by a previous call
          schema:
            type: string
      responses:
        200:
          description: Token results found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/tokensResponse"
              example:
                results:
                  - address: tGSk2dVENuqAQ2rNXbui37XHuurFCTqadD
                    name: Bitcoin (Wrapped)
                    symbol: TBTC
                    decimals: 8
                    sats: "100000000"
                    totalSupply: "21000000.00000000"
                    attributes:
                      - NonProvisional
                    createdBlock: 2988918
                    modifiedBlock: 2988918
                    summary:
                      priceUsd: "27852.57795481"
                      dailyPriceChangePercent: "0.77000000"
                      createdBlock: 2988918
                      modifiedBlock: 3043250
                  - address: tF83sdXXt2nTkL7UyEYDVFMK4jTuYMbmR3
                    name: ETH (Wrapped)
                    symbol: TETH
                    decimals: 18
                    sats: "1000000000000000000"
                    totalSupply: "100000000.000000000000000000"
                    attributes:
                      - NonProvisional
                    createdBlock: 2988919
                    modifiedBlock: 2988919
                    summary:
                      priceUsd: "2294.33407690"
                      dailyPriceChangePercent: "0.77000000"
                      createdBlock: 2988919
                      modifiedBlock: 3043250
                paging:
                  next: ZGlyZWN0aW9uOkRFU0M7bGltaXQ6MjtwYWdpbmc6Rm9yd2FyZDt0b2tlbkF0dHJpYnV0ZXM6Tm9uUHJvdmlzaW9uYWw7aW5jbHVkZVplcm9MaXF1aWRpdHk6VHJ1ZTtrZXl3b3JkOjtvcmRlckJ5OlByaWNlVXNkO3BvaW50ZXI6S0RFeE16Y3VNamd5T0RRNE9USXNJRFlwOw==
          headers:
            Cache-Control:
              schema:
                type: string
                example: public, max-age=15
              description: Holds directives that control caching
        400:
          description: The request is not valid
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/validationProblemDetails"
              example:
                type: https://httpstatuses.com/400
                title: One or more validation errors occurred.
                status: 400
                errors:
                  tokenAttributes:
                    - Filters cannot be provided alongside cursor.
                extensions:
                  traceId: 00-00000000000000000000000000000000-0000000000000000-00
        429:
          $ref: "#/components/responses/TooManyRequests"
        500:
          $ref: "#/components/responses/InternalServerError"
        503:
          $ref: "#/components/responses/UnderMaintenance"
    post:
      tags:
        - Tokens
      summary: Add Token
      description: Adds an SRC token to the Opdex indexer, so that it can be tracked and used within markets.
      operationId: addToken
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/addTokenRequest"
            example:
              token: tF83sdXXt2nTkL7UyEYDVFMK4jTuYMbmR3
      security:
        - opdexAuth: []
      responses:
        201:
          description: Token was added to the indexer
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/tokenResponse"
              example:
                address: tA88mLAYt3gTp5eqFR6srceAPrTNf4tdFy
                name: LTC (Wrapped)
                symbol: xLTC
                decimals: 8
                sats: "100000000"
                totalSupply: "84000000.00000000"
                attributes: []
          headers:
            Location:
              schema:
                type: string
                example: /tokens/tF83sdXXt2nTkL7UyEYDVFMK4jTuYMbmR3
              description: Request location to retrieve details of the added token
        303:
          description: Token is already indexed
          headers:
            Location:
              schema:
                type: string
                example: /tokens/tF83sdXXt2nTkL7UyEYDVFMK4jTuYMbmR3
              description: Request location to retrieve details of the added token
        400:
          description: The request is not valid
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/validationProblemDetails"
              example:
                type: https://httpstatuses.com/400
                title: One or more validation errors occurred.
                status: 400
                errors:
                  token:
                    - Invalid address.
                extensions:
                  traceId: 00-00000000000000000000000000000000-0000000000000000-00
        401:
          $ref: "#/components/responses/Unauthorized"
        429:
          $ref: "#/components/responses/TooManyRequests"
        500:
          $ref: "#/components/responses/InternalServerError"
        503:
          $ref: "#/components/responses/UnderMaintenance"
  /tokens/{token}:
    get:
      tags:
        - Tokens
      summary: Get Token
      description: Retrieves details of a token tracked by the Opdex indexer.
      operationId: getToken
      parameters:
        - name: token
          in: path
          description: Address of the token
          required: true
          schema:
            $ref: "#/components/schemas/address"
          example: tGSk2dVENuqAQ2rNXbui37XHuurFCTqadD
      responses:
        200:
          description: Token details found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/tokenResponse"
              example:
                address: tGSk2dVENuqAQ2rNXbui37XHuurFCTqadD
                name: Bitcoin (Wrapped)
                symbol: TBTC
                decimals: 8
                sats: "100000000"
                totalSupply: "21000000.00000000"
                attributes:
                  - NonProvisional
                createdBlock: 2988918
                modifiedBlock: 2988918
                summary:
                  priceUsd: "27852.57795481"
                  dailyPriceChangePercent: "0.77000000"
                  createdBlock: 2988918
                  modifiedBlock: 3043250
          headers:
            Cache-Control:
              schema:
                type: string
                example: public, max-age=15
              description: Holds directives that control caching
        400:
          description: The request is not valid
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/validationProblemDetails"
              example:
                type: https://httpstatuses.com/400
                title: One or more validation errors occurred.
                status: 400
                errors:
                  token:
                    - Invalid address.
                extensions:
                  traceId: 00-00000000000000000000000000000000-0000000000000000-00
        404:
          $ref: "#/components/responses/TokenNotFound"
        429:
          $ref: "#/components/responses/TooManyRequests"
        500:
          $ref: "#/components/responses/InternalServerError"
        503:
          $ref: "#/components/responses/UnderMaintenance"
  /tokens/{token}/history:
    get:
      tags:
        - Tokens
      summary: Get Token History
      description: Retrieves historical pricing data for a token tracked by the Opdex indexer. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
      operationId: getTokenHistory
      parameters:
        - name: token
          in: path
          description: Address of the token
          required: true
          schema:
            $ref: "#/components/schemas/address"
          example: tGSk2dVENuqAQ2rNXbui37XHuurFCTqadD
        - name: interval
          in: query
          description: Time range between each snapshot
          schema:
            $ref: "#/components/schemas/interval"
          example: 1D
        - name: startDateTime
          in: query
          description: Start time for which to retrieve snapshots
          schema:
            type: string
            format: date-time
          example: 2022-01-01T00:00:00Z
        - name: endDateTime
          in: query
          description: End time for which to retrieve snapshots
          schema:
            type: string
            format: date-time
          example: 2022-12-31T23:59:59
        - name: direction
          in: query
          description: Order direction of the results
          schema:
            $ref: "#/components/schemas/sortDirection"
          example: DESC
        - name: limit
          in: query
          description: Number of results per page; defaults to 168 for hourly snapshots (1 week), or 28 for daily snapshots (4 weeks)
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 750
            default: 168
          example: 100
        - name: cursor
          in: query
          description: Reference of the requested page, returned by a previous call
          schema:
            type: string
      responses:
        200:
          description: Token snapshot results found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/tokenSnapshotsResponse"
              example:
                properties:
                  results:
                    - price:
                        open: "54193.34115385"
                        high: "55199.32820982"
                        low: "54187.23589023"
                        close: "55063.99234829"
                      timestamp: 2022-01-04T00:00:00Z
                    - price:
                        open: "52402.45948025"
                        high: "54362.13294822"
                        low: "52351.34292224"
                        close: "54193.34115385"
                      timestamp: 2022-01-03T00:00:00Z
                    - price:
                        open: "53135.84898883"
                        high: "54339.34298819"
                        low: "52217.00424382"
                        close: "52402.45948025"
                      timestamp: 2022-01-02T00:00:00Z
                    - price:
                        open: "54284.23999384"
                        high: "54300.22222003"
                        low: "53025.42828821"
                        close: "53135.84898883"
                      timestamp: 2022-01-01T00:00:00Z
                  paging: {}
          headers:
            Cache-Control:
              schema:
                type: string
                example: public, max-age=15
              description: Holds directives that control caching
        400:
          description: The request is not valid
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/validationProblemDetails"
              example:
                type: https://httpstatuses.com/400
                title: One or more validation errors occurred.
                status: 400
                errors:
                  token:
                    - Invalid address.
                extensions:
                  traceId: 00-00000000000000000000000000000000-0000000000000000-00
        404:
          $ref: "#/components/responses/TokenNotFound"
        429:
          $ref: "#/components/responses/TooManyRequests"
        500:
          $ref: "#/components/responses/InternalServerError"
        503:
          $ref: "#/components/responses/UnderMaintenance"
  /tokens/{token}/approve:
    post:
      tags:
        - Tokens
      summary: Build Approve Allowance Transaction Quote
      description: Builds a quote for an allowance approval transaction. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
      operationId: buildApproveAllowanceQuote
      parameters:
        - name: token
          in: path
          description: Address of the token
          required: true
          schema:
            $ref: "#/components/schemas/address"
          example: tGSk2dVENuqAQ2rNXbui37XHuurFCTqadD
      requestBody:
        description: Parameters used for the approval of a token allowance
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/quoteApproveAllowanceRequest"
            example:
              amount: "0.05000000"
              spender: tEfYoLGDRhqUtcjQsQQxYvXo74RvyjVnmy
      security:
        - opdexAuth: []
      responses:
        200:
          description: Built approve allowance transaction quote
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/transactionQuoteResponse"
              example:
                result: true
                gasUsed: 12923
                events:
                  - owner: tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
                    spender: tAFxpxRdcV9foADqD6gK3c8sY5MeANzFp5
                    amount: "0.020000000000000000"
                    eventType: ApprovalEvent
                    contract: tF83sdXXt2nTkL7UyEYDVFMK4jTuYMbmR3
                    sortOrder: 0
                request:
                  sender: tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
                  to: tF83sdXXt2nTkL7UyEYDVFMK4jTuYMbmR3
                  amount: "0.00000000"
                  method: Approve
                  parameters:
                    - label: Spender
                      value: 9#t8XpH1pNYDgCnqk91ZQKLgpUVeJ7XmomLT
                    - label: Current Allowance
                      value: 12#200000000000
                    - label: New Allowance
                      value: 12#20000000000000000
                  callback: https://v1-test-api.opdex.com/v1/transactions
          headers:
            Cache-Control:
              schema:
                type: string
                example: private, max-age=15
              description: Holds directives that control caching
        400:
          description: The request is not valid
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/validationProblemDetails"
              example:
                type: https://httpstatuses.com/400
                title: One or more validation errors occurred.
                status: 400
                errors:
                  token:
                    - Invalid address.
                extensions:
                  traceId: 00-00000000000000000000000000000000-0000000000000000-00
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/TokenNotFound"
        429:
          $ref: "#/components/responses/TooManyRequests"
        500:
          $ref: "#/components/responses/InternalServerError"
        503:
          $ref: "#/components/responses/UnderMaintenance"
  /tokens/{token}/distribute:
    post:
      tags:
        - Tokens
      summary: Build Distribute Tokens Transaction Quote
      description: Builds a quote for a transaction to distribute governance tokens, to the mining governance and vault. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
      operationId: buildDistributeTokensQuote
      parameters:
        - name: token
          in: path
          description: Address of the governance token
          required: true
          schema:
            $ref: "#/components/schemas/address"
          example: tTTuKbCR2UnsEByXBp1ynBz91J2yz63h1c
      security:
        - opdexAuth: []
      responses:
        200:
          description: Built distribute tokens transaction quote
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/transactionQuoteResponse"
              example:
                gasUsed: 99064
                events:
                  - vaultAmount: "100000000.00000000"
                    miningGovernanceAmount: "300000000.00000000"
                    periodIndex: 0
                    totalSupply: "400000000.00000000"
                    nextDistributionBlock: 4629775
                    eventType: DistributionEvent
                    contract: "tTTuKbCR2UnsEByXBp1ynBz91J2yz63h1c"
                    sortOrder: 0
                request:
                  sender: tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
                  to: tBeY2UAVsbHoS9jwEnT2kMmRsJwUHK1j1L
                  amount: "0.00000000"
                  method: Distribute
                  parameters: []
                  callback: https://v1-test-api.opdex.com/v1/transactions
          headers:
            Cache-Control:
              schema:
                type: string
                example: private, max-age=15
              description: Holds directives that control caching
        400:
          description: The request is not valid
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/validationProblemDetails"
              example:
                type: https://httpstatuses.com/400
                title: One or more validation errors occurred.
                status: 400
                errors:
                  token:
                    - Invalid address.
                extensions:
                  traceId: 00-00000000000000000000000000000000-0000000000000000-00
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/TokenNotFound"
        429:
          $ref: "#/components/responses/TooManyRequests"
        500:
          $ref: "#/components/responses/InternalServerError"
        503:
          $ref: "#/components/responses/UnderMaintenance"
  /transactions:
    get:
      tags:
        - Transactions
      summary: Get Transactions
      description: Retrieves details for tracked Opdex transactions. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
      operationId: getTransactions
      parameters:
        - name: sender
          in: query
          description: Filter transactions by sender address
          schema:
            $ref: "#/components/schemas/address"
          example: tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
        - name: contracts
          in: query
          description: Smart contract addresses to include
          schema:
            type: array
            items:
              $ref: "#/components/schemas/address"
        - name: eventTypes
          in: query
          description: Filter to include transactions with event types
          schema:
            type: array
            items:
              $ref: "#/components/schemas/transactionEventType"
          example:
            - AddLiquidityEvent
            - RemoveLiquidityEvent
            - SwapEvent
            - StartStakingEcvent
            - StopStakingEvent
            - StartMiningEvent
            - StopMiningEvent
        - name: direction
          in: query
          description: Order direction of the results
          schema:
            $ref: "#/components/schemas/sortDirection"
          example: DESC
        - name: limit
          in: query
          description: Number of results per page
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 50
            default: 10
          example: 10
        - name: cursor
          in: query
          description: Reference of the requested page, returned by a previous call
          schema:
            type: string
      responses:
        200:
          description: Transaction results found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/transactionsResponse"
              example:
                results:
                  - success: true
                    hash: f5f3dda5a419a699018800fae7938216a6d9f6df6767bc2fb7e847e7c01a0cd5
                    block:
                      hash: 71473cf8bc8553676565f878e965a8e3c5070a7f3ef77c32be2460d1ff1e62d8
                      height: 2962935
                      time: 2022-01-05T11:32:48Z
                      medianTime: 2022-01-05T11:30:24Z
                    gasUsed: 64275
                    from: tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
                    to: t8WntmWKiLs1BdzoqPGXmPAYzUTpPb3DBw
                    events:
                      - from: tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
                        to: t8WntmWKiLs1BdzoqPGXmPAYzUTpPb3DBw
                        amount: "3500000.00000000"
                        eventType: TransferEvent
                        contract: tTTuKbCR2UnsEByXBp1ynBz91J2yz63h1c
                        sortOrder: 0
                      - staker: tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
                        amount: "3500000.00000000"
                        stakerBalance: "5000000.00000000"
                        totalStaked: "5010000.00000000"
                        eventType: StartStakingEvent
                        contract: t8WntmWKiLs1BdzoqPGXmPAYzUTpPb3DBw
                        sortOrder: 1
                      - stakingPool: t8WntmWKiLs1BdzoqPGXmPAYzUTpPb3DBw
                        miningPool: tT9qtdXVvaf9fti7eUttnvaE7aSTrBgWPz
                        weight: "5010000.00000000"
                        eventType: NominationEvent
                        contract: tKFkNiL5KJ3Q4br929i6hHbB4X4mt1MigF
                        sortOrder: 2
                  - success: true
                    hash: eb71dc3c295d66b9cf0c2459f0dc1e68a333b4c6637165c288fd364416ec9182
                    block:
                      hash: 61b94e910186b3738ceef13835a7d6ee2bce020fb67573120a27041491460999
                      height: 2962932
                      time: 2022-01-05T11:31:28Z
                      medianTime: 2022-01-05T11:29:04Z
                    gasUsed: 61380
                    from: tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
                    to: tAFxpxRdcV9foADqD6gK3c8sY5MeANzFp5
                    events:
                      - from: tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
                        to: tLfFeV1C4NLcH6sYGrSgi9ZuHtfvSkn3Xp
                        amount: "27088.68664829"
                        eventType: TransferEvent
                        contract: tTTuKbCR2UnsEByXBp1ynBz91J2yz63h1c
                        sortOrder: 0
                      - from: t6vc3nrbAurGs3i17HJUavZuw4ioKTiFCE
                        to: tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
                        amount: "3669.87304155"
                        eventType: TransferEvent
                        contract: tLfFeV1C4NLcH6sYGrSgi9ZuHtfvSkn3Xp
                        sortOrder: 1
                      - amountCrs: "500.00000000"
                        amountSrc: "27088.68664829"
                        amountLpt: "3669.87304155"
                        tokenSrc: tTTuKbCR2UnsEByXBp1ynBz91J2yz63h1c
                        tokenLp: tLfFeV1C4NLcH6sYGrSgi9ZuHtfvSkn3Xp
                        tokenLpTotalSupply: "39459.73310927"
                        eventType: AddLiquidityEvent
                        contract: tLfFeV1C4NLcH6sYGrSgi9ZuHtfvSkn3Xp
                        sortOrder: 2
                paging:
                  next: ZGlyZWN0aW9uOkRFU0M7bGltaXQ6NTtwYWdpbmc6Rm9yd2FyZDt3YWxsZXQ6dFE5UnVrWnNCNmJCc2VuSG5HU28xcTY5Q0p6V0dueG9obTtldmVudFR5cGVzOkFkZExpcXVpZGl0eUV2ZW50O2V2ZW50VHlwZXM6UmVtb3ZlTGlxdWlkaXR5RXZlbnQ7ZXZlbnRUeXBlczpTd2FwRXZlbnQ7ZXZlbnRUeXBlczpTdGFydFN0YWtpbmdFdmVudDtldmVudFR5cGVzOlN0b3BTdGFraW5nRXZlbnQ7ZXZlbnRUeXBlczpTdGFydE1pbmluZ0V2ZW50O2V2ZW50VHlwZXM6U3RvcE1pbmluZ0V2ZW50O3BvaW50ZXI6TmpjNTs=
          headers:
            Cache-Control:
              schema:
                type: string
                example: public, max-age=15
              description: Holds directives that control caching
        400:
          description: The request is not valid
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/validationProblemDetails"
              example:
                type: https://httpstatuses.com/400
                title: One or more validation errors occurred.
                status: 400
                errors:
                  sender:
                    - Invalid address.
                    - Filters cannot be provided alongside cursor.
                  eventTypes:
                    - Filters cannot be provided alongside cursor.
                extensions:
                  traceId: 00-00000000000000000000000000000000-0000000000000000-00
        429:
          $ref: "#/components/responses/TooManyRequests"
        500:
          $ref: "#/components/responses/InternalServerError"
        503:
          $ref: "#/components/responses/UnderMaintenance"
    post:
      tags:
        - Transactions
      summary: Notify Broadcast
      description: Sends notifications to a user about broadcast transactions. This endpoint is intended to be called by a Stratis Transaction Handoff Broadcastor, as a way to notify a user that their transaction has been broadcast. See the [specification](https://github.com/Opdex/STHS) for further details.
      operationId: notifyTransactionBroadcast
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/notifyBroadcastRequest"
            example:
              transactionHash: 402aa2241adb7b04d07d4dbc89f8aae72fa1c11f9bd2bd9013222cd774ed39fe
              walletAddress: tHYHem7cLKgoLkeb792yn4WayqKzLrjJak
      responses:
        204:
          description: The broadcast notification was sent
        400:
          description: The request is not valid
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/validationProblemDetails"
              example:
                type: https://httpstatuses.com/400
                title: One or more validation errors occurred.
                status: 400
                errors:
                  transactionHash:
                    - Invalid transaction state.
                extensions:
                  traceId: 00-00000000000000000000000000000000-0000000000000000-00
        404:
          description: Raw transaction not found.
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/validationProblemDetails"
              example:
                type: https://httpstatuses.com/404
                title: Not Found
                status: 404
                extensions:
                  traceId: 00-00000000000000000000000000000000-0000000000000000-00
        429:
          $ref: "#/components/responses/TooManyRequests"
        500:
          $ref: "#/components/responses/InternalServerError"
        503:
          $ref: "#/components/responses/UnderMaintenance"
  /transactions/{hash}:
    get:
      tags:
        - Transactions
      summary: Get Transaction
      description: Retrieves details for a tracked Opdex transaction with the supplied hash.
      operationId: getTransaction
      parameters:
        - name: hash
          in: path
          description: The SHA256 hash of the transaction to look up
          required: true
          schema:
            $ref: "#/components/schemas/sha256"
          example: 0132da001ca719cc8d98610fbd8493e92c7943c6e0c0844a819f4c90531fd3a6
      responses:
        200:
          description: Transaction found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/transactionResponse"
              example:
                - success: true
                  hash: 0132da001ca719cc8d98610fbd8493e92c7943c6e0c0844a819f4c90531fd3a6
                  block:
                    hash: dd0eab2a346652a396a601d4b9ff17831ca30d9bfb186b586d10be51290868ce
                    height: 2658775
                    time: 2021-10-11T17:50:40Z
                    medianTime: 2021-10-11T17:49:04Z
                  gasUsed: 99064
                  from: tHYHem7cLKgoLkeb792yn4WayqKzLrjJak
                  to: tTTuKbCR2UnsEByXBp1ynBz91J2yz63h1c
                  events:
                    - vaultAmount: "100000000.00000000"
                      miningGovernanceAmount: "300000000.00000000"
                      periodIndex: 0
                      totalSupply: "400000000.00000000"
                      nextDistributionBlock: 4629775
                      eventType: "DistributionEvent"
                      contract: "tTTuKbCR2UnsEByXBp1ynBz91J2yz63h1c"
                      sortOrder: 0
          headers:
            Cache-Control:
              schema:
                type: string
                example: public, max-age=15
              description: Holds directives that control caching
        400:
          description: The request is not valid
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/validationProblemDetails"
              example:
                type: https://httpstatuses.com/400
                title: One or more validation errors occurred.
                status: 400
                errors:
                  hash:
                    - Invalid hash.
                extensions:
                  traceId: 00-00000000000000000000000000000000-0000000000000000-00
        404:
          description: Transaction not found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/validationProblemDetails"
              example:
                type: https://httpstatuses.com/404
                title: Not Found
                status: 404
                extensions:
                  traceId: 00-00000000000000000000000000000000-0000000000000000-00
        429:
          $ref: "#/components/responses/TooManyRequests"
        500:
          $ref: "#/components/responses/InternalServerError"
        503:
          $ref: "#/components/responses/UnderMaintenance"
  /transactions/replay-quote:
    post:
      tags:
        - Transactions
      summary: Replay Transaction Quote
      description: Replays a previous transaction quote at the current point in time. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
      operationId: replayQuote
      requestBody:
        required: true
        description: Contents of the `request` property from a previously quoted transaction.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/quotedTransaction"
            example:
              sender: tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
              to: tSPtSt1eEnn5Sq9F9wccqpb5p1namDZVdf
              amount: "0.00000000"
              method: CollectMarketFees
              parameters:
                - label: Token
                  value: 9#tGSk2dVENuqAQ2rNXbui37XHuurFCTqadD
                - label: Amount
                  value: 12#1000000000
              callback: https://v1-test-api.opdex.com/v1/transactions
      security:
        - opdexAuth: []
      responses:
        200:
          description: Transaction quote replayed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/transactionQuoteResponse"
              example:
                error:
                  friendly: Could not collect fees, not enough funds.
                  raw: "Stratis.SmartContracts.SmartContractAssertException: OPDEX: INVALID_TRANSFER_TO\n   at Stratis.SmartContracts.SmartContract.Assert(Boolean condition, String message)\n   at OpdexStandardMarket.SafeTransferTo(Address token, Address to, UInt256 amount)\n   at OpdexStandardMarket.CollectMarketFees(Address token, UInt256 amount)"
                gasUsed: 20389
                events: []
                request:
                  sender: tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
                  to: tSPtSt1eEnn5Sq9F9wccqpb5p1namDZVdf
                  amount: "0.00000000"
                  method: CollectMarketFees
                  parameters:
                    - label: Token
                      value: 9#tGSk2dVENuqAQ2rNXbui37XHuurFCTqadD
                    - label: Amount
                      value: 12#1000000000
                  callback: https://v1-test-api.opdex.com/v1/transactions
          headers:
            Cache-Control:
              schema:
                type: string
                example: private, max-age=15
              description: Holds directives that control caching
        400:
          description: The request is not valid
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/validationProblemDetails"
              example:
                type: https://httpstatuses.com/400
                title: One or more validation errors occurred.
                status: 400
                errors:
                  request:
                    - Quote request must be provided.
                extensions:
                  traceId: 00-00000000000000000000000000000000-0000000000000000-00
        401:
          $ref: "#/components/responses/Unauthorized"
        403:
          description: Forbidden
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/problemDetails"
              example:
                type: https://httpstatuses.com/403
                title: Forbidden
                detail: Transaction quote is not for authenticated address.
                status: 403
                extensions:
                  traceId: 00-00000000000000000000000000000000-0000000000000000-00
        429:
          $ref: "#/components/responses/TooManyRequests"
        500:
          $ref: "#/components/responses/InternalServerError"
        503:
          $ref: "#/components/responses/UnderMaintenance"
  /vaults:
    get:
      tags:
        - Vaults
      summary: Get Vaults
      description: Retrieves details for tracked Opdex vaults. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
      operationId: getVaults
      parameters:
        - name: lockedToken
          in: query
          description: Address of the token locked in the vault
          schema:
            $ref: "#/components/schemas/address"
          example: tTTuKbCR2UnsEByXBp1ynBz91J2yz63h1c
        - name: direction
          in: query
          description: Order direction of the results
          schema:
            $ref: "#/components/schemas/sortDirection"
          example: DESC
        - name: limit
          in: query
          description: Number of results per page
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 50
            default: 10
          example: 10
        - name: cursor
          in: query
          description: Reference of the requested page, returned by a previous call
          schema:
            type: string
      responses:
        200:
          description: Vault results found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/vaultsResponse"
              example:
                results:
                  - vault: t7hy4H51KzU6PPCL4QKCdgBGPLV9Jpmf9G
                    token: tTTuKbCR2UnsEByXBp1ynBz91J2yz63h1c
                    tokensUnassigned: "99984399.37597504"
                    tokensProposed: "0.00000000"
                    tokensLocked: "100000000.00000000"
                    totalPledgeMinimum: "1000.00000000"
                    totalVoteMinimum: "2000.00000000"
                    vestingDuration: 1080000
                    createdBlock: 2988890
                    modifiedBlock: 3012470
                paging: {}
          headers:
            Cache-Control:
              schema:
                type: string
                example: public, max-age=15
              description: Holds directives that control caching
        400:
          description: The request is not valid
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/validationProblemDetails"
              example:
                type: https://httpstatuses.com/400
                title: One or more validation errors occurred.
                status: 400
                errors:
                  lockedToken:
                    - Filters cannot be provided alongside cursor.
                extensions:
                  traceId: 00-00000000000000000000000000000000-0000000000000000-00
        429:
          $ref: "#/components/responses/TooManyRequests"
        500:
          $ref: "#/components/responses/InternalServerError"
        503:
          $ref: "#/components/responses/UnderMaintenance"
  /vaults/{vault}:
    get:
      tags:
        - Vaults
      summary: Get Vault
      description: Retrieves details of a vault tracked by the Opdex indexer.
      operationId: getVault
      parameters:
        - name: vault
          in: path
          description: Address of the vault
          required: true
          schema:
            $ref: "#/components/schemas/address"
          example: t7hy4H51KzU6PPCL4QKCdgBGPLV9Jpmf9G
      responses:
        200:
          description: Vault found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/vaultResponse"
              example:
                vault: t7hy4H51KzU6PPCL4QKCdgBGPLV9Jpmf9G
                token: tTTuKbCR2UnsEByXBp1ynBz91J2yz63h1c
                tokensUnassigned: "99984399.37597504"
                tokensProposed: "0.00000000"
                tokensLocked: "100000000.00000000"
                totalPledgeMinimum: "1000.00000000"
                totalVoteMinimum: "2000.00000000"
                vestingDuration: 1080000
                createdBlock: 2988890
                modifiedBlock: 3012470
          headers:
            Cache-Control:
              schema:
                type: string
                example: public, max-age=15
              description: Holds directives that control caching
        400:
          description: The request is not valid
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/validationProblemDetails"
              example:
                type: https://httpstatuses.com/400
                title: One or more validation errors occurred.
                status: 400
                errors:
                  vault:
                    - Invalid address.
                extensions:
                  traceId: 00-00000000000000000000000000000000-0000000000000000-00
        404:
          $ref: "#/components/responses/VaultNotFound"
        429:
          $ref: "#/components/responses/TooManyRequests"
        500:
          $ref: "#/components/responses/InternalServerError"
        503:
          $ref: "#/components/responses/UnderMaintenance"
  /vaults/{vault}/certificates:
    get:
      tags:
        - Vaults
      summary: Get Vault Certificates
      description: Retrieves details for certificates existing within tracked Opdex vaults. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
      operationId: getCertificates
      parameters:
        - name: vault
          in: path
          description: Address of the vault
          required: true
          schema:
            $ref: "#/components/schemas/address"
          example: t7hy4H51KzU6PPCL4QKCdgBGPLV9Jpmf9G
        - name: owner
          in: query
          description: Address of the certificate owner
          schema:
            $ref: "#/components/schemas/address"
          example: tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
        - name: status
          in: query
          description: Status of the certificates
          schema:
            type: array
            items:
              $ref: "#/components/schemas/certificateStatus"
          example:
            - Vesting
        - name: direction
          in: query
          description: Order direction of the results
          schema:
            $ref: "#/components/schemas/sortDirection"
          example: DESC
        - name: limit
          in: query
          description: Number of results per page
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 50
            default: 10
          example: 10
        - name: cursor
          in: query
          description: Reference of the requested page, returned by a previous call
          schema:
            type: string
      responses:
        200:
          description: Certificate results found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/certificatesResponse"
              example:
                results:
                  - owner: tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
                    amount: "5000000.00000000"
                    vestingStartBlock: 825020
                    vestingEndBlock: 1905020
                    redeemed: false
                    revoked: false
                    createdBlock: 3012470
                    modifiedBlock: 3012470
                    proposals:
                      - 1
                paging: {}
          headers:
            Cache-Control:
              schema:
                type: string
                example: public, max-age=15
              description: Holds directives that control caching
        400:
          description: The request is not valid
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/validationProblemDetails"
              example:
                type: https://httpstatuses.com/400
                title: One or more validation errors occurred.
                status: 400
                errors:
                  vault:
                    - Invalid address.
                extensions:
                  traceId: 00-00000000000000000000000000000000-0000000000000000-00
        404:
          $ref: "#/components/responses/VaultNotFound"
        429:
          $ref: "#/components/responses/TooManyRequests"
        500:
          $ref: "#/components/responses/InternalServerError"
        503:
          $ref: "#/components/responses/UnderMaintenance"
  /vaults/{vault}/certificates/redeem:
    post:
      tags:
        - Vaults
      summary: Build Redeem Vault Certificate Transaction Quote
      description: Builds a quote for a transaction to redeem a vault certificate. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
      operationId: buildRedeemCertificateQuote
      parameters:
        - name: vault
          in: path
          description: Address of the vault
          required: true
          schema:
            $ref: "#/components/schemas/address"
          example: t7hy4H51KzU6PPCL4QKCdgBGPLV9Jpmf9G
      security:
        - opdexAuth: []
      responses:
        200:
          description: Built redeem certificate transaction quote
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/transactionQuoteResponse"
              example:
                error:
                  friendly: Unable to redeem certificate, not found.
                  raw:
                gasUsed: 10218
                events: []
                request:
                  sender: tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
                  to: t7hy4H51KzU6PPCL4QKCdgBGPLV9Jpmf9G
                  amount: "0.00000000"
                  method: RedeemCertificate
                  parameters: []
                  callback: https://v1-test-api.opdex.com/v1/transactions
          headers:
            Cache-Control:
              schema:
                type: string
                example: private, max-age=15
              description: Holds directives that control caching
        400:
          description: The request is not valid
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/validationProblemDetails"
              example:
                type: https://httpstatuses.com/400
                title: One or more validation errors occurred.
                status: 400
                errors:
                  vault:
                    - Invalid address.
                extensions:
                  traceId: 00-00000000000000000000000000000000-0000000000000000-00
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/VaultNotFound"
        429:
          $ref: "#/components/responses/TooManyRequests"
        500:
          $ref: "#/components/responses/InternalServerError"
        503:
          $ref: "#/components/responses/UnderMaintenance"
  /vaults/{vault}/pledges:
    get:
      tags:
        - Vaults
      summary: Get Vault Proposal Pledges
      description: Retrieves details for pledges that have been made to proposals within tracked Opdex vaults. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
      operationId: getPledges
      parameters:
        - name: vault
          in: path
          description: Address of the vault
          required: true
          schema:
            $ref: "#/components/schemas/address"
          example: t7hy4H51KzU6PPCL4QKCdgBGPLV9Jpmf9G
        - name: proposalId
          in: query
          description: Id of the proposal in the vault
          schema:
            type: integer
            format: uint64
            minimum: 1
          example: 1
        - name: pledger
          in: query
          description: Address of the pledger
          schema:
            $ref: "#/components/schemas/address"
          example: tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
        - name: includeZeroBalances
          in: query
          description: Includes zero balances if true, otherwise filters out zero balances if false
          schema:
            type: boolean
            default: false
          example: true
        - name: direction
          in: query
          description: Order direction of the results
          schema:
            $ref: "#/components/schemas/sortDirection"
          example: DESC
        - name: limit
          in: query
          description: Number of results per page
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 50
            default: 10
          example: 10
        - name: cursor
          in: query
          description: Reference of the requested page, returned by a previous call
          schema:
            type: string
      responses:
        200:
          description: Pledge results found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/pledgesResponse"
              example:
                results:
                  - vault: t7hy4H51KzU6PPCL4QKCdgBGPLV9Jpmf9G
                    proposalId: 2
                    pledger: tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
                    pledge: "2000.00000000"
                    balance: "2000.00000000"
                    createdBlock: 3965259
                    modifiedBlock: 3965259
                  - vault: t7hy4H51KzU6PPCL4QKCdgBGPLV9Jpmf9G
                    proposalId: 1
                    pledger: tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
                    pledge: "10000.00000000"
                    balance: "10000.00000000"
                    createdBlock: 3012570
                    modifiedBlock: 3012570
                paging: {}
          headers:
            Cache-Control:
              schema:
                type: string
                example: public, max-age=15
              description: Holds directives that control caching
        400:
          description: The request is not valid
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/validationProblemDetails"
              example:
                type: https://httpstatuses.com/400
                title: One or more validation errors occurred.
                status: 400
                errors:
                  vault:
                    - Invalid address.
                extensions:
                  traceId: 00-00000000000000000000000000000000-0000000000000000-00
        404:
          $ref: "#/components/responses/VaultNotFound"
        429:
          $ref: "#/components/responses/TooManyRequests"
        500:
          $ref: "#/components/responses/InternalServerError"
        503:
          $ref: "#/components/responses/UnderMaintenance"
  /vaults/{vault}/proposals:
    get:
      tags:
        - Vaults
      summary: Get Vault Proposals
      description: Retrieves details for proposals existing within tracked Opdex vaults. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
      operationId: getProposals
      parameters:
        - name: vault
          in: path
          description: Address of the vault
          required: true
          schema:
            $ref: "#/components/schemas/address"
          example: t7hy4H51KzU6PPCL4QKCdgBGPLV9Jpmf9G
        - name: status
          in: query
          description: Status of the proposal
          schema:
            type: array
            items:
              $ref: "#/components/schemas/proposalStatus"
          example:
            - Complete
        - name: type
          in: query
          description: Type of proposal
          schema:
            type: array
            items:
              $ref: "#/components/schemas/proposalType"
          example:
            - Create
        - name: direction
          in: query
          description: Order direction of the results
          schema:
            $ref: "#/components/schemas/sortDirection"
          example: DESC
        - name: limit
          in: query
          description: Number of results per page
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 50
            default: 10
          example: 10
        - name: cursor
          in: query
          description: Reference of the requested page, returned by a previous call
          schema:
            type: string
      responses:
        200:
          description: Proposal results found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/proposalsResponse"
              example:
                results:
                  - vault: t7hy4H51KzU6PPCL4QKCdgBGPLV9Jpmf9G
                    token: tTTuKbCR2UnsEByXBp1ynBz91J2yz63h1c
                    proposalId: 2
                    creator: tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
                    wallet: tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
                    amount: "50000.00000000"
                    description: "OVP-2: Request to revoke certificate. As the recipient, I wish to revoke this certificate."
                    type: Revoke
                    status: Pledge
                    expiration: 3081041
                    yesAmount: "0.00000000"
                    noAmount: "0.00000000"
                    pledgeAmount: "0.00000000"
                    approved: false
                    createdBlock: 3043241
                    modifiedBlock: 3043241
                  - vault: t7hy4H51KzU6PPCL4QKCdgBGPLV9Jpmf9G
                    token: tTTuKbCR2UnsEByXBp1ynBz91J2yz63h1c
                    proposalId: 1
                    creator: tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
                    wallet: tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
                    amount: "50000.00000000"
                    description: "OVP-1: Request for a 50000 TODX certificate. See ipfs:QmPYH5K4q3WphaRMe7zv6196NryXgj5m7uY53Jkgym2ube for details."
                    type: Create
                    status: Complete
                    expiration: 3005585
                    yesAmount: "20000.00000000"
                    noAmount: "0.00000000"
                    pledgeAmount: "10000.00000000"
                    approved: true
                    createdBlock: 2989374
                    modifiedBlock: 3015519
                paging: {}
          headers:
            Cache-Control:
              schema:
                type: string
                example: public, max-age=15
              description: Holds directives that control caching
        400:
          description: The request is not valid
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/validationProblemDetails"
              example:
                type: https://httpstatuses.com/400
                title: One or more validation errors occurred.
                status: 400
                errors:
                  vault:
                    - Invalid address.
                extensions:
                  traceId: 00-00000000000000000000000000000000-0000000000000000-00
        404:
          $ref: "#/components/responses/VaultNotFound"
        429:
          $ref: "#/components/responses/TooManyRequests"
        500:
          $ref: "#/components/responses/InternalServerError"
        503:
          $ref: "#/components/responses/UnderMaintenance"
  /vaults/{vault}/proposals/create-certificate:
    post:
      tags:
        - Vaults
      summary: Build Propose Create Certificate Transaction Quote
      description: Builds a quote for a transaction to create a proposal for creating a vault certificate. Creating a proposal requires a deposit of 500 CRS, which is returned upon completion of the proposal. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
      operationId: buildProposeCreateCertificateQuote
      parameters:
        - name: vault
          in: path
          description: Address of the vault
          required: true
          schema:
            $ref: "#/components/schemas/address"
          example: t7hy4H51KzU6PPCL4QKCdgBGPLV9Jpmf9G
      requestBody:
        description: Parameters used to propose the creation of a certificate
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/quoteProposeCreateCertificateRequest"
            example:
              owner: tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
              amount: "2500000.00000000"
              description: "OVP-1: Request to create certificate. See https://www.example.com for details."
      security:
        - opdexAuth: []
      responses:
        200:
          description: Built propose create certificate transaction quote
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/transactionQuoteResponse"
              example:
                result: 7
                gasUsed: 14733
                events:
                  - proposalId: 7
                    wallet: tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
                    amount: "2500000.00000000"
                    type: Create
                    status: Pledge
                    expiration: 959117
                    description: "OVP-1: Request to create certificate. See https://www.example.com for details."
                    eventType: CreateVaultProposalEvent
                    contract: t7hy4H51KzU6PPCL4QKCdgBGPLV9Jpmf9G
                    sortOrder: 0
                request:
                  sender: tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
                  to: t7hy4H51KzU6PPCL4QKCdgBGPLV9Jpmf9G
                  amount: "0.00000000"
                  method: CreateNewCertificateProposal
                  parameters:
                    - label: Amount
                      value: 12#250000000000000
                    - label: Recipient
                      value: 9#tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
                    - label: Description
                      value: "4#OVP-1: Request to create certificate. See https://www.example.com for details."
                  callback: https://v1-test-api.opdex.com/v1/transactions
          headers:
            Cache-Control:
              schema:
                type: string
                example: private, max-age=15
              description: Holds directives that control caching
        400:
          description: The request is not valid
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/validationProblemDetails"
              example:
                type: https://httpstatuses.com/400
                title: One or more validation errors occurred.
                status: 400
                errors:
                  vault:
                    - Invalid address.
                extensions:
                  traceId: 00-00000000000000000000000000000000-0000000000000000-00
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/VaultNotFound"
        429:
          $ref: "#/components/responses/TooManyRequests"
        500:
          $ref: "#/components/responses/InternalServerError"
        503:
          $ref: "#/components/responses/UnderMaintenance"
  /vaults/{vault}/proposals/revoke-certificate:
    post:
      tags:
        - Vaults
      summary: Build Propose Revoke Certificate Transaction Quote
      description: Builds a quote for a transaction to create a proposal for revoking a vault certificate. Creating a proposal requires a deposit of 500 CRS, which is returned upon completion of the proposal. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
      operationId: buildProposeRevokeCertificateQuote
      parameters:
        - name: vault
          in: path
          description: Address of the vault
          required: true
          schema:
            $ref: "#/components/schemas/address"
          example: t7hy4H51KzU6PPCL4QKCdgBGPLV9Jpmf9G
      requestBody:
        description: Parameters used to propose the revokation of a certificate
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/quoteProposeRevokeCertificateRequest"
            example:
              owner: tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
              description: "OVP-2: Request to revoke certificate. As the recipient, I wish to revoke this certificate."
      security:
        - opdexAuth: []
      responses:
        200:
          description: Built propose revoke certificate transaction quote
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/transactionQuoteResponse"
              example:
                result: 2
                gasUsed: 14498
                events:
                  - proposalId: 2
                    wallet: tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
                    amount: "50000.00000000"
                    type: Revoke
                    status: Pledge
                    expiration: 3081026
                    description: "OVP-2: Request to revoke certificate. As the recipient, I wish to revoke this certificate."
                    eventType: CreateVaultProposalEvent
                    contract: t7hy4H51KzU6PPCL4QKCdgBGPLV9Jpmf9G
                    sortOrder: 0
                request:
                  sender: tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
                  to: t7hy4H51KzU6PPCL4QKCdgBGPLV9Jpmf9G
                  amount: "500.00000000"
                  method: CreateRevokeCertificateProposal
                  parameters:
                    - label: Recipient
                      value: 9#tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
                    - label: Description
                      value: "4#OVP-2: Request to revoke certificate. As the recipient, I wish to revoke this certificate."
                  callback: https://v1-test-api.opdex.com/v1/transactions
          headers:
            Cache-Control:
              schema:
                type: string
                example: private, max-age=15
              description: Holds directives that control caching
        400:
          description: The request is not valid
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/validationProblemDetails"
              example:
                type: https://httpstatuses.com/400
                title: One or more validation errors occurred.
                status: 400
                errors:
                  vault:
                    - Invalid address.
                extensions:
                  traceId: 00-00000000000000000000000000000000-0000000000000000-00
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/VaultNotFound"
        429:
          $ref: "#/components/responses/TooManyRequests"
        500:
          $ref: "#/components/responses/InternalServerError"
        503:
          $ref: "#/components/responses/UnderMaintenance"
  /vaults/{vault}/proposals/minimum-pledge:
    post:
      tags:
        - Vaults
      summary: Build Propose Change Minimum Pledge Transaction Quote
      description: Builds a quote for a transaction to create a proposal for changing the minimum pledge amount. Creating a proposal requires a deposit of 500 CRS, which is returned upon completion of the proposal. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
      operationId: buildProposeChangeMinimumPledgeQuote
      parameters:
        - name: vault
          in: path
          description: Address of the vault
          required: true
          schema:
            $ref: "#/components/schemas/address"
          example: t7hy4H51KzU6PPCL4QKCdgBGPLV9Jpmf9G
      requestBody:
        description: Parameters used to propose the revokation of a certificate
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/quoteProposeMinimumPledgeRequest"
            example:
              amount: "25000.00000000"
              description: "OVP-3: Request to change minimum pledge amount. See https://www.example.com for details."
      security:
        - opdexAuth: []
      responses:
        200:
          description: Built propose change minimum pledge transaction quote
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/transactionQuoteResponse"
              example:
                result: 8
                gasUsed: 12728
                events:
                  - proposalId: 8
                    wallet: tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
                    amount: "50000.00000000"
                    type: TotalPledgeMinimum
                    status: Pledge
                    expiration: 959140
                    description: "OVP-1: Request to change minimum pledge amount. See https://www.example.com for details."
                    eventType: CreateVaultProposalEvent
                    contract: t7hy4H51KzU6PPCL4QKCdgBGPLV9Jpmf9G
                    sortOrder: 0
                request:
                  sender: tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
                  to: t7hy4H51KzU6PPCL4QKCdgBGPLV9Jpmf9G
                  amount: "0.00000000"
                  method: CreateTotalPledgeMinimumProposal
                  parameters:
                    - label: Amount
                      value: 12#5000000000000
                    - label: Description
                      value: "4#OVP-3: Request to change minimum pledge amount. See https://www.example.com for details."
                  callback: https://v1-test-api.opdex.com/v1/transactions
          headers:
            Cache-Control:
              schema:
                type: string
                example: private, max-age=15
              description: Holds directives that control caching
        400:
          description: The request is not valid
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/validationProblemDetails"
              example:
                type: https://httpstatuses.com/400
                title: One or more validation errors occurred.
                status: 400
                errors:
                  vault:
                    - Invalid address.
                extensions:
                  traceId: 00-00000000000000000000000000000000-0000000000000000-00
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/VaultNotFound"
        429:
          $ref: "#/components/responses/TooManyRequests"
        500:
          $ref: "#/components/responses/InternalServerError"
        503:
          $ref: "#/components/responses/UnderMaintenance"
  /vaults/{vault}/proposals/minimum-vote:
    post:
      tags:
        - Vaults
      summary: Build Propose Change Minimum Vote Transaction Quote
      description: Builds a quote for a transaction to create a proposal for changing the minimum vote threshold. Creating a proposal requires a deposit of 500 CRS, which is returned upon completion of the proposal. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
      operationId: buildProposeChangeMinimumVoteQuote
      parameters:
        - name: vault
          in: path
          description: Address of the vault
          required: true
          schema:
            $ref: "#/components/schemas/address"
          example: t7hy4H51KzU6PPCL4QKCdgBGPLV9Jpmf9G
      requestBody:
        description: Parameters used to propose the revokation of a certificate
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/quoteProposeMinimumVoteRequest"
            example:
              amount: "50000.00000000"
              description: "OVP-3: Request to change minimum vote approval amount. See https://www.example.com for details."
      security:
        - opdexAuth: []
      responses:
        200:
          description: Built propose change minimum vote transaction quote
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/transactionQuoteResponse"
              example:
                result: 9
                gasUsed: 12726
                events:
                  - proposalId: 9
                    wallet: tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
                    amount: "50000.00000000"
                    type: TotalPledgeVote
                    status: Pledge
                    expiration: 959153
                    description: "OVP-1: Request to change minimum vote amount. See https://www.example.com for details."
                    eventType: CreateVaultProposalEvent
                    contract: t7hy4H51KzU6PPCL4QKCdgBGPLV9Jpmf9G
                    sortOrder: 0
                request:
                  sender: tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
                  to: t7hy4H51KzU6PPCL4QKCdgBGPLV9Jpmf9G
                  amount: "0.00000000"
                  method: CreateTotalVoteMinimumProposal
                  parameters:
                    - label: Amount
                      value: 12#500000000000
                    - label: Description
                      value: "4#OVP-4: Request to change minimum vote amount. See https://www.example.com for details."
                  callback: https://v1-test-api.opdex.com/v1/transactions
          headers:
            Cache-Control:
              schema:
                type: string
                example: private, max-age=15
              description: Holds directives that control caching
        400:
          description: The request is not valid
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/validationProblemDetails"
              example:
                type: https://httpstatuses.com/400
                title: One or more validation errors occurred.
                status: 400
                errors:
                  vault:
                    - Invalid address.
                extensions:
                  traceId: 00-00000000000000000000000000000000-0000000000000000-00
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/VaultNotFound"
        429:
          $ref: "#/components/responses/TooManyRequests"
        500:
          $ref: "#/components/responses/InternalServerError"
        503:
          $ref: "#/components/responses/UnderMaintenance"
  /vaults/{vault}/proposals/{proposalId}:
    get:
      tags:
        - Vaults
      summary: Get Vault Proposal
      description: Retrieves a proposal that exists in a tracked Opdex vault.
      operationId: getVaultProposal
      parameters:
        - name: vault
          in: path
          description: Address of the vault
          required: true
          schema:
            $ref: "#/components/schemas/address"
          example: t7hy4H51KzU6PPCL4QKCdgBGPLV9Jpmf9G
        - name: proposalId
          in: path
          description: Id of the proposal
          required: true
          schema:
            type: integer
            format: uint64
            minimum: 1
          example: 1
      responses:
        200:
          description: Proposal found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/proposalResponse"
              example:
                vault: t7hy4H51KzU6PPCL4QKCdgBGPLV9Jpmf9G
                token: tTTuKbCR2UnsEByXBp1ynBz91J2yz63h1c
                proposalId: 1
                creator: tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
                wallet: tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
                amount: "50000.00000000"
                description: "OVP-1: Request for a 50000 TODX certificate. See ipfs:QmPYH5K4q3WphaRMe7zv6196NryXgj5m7uY53Jkgym2ube for details."
                type: Create
                status: Complete
                expiration: 3005585
                yesAmount: "20000.00000000"
                noAmount: "0.00000000"
                pledgeAmount: "10000.00000000"
                approved: true
                createdBlock: 2989374
                modifiedBlock: 3015519
          headers:
            Cache-Control:
              schema:
                type: string
                example: public, max-age=15
              description: Holds directives that control caching
        400:
          description: The request is not valid
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/validationProblemDetails"
              example:
                type: https://httpstatuses.com/400
                title: One or more validation errors occurred.
                status: 400
                errors:
                  vault:
                    - Invalid address.
                extensions:
                  traceId: 00-00000000000000000000000000000000-0000000000000000-00
        404:
          $ref: "#/components/responses/VaultOrProposalNotFound"
        429:
          $ref: "#/components/responses/TooManyRequests"
        500:
          $ref: "#/components/responses/InternalServerError"
        503:
          $ref: "#/components/responses/UnderMaintenance"
  /vaults/{vault}/proposals/{proposalId}/complete:
    post:
      tags:
        - Vaults
      summary: Build Complete Proposal Transaction Quote
      description: Builds a quote for a transaction to complete a vault proposal. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
      operationId: buildCompleteProposalQuote
      parameters:
        - name: vault
          in: path
          description: Address of the vault
          required: true
          schema:
            $ref: "#/components/schemas/address"
          example: t7hy4H51KzU6PPCL4QKCdgBGPLV9Jpmf9G
        - name: proposalId
          in: path
          description: Id of the proposal
          required: true
          schema:
            type: integer
            format: uint64
            minimum: 1
          example: 1
      security:
        - opdexAuth: []
      responses:
        200:
          description: Built complete proposal transaction quote
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/transactionQuoteResponse"
              example:
                error:
                  friendly: Unable to complete proposal, not yet expired.
                  raw:
                gasUsed: 10213
                events: []
                request:
                  sender: tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
                  to: t7hy4H51KzU6PPCL4QKCdgBGPLV9Jpmf9G
                  amount: "0.00000000"
                  method: CompleteProposal
                  parameters:
                    - label: Proposal Id
                      value: 7#1
                  callback: https://v1-test-api.opdex.com/v1/transactions
          headers:
            Cache-Control:
              schema:
                type: string
                example: private, max-age=15
              description: Holds directives that control caching
        400:
          description: The request is not valid
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/validationProblemDetails"
              example:
                type: https://httpstatuses.com/400
                title: One or more validation errors occurred.
                status: 400
                errors:
                  vault:
                    - Invalid address.
                extensions:
                  traceId: 00-00000000000000000000000000000000-0000000000000000-00
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/VaultOrProposalNotFound"
        429:
          $ref: "#/components/responses/TooManyRequests"
        500:
          $ref: "#/components/responses/InternalServerError"
        503:
          $ref: "#/components/responses/UnderMaintenance"
  /vaults/{vault}/proposals/{proposalId}/pledges:
    post:
      tags:
        - Vaults
      summary: Build Make Pledge Transaction Quote
      description: Builds a quote for a transaction to make a pledge to a vault proposal. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
      operationId: buildPledgeQuote
      parameters:
        - name: vault
          in: path
          description: Address of the vault
          required: true
          schema:
            $ref: "#/components/schemas/address"
          example: t7hy4H51KzU6PPCL4QKCdgBGPLV9Jpmf9G
        - name: proposalId
          in: path
          description: Id of the proposal
          required: true
          schema:
            type: integer
            format: uint64
            minimum: 1
          example: 1
      requestBody:
        description: Parameters used to make a pledge to a proposal
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/quotePledgeRequest"
            example:
              amount: "10000.00000000"
      security:
        - opdexAuth: []
      responses:
        200:
          description: Built pledge transaction quote
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/transactionQuoteResponse"
              example:
                gasUsed: 13674
                events:
                  - proposalId: 7
                    pledger: tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
                    pledgeAmount: "5000.00000000"
                    pledgerAmount: "5000.00000000"
                    proposalPledgeAmount: "10000.00000000"
                    "totalPledgeMinimumMet": true,
                    eventType: VaultProposalPledgeEvent
                    contract: t7hy4H51KzU6PPCL4QKCdgBGPLV9Jpmf9G
                    sortOrder: 0
                request:
                  sender: tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
                  to: t7hy4H51KzU6PPCL4QKCdgBGPLV9Jpmf9G
                  amount: "5000.00000000"
                  method: Pledge
                  parameters:
                    - label: Proposal Id
                      value: 7#1
                  callback: https://v1-test-api.opdex.com/v1/transactions
          headers:
            Cache-Control:
              schema:
                type: string
                example: private, max-age=15
              description: Holds directives that control caching
        400:
          description: The request is not valid
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/validationProblemDetails"
              example:
                type: https://httpstatuses.com/400
                title: One or more validation errors occurred.
                status: 400
                errors:
                  vault:
                    - Invalid address.
                extensions:
                  traceId: 00-00000000000000000000000000000000-0000000000000000-00
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/VaultOrProposalNotFound"
        429:
          $ref: "#/components/responses/TooManyRequests"
        500:
          $ref: "#/components/responses/InternalServerError"
        503:
          $ref: "#/components/responses/UnderMaintenance"
  /vaults/{vault}/proposals/{proposalId}/pledges/withdraw:
    post:
      tags:
        - Vaults
      summary: Build Withdraw Pledge Transaction Quote
      description: Builds a quote for a transaction to withdraw a pledge from a vault proposal. If the proposal is expired or the minimum pledge threshold is met, this will not affect the proposal. Otherwise, the pledge will be negated from the total pledge amount. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
      operationId: buildWithdrawPledgeQuote
      parameters:
        - name: vault
          in: path
          description: Address of the vault
          required: true
          schema:
            $ref: "#/components/schemas/address"
          example: t7hy4H51KzU6PPCL4QKCdgBGPLV9Jpmf9G
        - name: proposalId
          in: path
          description: Id of the proposal
          required: true
          schema:
            type: integer
            format: uint64
            minimum: 1
          example: 1
      requestBody:
        description: Parameters used to withdraw a pledge balance
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/quoteWithdrawPledgeRequest"
            example:
              amount: "10000.00000000"
      security:
        - opdexAuth: []
      responses:
        200:
          description: Built withdraw pledge transaction quote
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/transactionQuoteResponse"
              example:
                error:
                  friendly: Value overflow.
                  raw:
                gasUsed: 10283
                events: []
                request:
                  sender: tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
                  to: t7hy4H51KzU6PPCL4QKCdgBGPLV9Jpmf9G
                  amount: "0.00000000"
                  method: WithdrawVote
                  parameters:
                    - label: Proposal Id
                      value: 7#1
                    - label: Withdrawal Amount
                      value: 7#1000000000
                  callback: https://v1-test-api.opdex.com/v1/transactions
          headers:
            Cache-Control:
              schema:
                type: string
                example: private, max-age=15
              description: Holds directives that control caching
        400:
          description: The request is not valid
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/validationProblemDetails"
              example:
                type: https://httpstatuses.com/400
                title: One or more validation errors occurred.
                status: 400
                errors:
                  vault:
                    - Invalid address.
                extensions:
                  traceId: 00-00000000000000000000000000000000-0000000000000000-00
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/VaultOrProposalNotFound"
        429:
          $ref: "#/components/responses/TooManyRequests"
        500:
          $ref: "#/components/responses/InternalServerError"
        503:
          $ref: "#/components/responses/UnderMaintenance"
  /vaults/{vault}/proposals/{proposalId}/pledges/{pledger}:
    get:
      tags:
        - Vaults
      summary: Get Vault Proposal Pledge Position
      description: Retrieves details for a pledgers position on a vault proposal.
      operationId: getPledgePosition
      parameters:
        - name: vault
          in: path
          description: Address of the vault
          required: true
          schema:
            $ref: "#/components/schemas/address"
          example: t7hy4H51KzU6PPCL4QKCdgBGPLV9Jpmf9G
        - name: proposalId
          in: path
          description: Id of the proposal
          required: true
          schema:
            type: integer
            format: uint64
            minimum: 1
          example: 1
        - name: pledger
          in: path
          description: Address of the pledger
          required: true
          schema:
            $ref: "#/components/schemas/address"
          example: tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
      responses:
        200:
          description: Pledge position found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/pledgeResponse"
              example:
                vault: t7hy4H51KzU6PPCL4QKCdgBGPLV9Jpmf9G
                proposalId: 1
                pledger: tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
                pledge: "10000.00000000"
                balance: "10000.00000000"
                createdBlock: 3012570
                modifiedBlock: 3012570
          headers:
            Cache-Control:
              schema:
                type: string
                example: public, max-age=15
              description: Holds directives that control caching
        400:
          description: The request is not valid
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/validationProblemDetails"
              example:
                type: https://httpstatuses.com/400
                title: One or more validation errors occurred.
                status: 400
                errors:
                  vault:
                    - Invalid address.
                extensions:
                  traceId: 00-00000000000000000000000000000000-0000000000000000-00
        404:
          description: Vault, proposal or pledger not found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/problemDetails"
              example:
                type: https://httpstatuses.com/404
                title: Not Found
                status: 404
                extensions:
                  traceId: 00-00000000000000000000000000000000-0000000000000000-00
        429:
          $ref: "#/components/responses/TooManyRequests"
        500:
          $ref: "#/components/responses/InternalServerError"
        503:
          $ref: "#/components/responses/UnderMaintenance"
  /vaults/{vault}/proposals/{proposalId}/votes:
    post:
      tags:
        - Vaults
      summary: Build Cast Vote Transaction Quote
      description: Builds a quote for a transaction to make a vote on a vault proposal. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
      operationId: buildVoteQuote
      parameters:
        - name: vault
          in: path
          description: Address of the vault
          required: true
          schema:
            $ref: "#/components/schemas/address"
          example: t7hy4H51KzU6PPCL4QKCdgBGPLV9Jpmf9G
        - name: proposalId
          in: path
          description: Id of the proposal
          required: true
          schema:
            type: integer
            format: uint64
            minimum: 1
          example: 1
      requestBody:
        description: Parameters used to vote on a proposal
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/quoteVoteRequest"
            example:
              amount: "10000.00000000"
              inFavor: true
      security:
        - opdexAuth: []
      responses:
        200:
          description: Built vote transaction quote
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/transactionQuoteResponse"
              example:
                error:
                  friendly: Unable to vote, invalid status.
                  raw:
                gasUsed: 13674
                events: []
                request:
                  sender: tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
                  to: t7hy4H51KzU6PPCL4QKCdgBGPLV9Jpmf9G
                  amount: "10000.00000000"
                  method: Vote
                  parameters:
                    - label: Proposal Id
                      value: 7#1
                    - label: Favor
                      value: 1#True
                  callback: https://v1-test-api.opdex.com/v1/transactions
          headers:
            Cache-Control:
              schema:
                type: string
                example: private, max-age=15
              description: Holds directives that control caching
        400:
          description: The request is not valid
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/validationProblemDetails"
              example:
                type: https://httpstatuses.com/400
                title: One or more validation errors occurred.
                status: 400
                errors:
                  vault:
                    - Invalid address.
                extensions:
                  traceId: 00-00000000000000000000000000000000-0000000000000000-00
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/VaultOrProposalNotFound"
        429:
          $ref: "#/components/responses/TooManyRequests"
        500:
          $ref: "#/components/responses/InternalServerError"
        503:
          $ref: "#/components/responses/UnderMaintenance"
  /vaults/{vault}/proposals/{proposalId}/votes/withdraw:
    post:
      tags:
        - Vaults
      summary: Build Withdraw Vote Transaction Quote
      description: Builds a quote for a transaction to withdraw a vote from a vault proposal. If the proposal is completed or expired, this will not affect the proposal. Otherwise, the vote will be negated from the current voting weights. The quote can be broadcast by a Stratis Transaction Handoff Broadcastor. See the [specification](https://github.com/Opdex/STHS) for further details.
      operationId: buildWithdrawVoteQuote
      parameters:
        - name: vault
          in: path
          description: Address of the vault
          required: true
          schema:
            $ref: "#/components/schemas/address"
          example: t7hy4H51KzU6PPCL4QKCdgBGPLV9Jpmf9G
        - name: proposalId
          in: path
          description: Id of the proposal
          required: true
          schema:
            type: integer
            format: uint64
            minimum: 1
          example: 1
      requestBody:
        description: Parameters used to withdraw a vote balance
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/quoteWithdrawVoteRequest"
            example:
              amount: "10000.00000000"
      security:
        - opdexAuth: []
      responses:
        200:
          description: Built withdraw vote transaction quote
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/transactionQuoteResponse"
              example:
                error:
                  friendly: Value overflow.
                  raw:
                gasUsed: 10290
                events: []
                request:
                  sender: tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
                  to: t7hy4H51KzU6PPCL4QKCdgBGPLV9Jpmf9G
                  amount: "0.00000000"
                  method: WithdrawVote
                  parameters:
                    - label: Proposal Id
                      value: 7#1
                    - label: Withdrawal Amount
                      value: 7#1000000000
                  callback: https://v1-test-api.opdex.com/v1/transactions
          headers:
            Cache-Control:
              schema:
                type: string
                example: private, max-age=15
              description: Holds directives that control caching
        400:
          description: The request is not valid
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/validationProblemDetails"
              example:
                type: https://httpstatuses.com/400
                title: One or more validation errors occurred.
                status: 400
                errors:
                  vault:
                    - Invalid address.
                extensions:
                  traceId: 00-00000000000000000000000000000000-0000000000000000-00
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/VaultOrProposalNotFound"
        429:
          $ref: "#/components/responses/TooManyRequests"
        500:
          $ref: "#/components/responses/InternalServerError"
        503:
          $ref: "#/components/responses/UnderMaintenance"
  /vaults/{vault}/proposals/{proposalId}/votes/{voter}:
    get:
      tags:
        - Vaults
      summary: Get Vault Proposal Vote Position
      description: Retrieves details for a voters position on a vault proposal.
      operationId: getVotePosition
      parameters:
        - name: vault
          in: path
          description: Address of the vault
          required: true
          schema:
            $ref: "#/components/schemas/address"
          example: t7hy4H51KzU6PPCL4QKCdgBGPLV9Jpmf9G
        - name: proposalId
          in: path
          description: Id of the proposal
          required: true
          schema:
            type: integer
            format: uint64
            minimum: 1
          example: 1
        - name: voter
          in: path
          description: Address of the voter
          required: true
          schema:
            $ref: "#/components/schemas/address"
          example: tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
      responses:
        200:
          description: Vote position found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/voteResponse"
              example:
                vault: t7hy4H51KzU6PPCL4QKCdgBGPLV9Jpmf9G
                proposalId: 1
                voter: tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
                vote: "30000.00000000"
                balance: "30000.00000000"
                inFavor: true
                createdBlock: 3026455
                modifiedBlock: 3026455
          headers:
            Cache-Control:
              schema:
                type: string
                example: public, max-age=15
              description: Holds directives that control caching
        400:
          description: The request is not valid
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/validationProblemDetails"
              example:
                type: https://httpstatuses.com/400
                title: One or more validation errors occurred.
                status: 400
                errors:
                  vault:
                    - Invalid address.
                extensions:
                  traceId: 00-00000000000000000000000000000000-0000000000000000-00
        404:
          description: Vault, proposal or voter not found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/problemDetails"
              example:
                type: https://httpstatuses.com/404
                title: Not Found
                status: 404
                extensions:
                  traceId: 00-00000000000000000000000000000000-0000000000000000-00
        429:
          $ref: "#/components/responses/TooManyRequests"
        500:
          $ref: "#/components/responses/InternalServerError"
        503:
          $ref: "#/components/responses/UnderMaintenance"
  /vaults/{vault}/votes:
    get:
      tags:
        - Vaults
      summary: Get Vault Proposal Votes
      description: Retrieves details for votes that have been made against proposals within tracked Opdex vaults. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
      operationId: getVotes
      parameters:
        - name: vault
          in: path
          description: Address of the vault
          required: true
          schema:
            $ref: "#/components/schemas/address"
          example: t7hy4H51KzU6PPCL4QKCdgBGPLV9Jpmf9G
        - name: proposalId
          in: query
          description: Id of the proposal in the vault
          schema:
            type: integer
            format: uint64
            minimum: 1
          example: 1
        - name: voter
          in: query
          description: Address of the voter
          schema:
            $ref: "#/components/schemas/address"
          example: tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
        - name: includeZeroBalances
          in: query
          description: Includes zero balances if true, otherwise filters out zero balances if false
          schema:
            type: boolean
            default: false
          example: true
        - name: direction
          in: query
          description: Order direction of the results
          schema:
            $ref: "#/components/schemas/sortDirection"
          example: DESC
        - name: limit
          in: query
          description: Number of results per page
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 50
            default: 10
          example: 10
        - name: cursor
          in: query
          description: Reference of the requested page, returned by a previous call
          schema:
            type: string
      responses:
        200:
          description: Vote results found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/votesResponse"
              example:
                results:
                  - vault: t7hy4H51KzU6PPCL4QKCdgBGPLV9Jpmf9G
                    proposalId: 2
                    voter: tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
                    vote: "8000.00000000"
                    balance: "8000.00000000"
                    inFavor: false
                    createdBlock: 4001059
                    modifiedBlock: 4001059
                  - vault: t7hy4H51KzU6PPCL4QKCdgBGPLV9Jpmf9G
                    proposalId: 1
                    voter: tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
                    vote: "30000.00000000"
                    balance: "0.00000000"
                    inFavor: true
                    createdBlock: 3026455
                    modifiedBlock: 3725314
                paging: {}
          headers:
            Cache-Control:
              schema:
                type: string
                example: public, max-age=15
              description: Holds directives that control caching
        400:
          description: The request is not valid
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/validationProblemDetails"
              example:
                type: https://httpstatuses.com/400
                title: One or more validation errors occurred.
                status: 400
                errors:
                  vault:
                    - Invalid address.
                extensions:
                  traceId: 00-00000000000000000000000000000000-0000000000000000-00
        404:
          $ref: "#/components/responses/VaultNotFound"
        429:
          $ref: "#/components/responses/TooManyRequests"
        500:
          $ref: "#/components/responses/InternalServerError"
        503:
          $ref: "#/components/responses/UnderMaintenance"
  /wallets/{address}/allowance/{token}/approved/{spender}:
    get:
      tags:
        - Wallets
      summary: Get Approved Allowance
      description: Retrieves the allowance of a spender for SRC tokens owned by another address.
      operationId: getApprovedAllowance
      parameters:
        - name: address
          in: path
          description: Address holding the position
          required: true
          schema:
            $ref: "#/components/schemas/address"
          example: tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
        - name: token
          in: path
          description: Address of the SRC token
          required: true
          schema:
            $ref: "#/components/schemas/address"
          example: tGSk2dVENuqAQ2rNXbui37XHuurFCTqadD
        - name: spender
          in: path
          description: Address approved to spend the token
          required: true
          schema:
            $ref: "#/components/schemas/address"
          example: tAFxpxRdcV9foADqD6gK3c8sY5MeANzFp5
      responses:
        200:
          description: Found approved allowance
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/approvedAllowanceResponse"
              example:
                allowance: "0.15000000"
                owner: tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
                spender: tAFxpxRdcV9foADqD6gK3c8sY5MeANzFp5
                token: tGSk2dVENuqAQ2rNXbui37XHuurFCTqadD
          headers:
            Cache-Control:
              schema:
                type: string
                example: public, max-age=15
              description: Holds directives that control caching
        400:
          description: The request is not valid
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/validationProblemDetails"
              example:
                type: https://httpstatuses.com/400
                title: One or more validation errors occurred.
                status: 400
                errors:
                  address:
                    - Invalid address.
                extensions:
                  traceId: 00-00000000000000000000000000000000-0000000000000000-00
        404:
          $ref: "#/components/responses/TokenNotFound"
        429:
          $ref: "#/components/responses/TooManyRequests"
        500:
          $ref: "#/components/responses/InternalServerError"
        503:
          $ref: "#/components/responses/UnderMaintenance"
  /wallets/{address}/balance:
    get:
      tags:
        - Wallets
      summary: Get Balances
      description: Retrieves details of all indexed token balances for an address. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
      operationId: getBalances
      parameters:
        - name: address
          in: path
          description: Address holding the position
          required: true
          schema:
            $ref: "#/components/schemas/address"
          example: tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
        - name: tokens
          in: query
          description: Tokens to retrieve balances for
          schema:
            type: array
            items:
              $ref: "#/components/schemas/address"
        - name: tokenAttributes
          in: query
          description: Types of tokens to retrieve balances for
          schema:
            type: array
            items:
              $ref: "#/components/schemas/tokenAttributeFilter"
          example:
            - Provisional
            - Staking
        - name: includeZeroBalances
          in: query
          description: Include zero balances if true, otherwise zero balances are excluded if false
          schema:
            type: boolean
            default: false
          example: true
        - name: direction
          in: query
          description: Order direction of the results
          schema:
            $ref: "#/components/schemas/sortDirection"
          example: DESC
        - name: limit
          in: query
          description: Number of results per page
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 50
            default: 10
          example: 10
        - name: cursor
          in: query
          description: Reference of the requested page, returned by a previous call
          schema:
            type: string
      responses:
        200:
          description: Address balance results found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/addressBalancesResponse"
              example:
                results:
                  - balance: "27580.45995517"
                    address: tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
                    token: tPXUEzDyZDrR8YzQ6LiAJWhVuAKB8RUjyt
                    createdBlock: 2989306
                    modifiedBlock: 3015545
                  - balance: "362.628729020"
                    address: tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
                    token: tCorSgPVt6pF5Q4gzcrZWDZ8f7ERVxhwAd
                    createdBlock: 2989320
                    modifiedBlock: 2991148
                  - balance: "0.12026492"
                    address: tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
                    token: tGSk2dVENuqAQ2rNXbui37XHuurFCTqadD
                    createdBlock: 2989326
                    modifiedBlock: 3009264
                  - balance: "1.00000000"
                    address: tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
                    token: tVFhXcS3gVb49MSTsaDFoqkxLrAUiNEN7n
                    createdBlock: 2989326
                    modifiedBlock: 3003823
                  - balance: "8.556538343928946001"
                    address: tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
                    token: tF83sdXXt2nTkL7UyEYDVFMK4jTuYMbmR3
                    createdBlock: 2989330
                    modifiedBlock: 2991127
                paging: {}
          headers:
            Cache-Control:
              schema:
                type: string
                example: public, max-age=15
              description: Holds directives that control caching
        400:
          description: The request is not valid
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/validationProblemDetails"
              example:
                type: https://httpstatuses.com/400
                title: One or more validation errors occurred.
                status: 400
                errors:
                  address:
                    - Invalid address.
                extensions:
                  traceId: 00-00000000000000000000000000000000-0000000000000000-00
        429:
          $ref: "#/components/responses/TooManyRequests"
        500:
          $ref: "#/components/responses/InternalServerError"
        503:
          $ref: "#/components/responses/UnderMaintenance"
  /wallets/{address}/balance/{token}:
    get:
      tags:
        - Wallets
      summary: Get Balance
      description: Retrieves the indexed balance of a tracked SRC token for an address. If you are retrieving the balance of an SRC token for a new address, or want to forcefully reload a balance, use `POST /wallets/{address}/balance/{token}` instead.
      operationId: getBalance
      parameters:
        - name: address
          in: path
          description: Address holding the position
          required: true
          schema:
            $ref: "#/components/schemas/address"
          example: tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
        - name: token
          in: path
          description: Address of the SRC token
          required: true
          schema:
            $ref: "#/components/schemas/address"
          example: tGSk2dVENuqAQ2rNXbui37XHuurFCTqadD
      responses:
        200:
          description: Address balance details found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/addressBalanceResponse"
              example:
                balance: "0.12026492"
                address: tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
                token: tGSk2dVENuqAQ2rNXbui37XHuurFCTqadD
                createdBlock: 2989326
                modifiedBlock: 3009264
          headers:
            Cache-Control:
              schema:
                type: string
                example: public, max-age=15
              description: Holds directives that control caching
        400:
          description: The request is not valid
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/validationProblemDetails"
              example:
                type: https://httpstatuses.com/400
                title: One or more validation errors occurred.
                status: 400
                errors:
                  address:
                    - Invalid address.
                extensions:
                  traceId: 00-00000000000000000000000000000000-0000000000000000-00
        404:
          $ref: "#/components/responses/TokenNotFound"
        429:
          $ref: "#/components/responses/TooManyRequests"
        500:
          $ref: "#/components/responses/InternalServerError"
        503:
          $ref: "#/components/responses/UnderMaintenance"
    post:
      tags:
        - Wallets
      summary: Refresh Balance
      description: Retrieves and indexes the latest balance of a tracked SRC token for an address.
      operationId: refreshBalance
      parameters:
        - name: address
          in: path
          description: Address holding the position
          required: true
          schema:
            $ref: "#/components/schemas/address"
          example: tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
        - name: token
          in: path
          description: Address of the SRC token
          required: true
          schema:
            $ref: "#/components/schemas/address"
          example: tGSk2dVENuqAQ2rNXbui37XHuurFCTqadD
      security:
        - opdexAuth: []
      responses:
        200:
          description: Address balance refreshed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/addressBalanceResponse"
              example:
                balance: "0.12026492"
                address: tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
                token: tGSk2dVENuqAQ2rNXbui37XHuurFCTqadD
                createdBlock: 2989326
                modifiedBlock: 3009264
          headers:
            Cache-Control:
              schema:
                type: string
                example: public, max-age=15
              description: Holds directives that control caching
        400:
          description: The request is not valid
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/validationProblemDetails"
              example:
                type: https://httpstatuses.com/400
                title: One or more validation errors occurred.
                status: 400
                errors:
                  address:
                    - Invalid address.
                extensions:
                  traceId: 00-00000000000000000000000000000000-0000000000000000-00
        404:
          $ref: "#/components/responses/TokenNotFound"
        429:
          $ref: "#/components/responses/TooManyRequests"
        500:
          $ref: "#/components/responses/InternalServerError"
        503:
          $ref: "#/components/responses/UnderMaintenance"
  /wallets/{address}/mining:
    get:
      tags:
        - Wallets
      summary: Get Mining Positions
      description: Retrieves details of all indexed Opdex mining positions for an address. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
      operationId: getMiningPositions
      parameters:
        - name: address
          in: path
          description: Address holding the position
          required: true
          schema:
            $ref: "#/components/schemas/address"
          example: tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
        - name: miningPools
          in: query
          description: Mining pools to retrieve positions for
          schema:
            type: array
            items:
              $ref: "#/components/schemas/address"
        - name: liquidityPools
          in: query
          description: Related liquidity pools to retrieve positions for
          schema:
            type: array
            items:
              $ref: "#/components/schemas/address"
        - name: includeZeroAmounts
          in: query
          description: Include zero amounts if true, otherwise zero amounts are excluded
          schema:
            type: boolean
            default: false
          example: true
        - name: direction
          in: query
          description: Order direction of the results
          schema:
            $ref: "#/components/schemas/sortDirection"
          example: DESC
        - name: limit
          in: query
          description: Number of results per page
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 50
            default: 10
          example: 10
        - name: cursor
          in: query
          description: Reference of the requested page, returned by a previous call
          schema:
            type: string
      responses:
        200:
          description: Mining position results retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/miningPositionsResponse"
              example:
                results:
                  - address: tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
                    amount: "3.14831968"
                    miningPool: tRs6rXfHuLhKZhWuWpycLASzAyn4kXo6bT
                    miningToken: tVFhXcS3gVb49MSTsaDFoqkxLrAUiNEN7n
                    createdBlock: 2991138
                    modifiedBlock: 2991446
                paging: {}
          headers:
            Cache-Control:
              schema:
                type: string
                example: public, max-age=15
              description: Holds directives that control caching
        400:
          description: The request is not valid
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/validationProblemDetails"
              example:
                type: https://httpstatuses.com/400
                title: One or more validation errors occurred.
                status: 400
                errors:
                  address:
                    - Invalid address.
                extensions:
                  traceId: 00-00000000000000000000000000000000-0000000000000000-00
        429:
          $ref: "#/components/responses/TooManyRequests"
        500:
          $ref: "#/components/responses/InternalServerError"
        503:
          $ref: "#/components/responses/UnderMaintenance"
  /wallets/{address}/mining/{pool}:
    get:
      tags:
        - Wallets
      summary: Get Mining Position
      description: Retrieves details of an Opdex mining position that has been indexed.
      operationId: getMiningPosition
      parameters:
        - name: address
          in: path
          description: Address holding the position
          required: true
          schema:
            $ref: "#/components/schemas/address"
          example: tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
        - name: pool
          in: path
          description: Address of the mining pool
          required: true
          schema:
            $ref: "#/components/schemas/address"
          example: tRs6rXfHuLhKZhWuWpycLASzAyn4kXo6bT
      responses:
        200:
          description: Mining position details retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/miningPositionsResponse"
              example:
                address: tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
                amount: "3.14831968"
                miningPool: tRs6rXfHuLhKZhWuWpycLASzAyn4kXo6bT
                miningToken: tVFhXcS3gVb49MSTsaDFoqkxLrAUiNEN7n
                createdBlock: 2991138
                modifiedBlock: 2991446
          headers:
            Cache-Control:
              schema:
                type: string
                example: public, max-age=15
              description: Holds directives that control caching
        400:
          description: The request is not valid
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/validationProblemDetails"
              example:
                type: https://httpstatuses.com/400
                title: One or more validation errors occurred.
                status: 400
                errors:
                  address:
                    - Invalid address.
                extensions:
                  traceId: 00-00000000000000000000000000000000-0000000000000000-00
        404:
          description: Mining pool or mining position not found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/problemDetails"
              example:
                type: https://httpstatuses.com/404
                title: Not Found
                detail: Mining pool not found.
                status: 404
                extensions:
                  traceId: 00-00000000000000000000000000000000-0000000000000000-00
        429:
          $ref: "#/components/responses/TooManyRequests"
        500:
          $ref: "#/components/responses/InternalServerError"
        503:
          $ref: "#/components/responses/UnderMaintenance"
  /wallets/{address}/staking:
    get:
      tags:
        - Wallets
      summary: Get Staking Positions
      description: Retrieves details of all indexed Opdex staking positions for an address. This is a [paginated endpoint](https://docs.opdex.com/reference/using-the-opdex-platform-api#paginated-endpoints), so a request will retrieve a single page of results. It is recommended to supply filters to your query, to reduce the total number of requests that you may have to make.
      operationId: getStakingPositions
      parameters:
        - name: address
          in: path
          description: Address holding the position
          required: true
          schema:
            $ref: "#/components/schemas/address"
          example: tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
        - name: liquidityPools
          in: query
          description: Liquidity pools to retrieve positions for
          schema:
            type: array
            items:
              $ref: "#/components/schemas/address"
        - name: includeZeroAmounts
          in: query
          description: Include zero amounts if true, otherwise zero amounts are excluded if false
          schema:
            type: boolean
            default: false
          example: true
        - name: direction
          in: query
          description: Order direction of the results
          schema:
            $ref: "#/components/schemas/sortDirection"
          example: DESC
        - name: limit
          in: query
          description: Number of results per page
          schema:
            type: integer
            format: int32
            minimum: 1
            maximum: 50
            default: 10
          example: 10
        - name: cursor
          in: query
          description: Reference of the requested page, returned by a previous call
          schema:
            type: string
      responses:
        200:
          description: Staking position results retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/miningPositionsResponse"
              example:
                results:
                  - address: tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
                    amount: "555.94827358"
                    liquidityPool: tVFhXcS3gVb49MSTsaDFoqkxLrAUiNEN7n
                    stakingToken: tTTuKbCR2UnsEByXBp1ynBz91J2yz63h1c
                    createdBlock: 3646922
                    modifiedBlock: 3721001
                paging: {}
          headers:
            Cache-Control:
              schema:
                type: string
                example: public, max-age=15
              description: Holds directives that control caching
        400:
          description: The request is not valid
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/validationProblemDetails"
              example:
                type: https://httpstatuses.com/400
                title: One or more validation errors occurred.
                status: 400
                errors:
                  address:
                    - Invalid address.
                extensions:
                  traceId: 00-00000000000000000000000000000000-0000000000000000-00
        429:
          $ref: "#/components/responses/TooManyRequests"
        500:
          $ref: "#/components/responses/InternalServerError"
        503:
          $ref: "#/components/responses/UnderMaintenance"
  /wallets/{address}/staking/{pool}:
    get:
      tags:
        - Wallets
      summary: Get Staking Position
      description: Retrieves details of an Opdex staking position that has been indexed.
      operationId: getStakingPosition
      parameters:
        - name: address
          in: path
          description: Address holding the position
          required: true
          schema:
            $ref: "#/components/schemas/address"
          example: tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
        - name: pool
          in: path
          description: Address of the liquidity pool
          required: true
          schema:
            $ref: "#/components/schemas/address"
          example: tVFhXcS3gVb49MSTsaDFoqkxLrAUiNEN7n
      responses:
        200:
          description: Staking position details retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/miningPositionsResponse"
              example:
                address: tQ9RukZsB6bBsenHnGSo1q69CJzWGnxohm
                amount: "555.94827358"
                liquidityPool: tVFhXcS3gVb49MSTsaDFoqkxLrAUiNEN7n
                stakingToken: tTTuKbCR2UnsEByXBp1ynBz91J2yz63h1c
                createdBlock: 3646922
                modifiedBlock: 3721001
          headers:
            Cache-Control:
              schema:
                type: string
                example: public, max-age=15
              description: Holds directives that control caching
        400:
          description: The request is not valid
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/validationProblemDetails"
              example:
                type: https://httpstatuses.com/400
                title: One or more validation errors occurred.
                status: 400
                errors:
                  address:
                    - Invalid address.
                extensions:
                  traceId: 00-00000000000000000000000000000000-0000000000000000-00
        404:
          description: Liquidity pool or staking position not found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/problemDetails"
              example:
                type: https://httpstatuses.com/404
                title: Not Found
                detail: Liquidity pool not found.
                status: 404
                extensions:
                  traceId: 00-00000000000000000000000000000000-0000000000000000-00
        429:
          $ref: "#/components/responses/TooManyRequests"
        500:
          $ref: "#/components/responses/InternalServerError"
        503:
          $ref: "#/components/responses/UnderMaintenance"
